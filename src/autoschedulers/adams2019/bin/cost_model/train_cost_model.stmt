module name=train_cost_model, target=x86-64-linux-avx-avx2-f16c-fma-no_runtime-sse41
external_plus_metadata func train_cost_model (num_stages, batch_size, num_cores, pipeline_features, schedule_features, head1_filter, head1_bias, head2_filter, head2_bias, filter1, bias1, learning_rate, timestep, reference, true_runtime, updated_head1_filter, updated_head1_bias, updated_head2_filter, updated_head2_bias, updated_filter1, updated_bias1, prediction_output, loss_output, load_cost_output, store_cost_output, compute_cost_output) {
assert((uint64)reinterpret((halide_buffer_t *)updated_head2_filter.buffer) != (uint64)0, halide_error_buffer_argument_is_null("updated_head2_filter"))
assert((uint64)reinterpret((halide_buffer_t *)updated_head2_bias.buffer) != (uint64)0, halide_error_buffer_argument_is_null("updated_head2_bias"))
assert((uint64)reinterpret((halide_buffer_t *)updated_head1_filter.buffer) != (uint64)0, halide_error_buffer_argument_is_null("updated_head1_filter"))
assert((uint64)reinterpret((halide_buffer_t *)updated_head1_bias.buffer) != (uint64)0, halide_error_buffer_argument_is_null("updated_head1_bias"))
assert((uint64)reinterpret((halide_buffer_t *)updated_filter1.buffer) != (uint64)0, halide_error_buffer_argument_is_null("updated_filter1"))
assert((uint64)reinterpret((halide_buffer_t *)updated_bias1.buffer) != (uint64)0, halide_error_buffer_argument_is_null("updated_bias1"))
assert((uint64)reinterpret((halide_buffer_t *)true_runtime.buffer) != (uint64)0, halide_error_buffer_argument_is_null("true_runtime"))
assert((uint64)reinterpret((halide_buffer_t *)store_cost_output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("store_cost_output"))
assert((uint64)reinterpret((halide_buffer_t *)schedule_features.buffer) != (uint64)0, halide_error_buffer_argument_is_null("schedule_features"))
assert((uint64)reinterpret((halide_buffer_t *)prediction_output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("prediction_output"))
assert((uint64)reinterpret((halide_buffer_t *)pipeline_features.buffer) != (uint64)0, halide_error_buffer_argument_is_null("pipeline_features"))
assert((uint64)reinterpret((halide_buffer_t *)loss_output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("loss_output"))
assert((uint64)reinterpret((halide_buffer_t *)load_cost_output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("load_cost_output"))
assert((uint64)reinterpret((halide_buffer_t *)head2_filter.buffer) != (uint64)0, halide_error_buffer_argument_is_null("head2_filter"))
assert((uint64)reinterpret((halide_buffer_t *)head2_bias.buffer) != (uint64)0, halide_error_buffer_argument_is_null("head2_bias"))
assert((uint64)reinterpret((halide_buffer_t *)head1_filter.buffer) != (uint64)0, halide_error_buffer_argument_is_null("head1_filter"))
assert((uint64)reinterpret((halide_buffer_t *)head1_bias.buffer) != (uint64)0, halide_error_buffer_argument_is_null("head1_bias"))
assert((uint64)reinterpret((halide_buffer_t *)filter1.buffer) != (uint64)0, halide_error_buffer_argument_is_null("filter1"))
assert((uint64)reinterpret((halide_buffer_t *)compute_cost_output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("compute_cost_output"))
assert((uint64)reinterpret((halide_buffer_t *)bias1.buffer) != (uint64)0, halide_error_buffer_argument_is_null("bias1"))
let bias1 = (void *)_halide_buffer_get_host((halide_buffer_t *)bias1.buffer)
let bias1.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)bias1.buffer)
let bias1.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)bias1.buffer)
let bias1.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)bias1.buffer)
let bias1.min.0 = _halide_buffer_get_min((halide_buffer_t *)bias1.buffer, 0)
let bias1.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)bias1.buffer, 0)
let bias1.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)bias1.buffer, 0)
let compute_cost_output = (void *)_halide_buffer_get_host((halide_buffer_t *)compute_cost_output.buffer)
let compute_cost_output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)compute_cost_output.buffer)
let compute_cost_output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)compute_cost_output.buffer)
let compute_cost_output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)compute_cost_output.buffer)
let compute_cost_output.min.0 = _halide_buffer_get_min((halide_buffer_t *)compute_cost_output.buffer, 0)
let compute_cost_output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)compute_cost_output.buffer, 0)
let compute_cost_output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)compute_cost_output.buffer, 0)
let filter1 = (void *)_halide_buffer_get_host((halide_buffer_t *)filter1.buffer)
let filter1.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)filter1.buffer)
let filter1.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)filter1.buffer)
let filter1.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)filter1.buffer)
let filter1.min.0 = _halide_buffer_get_min((halide_buffer_t *)filter1.buffer, 0)
let filter1.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)filter1.buffer, 0)
let filter1.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)filter1.buffer, 0)
let filter1.min.1 = _halide_buffer_get_min((halide_buffer_t *)filter1.buffer, 1)
let filter1.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)filter1.buffer, 1)
let filter1.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)filter1.buffer, 1)
let head1_bias = (void *)_halide_buffer_get_host((halide_buffer_t *)head1_bias.buffer)
let head1_bias.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)head1_bias.buffer)
let head1_bias.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)head1_bias.buffer)
let head1_bias.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)head1_bias.buffer)
let head1_bias.min.0 = _halide_buffer_get_min((halide_buffer_t *)head1_bias.buffer, 0)
let head1_bias.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)head1_bias.buffer, 0)
let head1_bias.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)head1_bias.buffer, 0)
let head1_filter = (void *)_halide_buffer_get_host((halide_buffer_t *)head1_filter.buffer)
let head1_filter.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)head1_filter.buffer)
let head1_filter.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)head1_filter.buffer)
let head1_filter.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)head1_filter.buffer)
let head1_filter.min.0 = _halide_buffer_get_min((halide_buffer_t *)head1_filter.buffer, 0)
let head1_filter.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)head1_filter.buffer, 0)
let head1_filter.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)head1_filter.buffer, 0)
let head1_filter.min.1 = _halide_buffer_get_min((halide_buffer_t *)head1_filter.buffer, 1)
let head1_filter.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)head1_filter.buffer, 1)
let head1_filter.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)head1_filter.buffer, 1)
let head1_filter.min.2 = _halide_buffer_get_min((halide_buffer_t *)head1_filter.buffer, 2)
let head1_filter.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)head1_filter.buffer, 2)
let head1_filter.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)head1_filter.buffer, 2)
let head2_bias = (void *)_halide_buffer_get_host((halide_buffer_t *)head2_bias.buffer)
let head2_bias.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)head2_bias.buffer)
let head2_bias.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)head2_bias.buffer)
let head2_bias.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)head2_bias.buffer)
let head2_bias.min.0 = _halide_buffer_get_min((halide_buffer_t *)head2_bias.buffer, 0)
let head2_bias.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)head2_bias.buffer, 0)
let head2_bias.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)head2_bias.buffer, 0)
let head2_filter = (void *)_halide_buffer_get_host((halide_buffer_t *)head2_filter.buffer)
let head2_filter.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)head2_filter.buffer)
let head2_filter.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)head2_filter.buffer)
let head2_filter.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)head2_filter.buffer)
let head2_filter.min.0 = _halide_buffer_get_min((halide_buffer_t *)head2_filter.buffer, 0)
let head2_filter.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)head2_filter.buffer, 0)
let head2_filter.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)head2_filter.buffer, 0)
let head2_filter.min.1 = _halide_buffer_get_min((halide_buffer_t *)head2_filter.buffer, 1)
let head2_filter.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)head2_filter.buffer, 1)
let head2_filter.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)head2_filter.buffer, 1)
let load_cost_output = (void *)_halide_buffer_get_host((halide_buffer_t *)load_cost_output.buffer)
let load_cost_output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)load_cost_output.buffer)
let load_cost_output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)load_cost_output.buffer)
let load_cost_output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)load_cost_output.buffer)
let load_cost_output.min.0 = _halide_buffer_get_min((halide_buffer_t *)load_cost_output.buffer, 0)
let load_cost_output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)load_cost_output.buffer, 0)
let load_cost_output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)load_cost_output.buffer, 0)
let loss_output = (void *)_halide_buffer_get_host((halide_buffer_t *)loss_output.buffer)
let loss_output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)loss_output.buffer)
let loss_output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)loss_output.buffer)
let loss_output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)loss_output.buffer)
let pipeline_features = (void *)_halide_buffer_get_host((halide_buffer_t *)pipeline_features.buffer)
let pipeline_features.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)pipeline_features.buffer)
let pipeline_features.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)pipeline_features.buffer)
let pipeline_features.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)pipeline_features.buffer)
let pipeline_features.min.0 = _halide_buffer_get_min((halide_buffer_t *)pipeline_features.buffer, 0)
let pipeline_features.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)pipeline_features.buffer, 0)
let pipeline_features.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)pipeline_features.buffer, 0)
let pipeline_features.min.1 = _halide_buffer_get_min((halide_buffer_t *)pipeline_features.buffer, 1)
let pipeline_features.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)pipeline_features.buffer, 1)
let pipeline_features.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)pipeline_features.buffer, 1)
let pipeline_features.min.2 = _halide_buffer_get_min((halide_buffer_t *)pipeline_features.buffer, 2)
let pipeline_features.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)pipeline_features.buffer, 2)
let pipeline_features.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)pipeline_features.buffer, 2)
let prediction_output = (void *)_halide_buffer_get_host((halide_buffer_t *)prediction_output.buffer)
let prediction_output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)prediction_output.buffer)
let prediction_output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)prediction_output.buffer)
let prediction_output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)prediction_output.buffer)
let prediction_output.min.0 = _halide_buffer_get_min((halide_buffer_t *)prediction_output.buffer, 0)
let prediction_output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)prediction_output.buffer, 0)
let prediction_output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)prediction_output.buffer, 0)
let schedule_features = (void *)_halide_buffer_get_host((halide_buffer_t *)schedule_features.buffer)
let schedule_features.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)schedule_features.buffer)
let schedule_features.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)schedule_features.buffer)
let schedule_features.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)schedule_features.buffer)
let schedule_features.min.0 = _halide_buffer_get_min((halide_buffer_t *)schedule_features.buffer, 0)
let schedule_features.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)schedule_features.buffer, 0)
let schedule_features.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)schedule_features.buffer, 0)
let schedule_features.min.1 = _halide_buffer_get_min((halide_buffer_t *)schedule_features.buffer, 1)
let schedule_features.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)schedule_features.buffer, 1)
let schedule_features.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)schedule_features.buffer, 1)
let schedule_features.min.2 = _halide_buffer_get_min((halide_buffer_t *)schedule_features.buffer, 2)
let schedule_features.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)schedule_features.buffer, 2)
let schedule_features.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)schedule_features.buffer, 2)
let store_cost_output = (void *)_halide_buffer_get_host((halide_buffer_t *)store_cost_output.buffer)
let store_cost_output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)store_cost_output.buffer)
let store_cost_output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)store_cost_output.buffer)
let store_cost_output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)store_cost_output.buffer)
let store_cost_output.min.0 = _halide_buffer_get_min((halide_buffer_t *)store_cost_output.buffer, 0)
let store_cost_output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)store_cost_output.buffer, 0)
let store_cost_output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)store_cost_output.buffer, 0)
let true_runtime = (void *)_halide_buffer_get_host((halide_buffer_t *)true_runtime.buffer)
let true_runtime.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)true_runtime.buffer)
let true_runtime.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)true_runtime.buffer)
let true_runtime.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)true_runtime.buffer)
let true_runtime.min.0 = _halide_buffer_get_min((halide_buffer_t *)true_runtime.buffer, 0)
let true_runtime.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)true_runtime.buffer, 0)
let true_runtime.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)true_runtime.buffer, 0)
let updated_bias1 = (void *)_halide_buffer_get_host((halide_buffer_t *)updated_bias1.buffer)
let updated_bias1.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)updated_bias1.buffer)
let updated_bias1.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)updated_bias1.buffer)
let updated_bias1.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)updated_bias1.buffer)
let updated_bias1.min.0 = _halide_buffer_get_min((halide_buffer_t *)updated_bias1.buffer, 0)
let updated_bias1.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)updated_bias1.buffer, 0)
let updated_bias1.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)updated_bias1.buffer, 0)
let updated_bias1.min.1 = _halide_buffer_get_min((halide_buffer_t *)updated_bias1.buffer, 1)
let updated_bias1.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)updated_bias1.buffer, 1)
let updated_bias1.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)updated_bias1.buffer, 1)
let updated_filter1 = (void *)_halide_buffer_get_host((halide_buffer_t *)updated_filter1.buffer)
let updated_filter1.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)updated_filter1.buffer)
let updated_filter1.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)updated_filter1.buffer)
let updated_filter1.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)updated_filter1.buffer)
let updated_filter1.min.0 = _halide_buffer_get_min((halide_buffer_t *)updated_filter1.buffer, 0)
let updated_filter1.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)updated_filter1.buffer, 0)
let updated_filter1.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)updated_filter1.buffer, 0)
let updated_filter1.min.1 = _halide_buffer_get_min((halide_buffer_t *)updated_filter1.buffer, 1)
let updated_filter1.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)updated_filter1.buffer, 1)
let updated_filter1.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)updated_filter1.buffer, 1)
let updated_filter1.min.2 = _halide_buffer_get_min((halide_buffer_t *)updated_filter1.buffer, 2)
let updated_filter1.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)updated_filter1.buffer, 2)
let updated_filter1.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)updated_filter1.buffer, 2)
let updated_head1_bias = (void *)_halide_buffer_get_host((halide_buffer_t *)updated_head1_bias.buffer)
let updated_head1_bias.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)updated_head1_bias.buffer)
let updated_head1_bias.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)updated_head1_bias.buffer)
let updated_head1_bias.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)updated_head1_bias.buffer)
let updated_head1_bias.min.0 = _halide_buffer_get_min((halide_buffer_t *)updated_head1_bias.buffer, 0)
let updated_head1_bias.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)updated_head1_bias.buffer, 0)
let updated_head1_bias.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)updated_head1_bias.buffer, 0)
let updated_head1_bias.min.1 = _halide_buffer_get_min((halide_buffer_t *)updated_head1_bias.buffer, 1)
let updated_head1_bias.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)updated_head1_bias.buffer, 1)
let updated_head1_bias.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)updated_head1_bias.buffer, 1)
let updated_head1_filter = (void *)_halide_buffer_get_host((halide_buffer_t *)updated_head1_filter.buffer)
let updated_head1_filter.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)updated_head1_filter.buffer)
let updated_head1_filter.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)updated_head1_filter.buffer)
let updated_head1_filter.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)updated_head1_filter.buffer)
let updated_head1_filter.min.0 = _halide_buffer_get_min((halide_buffer_t *)updated_head1_filter.buffer, 0)
let updated_head1_filter.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)updated_head1_filter.buffer, 0)
let updated_head1_filter.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)updated_head1_filter.buffer, 0)
let updated_head1_filter.min.1 = _halide_buffer_get_min((halide_buffer_t *)updated_head1_filter.buffer, 1)
let updated_head1_filter.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)updated_head1_filter.buffer, 1)
let updated_head1_filter.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)updated_head1_filter.buffer, 1)
let updated_head1_filter.min.2 = _halide_buffer_get_min((halide_buffer_t *)updated_head1_filter.buffer, 2)
let updated_head1_filter.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)updated_head1_filter.buffer, 2)
let updated_head1_filter.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)updated_head1_filter.buffer, 2)
let updated_head1_filter.min.3 = _halide_buffer_get_min((halide_buffer_t *)updated_head1_filter.buffer, 3)
let updated_head1_filter.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)updated_head1_filter.buffer, 3)
let updated_head1_filter.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)updated_head1_filter.buffer, 3)
let updated_head2_bias = (void *)_halide_buffer_get_host((halide_buffer_t *)updated_head2_bias.buffer)
let updated_head2_bias.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)updated_head2_bias.buffer)
let updated_head2_bias.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)updated_head2_bias.buffer)
let updated_head2_bias.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)updated_head2_bias.buffer)
let updated_head2_bias.min.0 = _halide_buffer_get_min((halide_buffer_t *)updated_head2_bias.buffer, 0)
let updated_head2_bias.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)updated_head2_bias.buffer, 0)
let updated_head2_bias.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)updated_head2_bias.buffer, 0)
let updated_head2_bias.min.1 = _halide_buffer_get_min((halide_buffer_t *)updated_head2_bias.buffer, 1)
let updated_head2_bias.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)updated_head2_bias.buffer, 1)
let updated_head2_bias.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)updated_head2_bias.buffer, 1)
let updated_head2_filter = (void *)_halide_buffer_get_host((halide_buffer_t *)updated_head2_filter.buffer)
let updated_head2_filter.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)updated_head2_filter.buffer)
let updated_head2_filter.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)updated_head2_filter.buffer)
let updated_head2_filter.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)updated_head2_filter.buffer)
let updated_head2_filter.min.0 = _halide_buffer_get_min((halide_buffer_t *)updated_head2_filter.buffer, 0)
let updated_head2_filter.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)updated_head2_filter.buffer, 0)
let updated_head2_filter.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)updated_head2_filter.buffer, 0)
let updated_head2_filter.min.1 = _halide_buffer_get_min((halide_buffer_t *)updated_head2_filter.buffer, 1)
let updated_head2_filter.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)updated_head2_filter.buffer, 1)
let updated_head2_filter.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)updated_head2_filter.buffer, 1)
let updated_head2_filter.min.2 = _halide_buffer_get_min((halide_buffer_t *)updated_head2_filter.buffer, 2)
let updated_head2_filter.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)updated_head2_filter.buffer, 2)
let updated_head2_filter.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)updated_head2_filter.buffer, 2)
let f7.s1.n.max.s = max(prediction_output.extent.0 + prediction_output.min.0, batch_size)
let conv1_stage2.s1.n.max.s = max(max(max(max(load_cost_output.extent.0 + load_cost_output.min.0, batch_size), store_cost_output.extent.0 + store_cost_output.min.0), compute_cost_output.extent.0 + compute_cost_output.min.0), f7.s1.n.max.s)
let conv1_stage2.s1.n.min.s = min(min(min(load_cost_output.min.0, store_cost_output.min.0), compute_cost_output.min.0), prediction_output.min.0)
let head2_relu.s0.n.max.s = max(batch_size, conv1_stage2.s1.n.max.s)
let head2_conv.s1.n.max.s = max(batch_size, head2_relu.s0.n.max.s)
let normalized_schedule_features.s0.n.max.s = max(batch_size, head2_conv.s1.n.max.s)
let filter1.extent.1.required.s = max(head1_filter.extent.0, 8) - min(head1_filter.extent.0, 0)
let prediction_output.extent.0.required = min(min(prediction_output.extent.0, 8) + (((prediction_output.extent.0 + -1)/8)*8), prediction_output.extent.0)
let schedule_features.extent.0.required = let t19998 = (max(normalized_schedule_features.s0.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)) in (let t20001 = (max(f7.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) in (max(max(max(max(max(max(min(max(normalized_schedule_features.s0.n.max.s, 1), min(min(conv1_stage2.s1.n.min.s, 0) + (((t19998 + -1)/8)*8), max(normalized_schedule_features.s0.n.max.s, 1) + -1) + min(t19998, 8)), min(max(f7.s1.n.max.s, 1), min(min(prediction_output.min.0, 0) + (((t20001 + -1)/8)*8), max(f7.s1.n.max.s, 1) + -1) + min(t20001, 8))), min(min(batch_size, 8) + (min(max(max(-8 - batch_size, batch_size + -1)/8, 0), (batch_size + -1)/8)*8), batch_size)), load_cost_output.extent.0 + load_cost_output.min.0), store_cost_output.extent.0 + store_cost_output.min.0), compute_cost_output.extent.0 + compute_cost_output.min.0), 1) - min(min(min(min(min(conv1_stage2.s1.n.min.s, prediction_output.min.0), load_cost_output.min.0), store_cost_output.min.0), compute_cost_output.min.0), 0)))
let schedule_features.min.0.required.s = min(min(min(min(conv1_stage2.s1.n.min.s, prediction_output.min.0), load_cost_output.min.0), store_cost_output.min.0), compute_cost_output.min.0)
let true_runtime.extent.0.required = let t20002.s = max(-8 - batch_size, batch_size + -1) in (let t20003 = min((max(t20002.s/8, 0)*8) + 8, batch_size) in (let t20004 = min(max(t20002.s/8, 0), (t20003 + -1)/8) in max(max(min(max(min(min((min(max(t20002.s/8, 0), t20004)*8) + 8, batch_size), min(t20003, 8) + ((((t20003 + -1)/8) + t20004)*8)) + -1, reference), batch_size + -1), 0) + 1, batch_size)))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter1.buffer) || ((0 <= head1_filter.extent.0) && ((min(head1_filter.extent.0, 0) + filter1.extent.1.required.s) <= 8)), halide_error_constraints_make_required_region_smaller("Input buffer filter1", 1, 0, 31, min(head1_filter.extent.0, 0), (min(head1_filter.extent.0, 0) + filter1.extent.1.required.s) + 23))
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)bias1.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)bias1.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)bias1.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(0, 32, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)compute_cost_output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)compute_cost_output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)compute_cost_output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(compute_cost_output.min.0, compute_cost_output.extent.0, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter1.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)filter1.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)filter1.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(0, 32, 1, 0, 0, 32, 32, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head1_bias.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)head1_bias.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)head1_bias.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(0, 8, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head1_filter.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)head1_filter.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)head1_filter.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 8, 1, 0, 0, 40, 8, 0, 0, 7, 320, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head2_bias.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)head2_bias.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)head2_bias.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(0, 24, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head2_filter.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)head2_filter.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)head2_filter.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(0, 24, 1, 0, 0, 39, 24, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)load_cost_output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)load_cost_output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)load_cost_output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(load_cost_output.min.0, load_cost_output.extent.0, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)loss_output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)loss_output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)loss_output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 0, (halide_dimension_t *)make_struct(), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pipeline_features.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)pipeline_features.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)pipeline_features.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 40, 1, 0, 0, 7, 40, 0, 0, max(num_stages, 1), 280, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)prediction_output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)prediction_output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)prediction_output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(prediction_output.min.0, prediction_output.extent.0.required, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)schedule_features.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)schedule_features.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)schedule_features.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(min(schedule_features.min.0.required.s, 0), schedule_features.extent.0.required, 1, 0, 0, 39, schedule_features.extent.0.required, 0, 0, max(num_stages, 1), schedule_features.extent.0.required*39, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)store_cost_output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)store_cost_output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)store_cost_output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(store_cost_output.min.0, store_cost_output.extent.0, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)true_runtime.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)true_runtime.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)true_runtime.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 1, (halide_dimension_t *)make_struct(0, true_runtime.extent.0.required, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_bias1.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)updated_bias1.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)updated_bias1.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(0, 32, 1, 0, 0, 4, 32, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_filter1.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)updated_filter1.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)updated_filter1.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 32, 1, 0, 0, 32, 32, 0, 0, 4, 1024, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head1_bias.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)updated_head1_bias.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)updated_head1_bias.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(0, 8, 1, 0, 0, 4, 8, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head1_filter.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)updated_head1_filter.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)updated_head1_filter.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 4, (halide_dimension_t *)make_struct(0, 8, 1, 0, 0, 40, 8, 0, 0, 7, 320, 0, 0, 4, 2240, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head2_bias.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)updated_head2_bias.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)updated_head2_bias.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(0, 24, 1, 0, 0, 4, 24, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head2_filter.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)updated_head2_filter.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)updated_head2_filter.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 24, 1, 0, 0, 39, 24, 0, 0, 4, 936, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head2_filter.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head2_bias.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head1_filter.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_head1_bias.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_filter1.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)updated_bias1.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)true_runtime.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)store_cost_output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)schedule_features.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)prediction_output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)pipeline_features.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)loss_output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)load_cost_output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head2_filter.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head2_bias.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head1_filter.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)head1_bias.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter1.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)bias1.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)compute_cost_output.buffer))))))))))))))))))))) {
 assert(bias1.type == (uint32)73730, halide_error_bad_type("Input buffer bias1", bias1.type, (uint32)73730))
 assert(bias1.dimensions == 1, halide_error_bad_dimensions("Input buffer bias1", bias1.dimensions, 1))
 assert(compute_cost_output.type == (uint32)73730, halide_error_bad_type("Output buffer compute_cost_output", compute_cost_output.type, (uint32)73730))
 assert(compute_cost_output.dimensions == 1, halide_error_bad_dimensions("Output buffer compute_cost_output", compute_cost_output.dimensions, 1))
 assert(filter1.type == (uint32)73730, halide_error_bad_type("Input buffer filter1", filter1.type, (uint32)73730))
 assert(filter1.dimensions == 2, halide_error_bad_dimensions("Input buffer filter1", filter1.dimensions, 2))
 assert(head1_bias.type == (uint32)73730, halide_error_bad_type("Input buffer head1_bias", head1_bias.type, (uint32)73730))
 assert(head1_bias.dimensions == 1, halide_error_bad_dimensions("Input buffer head1_bias", head1_bias.dimensions, 1))
 assert(head1_filter.type == (uint32)73730, halide_error_bad_type("Input buffer head1_filter", head1_filter.type, (uint32)73730))
 assert(head1_filter.dimensions == 3, halide_error_bad_dimensions("Input buffer head1_filter", head1_filter.dimensions, 3))
 assert(head2_bias.type == (uint32)73730, halide_error_bad_type("Input buffer head2_bias", head2_bias.type, (uint32)73730))
 assert(head2_bias.dimensions == 1, halide_error_bad_dimensions("Input buffer head2_bias", head2_bias.dimensions, 1))
 assert(head2_filter.type == (uint32)73730, halide_error_bad_type("Input buffer head2_filter", head2_filter.type, (uint32)73730))
 assert(head2_filter.dimensions == 2, halide_error_bad_dimensions("Input buffer head2_filter", head2_filter.dimensions, 2))
 assert(load_cost_output.type == (uint32)73730, halide_error_bad_type("Output buffer load_cost_output", load_cost_output.type, (uint32)73730))
 assert(load_cost_output.dimensions == 1, halide_error_bad_dimensions("Output buffer load_cost_output", load_cost_output.dimensions, 1))
 assert(loss_output.type == (uint32)73730, halide_error_bad_type("Output buffer loss_output", loss_output.type, (uint32)73730))
 assert(loss_output.dimensions == 0, halide_error_bad_dimensions("Output buffer loss_output", loss_output.dimensions, 0))
 assert(pipeline_features.type == (uint32)73730, halide_error_bad_type("Input buffer pipeline_features", pipeline_features.type, (uint32)73730))
 assert(pipeline_features.dimensions == 3, halide_error_bad_dimensions("Input buffer pipeline_features", pipeline_features.dimensions, 3))
 assert(prediction_output.type == (uint32)73730, halide_error_bad_type("Output buffer prediction_output", prediction_output.type, (uint32)73730))
 assert(prediction_output.dimensions == 1, halide_error_bad_dimensions("Output buffer prediction_output", prediction_output.dimensions, 1))
 assert(schedule_features.type == (uint32)73730, halide_error_bad_type("Input buffer schedule_features", schedule_features.type, (uint32)73730))
 assert(schedule_features.dimensions == 3, halide_error_bad_dimensions("Input buffer schedule_features", schedule_features.dimensions, 3))
 assert(store_cost_output.type == (uint32)73730, halide_error_bad_type("Output buffer store_cost_output", store_cost_output.type, (uint32)73730))
 assert(store_cost_output.dimensions == 1, halide_error_bad_dimensions("Output buffer store_cost_output", store_cost_output.dimensions, 1))
 assert(true_runtime.type == (uint32)73730, halide_error_bad_type("Input buffer true_runtime", true_runtime.type, (uint32)73730))
 assert(true_runtime.dimensions == 1, halide_error_bad_dimensions("Input buffer true_runtime", true_runtime.dimensions, 1))
 assert(updated_bias1.type == (uint32)73730, halide_error_bad_type("Output buffer updated_bias1", updated_bias1.type, (uint32)73730))
 assert(updated_bias1.dimensions == 2, halide_error_bad_dimensions("Output buffer updated_bias1", updated_bias1.dimensions, 2))
 assert(updated_filter1.type == (uint32)73730, halide_error_bad_type("Output buffer updated_filter1", updated_filter1.type, (uint32)73730))
 assert(updated_filter1.dimensions == 3, halide_error_bad_dimensions("Output buffer updated_filter1", updated_filter1.dimensions, 3))
 assert(updated_head1_bias.type == (uint32)73730, halide_error_bad_type("Output buffer updated_head1_bias", updated_head1_bias.type, (uint32)73730))
 assert(updated_head1_bias.dimensions == 2, halide_error_bad_dimensions("Output buffer updated_head1_bias", updated_head1_bias.dimensions, 2))
 assert(updated_head1_filter.type == (uint32)73730, halide_error_bad_type("Output buffer updated_head1_filter", updated_head1_filter.type, (uint32)73730))
 assert(updated_head1_filter.dimensions == 4, halide_error_bad_dimensions("Output buffer updated_head1_filter", updated_head1_filter.dimensions, 4))
 assert(updated_head2_bias.type == (uint32)73730, halide_error_bad_type("Output buffer updated_head2_bias", updated_head2_bias.type, (uint32)73730))
 assert(updated_head2_bias.dimensions == 2, halide_error_bad_dimensions("Output buffer updated_head2_bias", updated_head2_bias.dimensions, 2))
 assert(updated_head2_filter.type == (uint32)73730, halide_error_bad_type("Output buffer updated_head2_filter", updated_head2_filter.type, (uint32)73730))
 assert(updated_head2_filter.dimensions == 3, halide_error_bad_dimensions("Output buffer updated_head2_filter", updated_head2_filter.dimensions, 3))
 assert((bias1.min.0 <= 0) && (32 <= (bias1.extent.0 + bias1.min.0)), halide_error_access_out_of_bounds("Input buffer bias1", 0, 0, 31, bias1.min.0, (bias1.extent.0 + bias1.min.0) + -1))
 assert(0 <= bias1.extent.0, halide_error_buffer_extents_negative("Input buffer bias1", 0, bias1.extent.0))
 assert(0 <= compute_cost_output.extent.0, halide_error_buffer_extents_negative("Output buffer compute_cost_output", 0, compute_cost_output.extent.0))
 assert((filter1.min.0 <= 0) && (32 <= (filter1.extent.0 + filter1.min.0)), halide_error_access_out_of_bounds("Input buffer filter1", 0, 0, 31, filter1.min.0, (filter1.extent.0 + filter1.min.0) + -1))
 assert(0 <= filter1.extent.0, halide_error_buffer_extents_negative("Input buffer filter1", 0, filter1.extent.0))
 assert((filter1.min.1 <= min(head1_filter.extent.0, 0)) && (((min(head1_filter.extent.0, 0) + filter1.extent.1.required.s) + 24) <= (filter1.extent.1 + filter1.min.1)), halide_error_access_out_of_bounds("Input buffer filter1", 1, min(head1_filter.extent.0, 0), (min(head1_filter.extent.0, 0) + filter1.extent.1.required.s) + 23, filter1.min.1, (filter1.extent.1 + filter1.min.1) + -1))
 assert(0 <= filter1.extent.1, halide_error_buffer_extents_negative("Input buffer filter1", 1, filter1.extent.1))
 assert((head1_bias.min.0 <= 0) && (8 <= (head1_bias.extent.0 + head1_bias.min.0)), halide_error_access_out_of_bounds("Input buffer head1_bias", 0, 0, 7, head1_bias.min.0, (head1_bias.extent.0 + head1_bias.min.0) + -1))
 assert(0 <= head1_bias.extent.0, halide_error_buffer_extents_negative("Input buffer head1_bias", 0, head1_bias.extent.0))
 assert((head1_filter.min.0 <= 0) && (8 <= (head1_filter.extent.0 + head1_filter.min.0)), halide_error_access_out_of_bounds("Input buffer head1_filter", 0, 0, 7, head1_filter.min.0, (head1_filter.extent.0 + head1_filter.min.0) + -1))
 assert(0 <= head1_filter.extent.0, halide_error_buffer_extents_negative("Input buffer head1_filter", 0, head1_filter.extent.0))
 assert((head1_filter.min.1 <= 0) && (40 <= (head1_filter.extent.1 + head1_filter.min.1)), halide_error_access_out_of_bounds("Input buffer head1_filter", 1, 0, 39, head1_filter.min.1, (head1_filter.extent.1 + head1_filter.min.1) + -1))
 assert(0 <= head1_filter.extent.1, halide_error_buffer_extents_negative("Input buffer head1_filter", 1, head1_filter.extent.1))
 assert((head1_filter.min.2 <= 0) && (7 <= (head1_filter.extent.2 + head1_filter.min.2)), halide_error_access_out_of_bounds("Input buffer head1_filter", 2, 0, 6, head1_filter.min.2, (head1_filter.extent.2 + head1_filter.min.2) + -1))
 assert(0 <= head1_filter.extent.2, halide_error_buffer_extents_negative("Input buffer head1_filter", 2, head1_filter.extent.2))
 assert((head2_bias.min.0 <= 0) && (24 <= (head2_bias.extent.0 + head2_bias.min.0)), halide_error_access_out_of_bounds("Input buffer head2_bias", 0, 0, 23, head2_bias.min.0, (head2_bias.extent.0 + head2_bias.min.0) + -1))
 assert(0 <= head2_bias.extent.0, halide_error_buffer_extents_negative("Input buffer head2_bias", 0, head2_bias.extent.0))
 assert((head2_filter.min.0 <= 0) && (24 <= (head2_filter.extent.0 + head2_filter.min.0)), halide_error_access_out_of_bounds("Input buffer head2_filter", 0, 0, 23, head2_filter.min.0, (head2_filter.extent.0 + head2_filter.min.0) + -1))
 assert(0 <= head2_filter.extent.0, halide_error_buffer_extents_negative("Input buffer head2_filter", 0, head2_filter.extent.0))
 assert((head2_filter.min.1 <= 0) && (39 <= (head2_filter.extent.1 + head2_filter.min.1)), halide_error_access_out_of_bounds("Input buffer head2_filter", 1, 0, 38, head2_filter.min.1, (head2_filter.extent.1 + head2_filter.min.1) + -1))
 assert(0 <= head2_filter.extent.1, halide_error_buffer_extents_negative("Input buffer head2_filter", 1, head2_filter.extent.1))
 assert(0 <= load_cost_output.extent.0, halide_error_buffer_extents_negative("Output buffer load_cost_output", 0, load_cost_output.extent.0))
 assert((pipeline_features.min.0 <= 0) && (40 <= (pipeline_features.extent.0 + pipeline_features.min.0)), halide_error_access_out_of_bounds("Input buffer pipeline_features", 0, 0, 39, pipeline_features.min.0, (pipeline_features.extent.0 + pipeline_features.min.0) + -1))
 assert(0 <= pipeline_features.extent.0, halide_error_buffer_extents_negative("Input buffer pipeline_features", 0, pipeline_features.extent.0))
 assert((pipeline_features.min.1 <= 0) && (7 <= (pipeline_features.extent.1 + pipeline_features.min.1)), halide_error_access_out_of_bounds("Input buffer pipeline_features", 1, 0, 6, pipeline_features.min.1, (pipeline_features.extent.1 + pipeline_features.min.1) + -1))
 assert(0 <= pipeline_features.extent.1, halide_error_buffer_extents_negative("Input buffer pipeline_features", 1, pipeline_features.extent.1))
 assert((pipeline_features.min.2 <= 0) && (max(num_stages, 1) <= (pipeline_features.extent.2 + pipeline_features.min.2)), halide_error_access_out_of_bounds("Input buffer pipeline_features", 2, 0, max(num_stages, 1) + -1, pipeline_features.min.2, (pipeline_features.extent.2 + pipeline_features.min.2) + -1))
 assert(0 <= pipeline_features.extent.2, halide_error_buffer_extents_negative("Input buffer pipeline_features", 2, pipeline_features.extent.2))
 assert(prediction_output.extent.0.required <= prediction_output.extent.0, halide_error_access_out_of_bounds("Output buffer prediction_output", 0, prediction_output.min.0, (prediction_output.extent.0.required + prediction_output.min.0) + -1, prediction_output.min.0, (prediction_output.extent.0 + prediction_output.min.0) + -1))
 assert(0 <= prediction_output.extent.0, halide_error_buffer_extents_negative("Output buffer prediction_output", 0, prediction_output.extent.0))
 assert((schedule_features.min.0 <= min(schedule_features.min.0.required.s, 0)) && ((min(schedule_features.min.0.required.s, 0) + schedule_features.extent.0.required) <= (schedule_features.extent.0 + schedule_features.min.0)), halide_error_access_out_of_bounds("Input buffer schedule_features", 0, min(schedule_features.min.0.required.s, 0), (min(schedule_features.min.0.required.s, 0) + schedule_features.extent.0.required) + -1, schedule_features.min.0, (schedule_features.extent.0 + schedule_features.min.0) + -1))
 assert(0 <= schedule_features.extent.0, halide_error_buffer_extents_negative("Input buffer schedule_features", 0, schedule_features.extent.0))
 assert((schedule_features.min.1 <= 0) && (39 <= (schedule_features.extent.1 + schedule_features.min.1)), halide_error_access_out_of_bounds("Input buffer schedule_features", 1, 0, 38, schedule_features.min.1, (schedule_features.extent.1 + schedule_features.min.1) + -1))
 assert(0 <= schedule_features.extent.1, halide_error_buffer_extents_negative("Input buffer schedule_features", 1, schedule_features.extent.1))
 assert((schedule_features.min.2 <= 0) && (max(num_stages, 1) <= (schedule_features.extent.2 + schedule_features.min.2)), halide_error_access_out_of_bounds("Input buffer schedule_features", 2, 0, max(num_stages, 1) + -1, schedule_features.min.2, (schedule_features.extent.2 + schedule_features.min.2) + -1))
 assert(0 <= schedule_features.extent.2, halide_error_buffer_extents_negative("Input buffer schedule_features", 2, schedule_features.extent.2))
 assert(0 <= store_cost_output.extent.0, halide_error_buffer_extents_negative("Output buffer store_cost_output", 0, store_cost_output.extent.0))
 assert((true_runtime.min.0 <= 0) && (true_runtime.extent.0.required <= (true_runtime.extent.0 + true_runtime.min.0)), halide_error_access_out_of_bounds("Input buffer true_runtime", 0, 0, true_runtime.extent.0.required + -1, true_runtime.min.0, (true_runtime.extent.0 + true_runtime.min.0) + -1))
 assert(0 <= true_runtime.extent.0, halide_error_buffer_extents_negative("Input buffer true_runtime", 0, true_runtime.extent.0))
 assert((updated_bias1.min.0 <= 0) && (32 <= (updated_bias1.extent.0 + updated_bias1.min.0)), halide_error_access_out_of_bounds("Output buffer updated_bias1", 0, 0, 31, updated_bias1.min.0, (updated_bias1.extent.0 + updated_bias1.min.0) + -1))
 assert(0 <= updated_bias1.extent.0, halide_error_buffer_extents_negative("Output buffer updated_bias1", 0, updated_bias1.extent.0))
 assert((updated_bias1.min.1 <= 0) && (4 <= (updated_bias1.extent.1 + updated_bias1.min.1)), halide_error_access_out_of_bounds("Output buffer updated_bias1", 1, 0, 3, updated_bias1.min.1, (updated_bias1.extent.1 + updated_bias1.min.1) + -1))
 assert(0 <= updated_bias1.extent.1, halide_error_buffer_extents_negative("Output buffer updated_bias1", 1, updated_bias1.extent.1))
 assert((updated_filter1.min.0 <= 0) && (32 <= (updated_filter1.extent.0 + updated_filter1.min.0)), halide_error_access_out_of_bounds("Output buffer updated_filter1", 0, 0, 31, updated_filter1.min.0, (updated_filter1.extent.0 + updated_filter1.min.0) + -1))
 assert(0 <= updated_filter1.extent.0, halide_error_buffer_extents_negative("Output buffer updated_filter1", 0, updated_filter1.extent.0))
 assert((updated_filter1.min.1 <= 0) && (32 <= (updated_filter1.extent.1 + updated_filter1.min.1)), halide_error_access_out_of_bounds("Output buffer updated_filter1", 1, 0, 31, updated_filter1.min.1, (updated_filter1.extent.1 + updated_filter1.min.1) + -1))
 assert(0 <= updated_filter1.extent.1, halide_error_buffer_extents_negative("Output buffer updated_filter1", 1, updated_filter1.extent.1))
 assert((updated_filter1.min.2 <= 0) && (4 <= (updated_filter1.extent.2 + updated_filter1.min.2)), halide_error_access_out_of_bounds("Output buffer updated_filter1", 2, 0, 3, updated_filter1.min.2, (updated_filter1.extent.2 + updated_filter1.min.2) + -1))
 assert(0 <= updated_filter1.extent.2, halide_error_buffer_extents_negative("Output buffer updated_filter1", 2, updated_filter1.extent.2))
 assert((updated_head1_bias.min.0 <= 0) && (8 <= (updated_head1_bias.extent.0 + updated_head1_bias.min.0)), halide_error_access_out_of_bounds("Output buffer updated_head1_bias", 0, 0, 7, updated_head1_bias.min.0, (updated_head1_bias.extent.0 + updated_head1_bias.min.0) + -1))
 assert(0 <= updated_head1_bias.extent.0, halide_error_buffer_extents_negative("Output buffer updated_head1_bias", 0, updated_head1_bias.extent.0))
 assert((updated_head1_bias.min.1 <= 0) && (4 <= (updated_head1_bias.extent.1 + updated_head1_bias.min.1)), halide_error_access_out_of_bounds("Output buffer updated_head1_bias", 1, 0, 3, updated_head1_bias.min.1, (updated_head1_bias.extent.1 + updated_head1_bias.min.1) + -1))
 assert(0 <= updated_head1_bias.extent.1, halide_error_buffer_extents_negative("Output buffer updated_head1_bias", 1, updated_head1_bias.extent.1))
 assert((updated_head1_filter.min.0 <= 0) && (8 <= (updated_head1_filter.extent.0 + updated_head1_filter.min.0)), halide_error_access_out_of_bounds("Output buffer updated_head1_filter", 0, 0, 7, updated_head1_filter.min.0, (updated_head1_filter.extent.0 + updated_head1_filter.min.0) + -1))
 assert(0 <= updated_head1_filter.extent.0, halide_error_buffer_extents_negative("Output buffer updated_head1_filter", 0, updated_head1_filter.extent.0))
 assert((updated_head1_filter.min.1 <= 0) && (40 <= (updated_head1_filter.extent.1 + updated_head1_filter.min.1)), halide_error_access_out_of_bounds("Output buffer updated_head1_filter", 1, 0, 39, updated_head1_filter.min.1, (updated_head1_filter.extent.1 + updated_head1_filter.min.1) + -1))
 assert(0 <= updated_head1_filter.extent.1, halide_error_buffer_extents_negative("Output buffer updated_head1_filter", 1, updated_head1_filter.extent.1))
 assert((updated_head1_filter.min.2 <= 0) && (7 <= (updated_head1_filter.extent.2 + updated_head1_filter.min.2)), halide_error_access_out_of_bounds("Output buffer updated_head1_filter", 2, 0, 6, updated_head1_filter.min.2, (updated_head1_filter.extent.2 + updated_head1_filter.min.2) + -1))
 assert(0 <= updated_head1_filter.extent.2, halide_error_buffer_extents_negative("Output buffer updated_head1_filter", 2, updated_head1_filter.extent.2))
 assert((updated_head1_filter.min.3 <= 0) && (4 <= (updated_head1_filter.extent.3 + updated_head1_filter.min.3)), halide_error_access_out_of_bounds("Output buffer updated_head1_filter", 3, 0, 3, updated_head1_filter.min.3, (updated_head1_filter.extent.3 + updated_head1_filter.min.3) + -1))
 assert(0 <= updated_head1_filter.extent.3, halide_error_buffer_extents_negative("Output buffer updated_head1_filter", 3, updated_head1_filter.extent.3))
 assert((updated_head2_bias.min.0 <= 0) && (24 <= (updated_head2_bias.extent.0 + updated_head2_bias.min.0)), halide_error_access_out_of_bounds("Output buffer updated_head2_bias", 0, 0, 23, updated_head2_bias.min.0, (updated_head2_bias.extent.0 + updated_head2_bias.min.0) + -1))
 assert(0 <= updated_head2_bias.extent.0, halide_error_buffer_extents_negative("Output buffer updated_head2_bias", 0, updated_head2_bias.extent.0))
 assert((updated_head2_bias.min.1 <= 0) && (4 <= (updated_head2_bias.extent.1 + updated_head2_bias.min.1)), halide_error_access_out_of_bounds("Output buffer updated_head2_bias", 1, 0, 3, updated_head2_bias.min.1, (updated_head2_bias.extent.1 + updated_head2_bias.min.1) + -1))
 assert(0 <= updated_head2_bias.extent.1, halide_error_buffer_extents_negative("Output buffer updated_head2_bias", 1, updated_head2_bias.extent.1))
 assert((updated_head2_filter.min.0 <= 0) && (24 <= (updated_head2_filter.extent.0 + updated_head2_filter.min.0)), halide_error_access_out_of_bounds("Output buffer updated_head2_filter", 0, 0, 23, updated_head2_filter.min.0, (updated_head2_filter.extent.0 + updated_head2_filter.min.0) + -1))
 assert(0 <= updated_head2_filter.extent.0, halide_error_buffer_extents_negative("Output buffer updated_head2_filter", 0, updated_head2_filter.extent.0))
 assert((updated_head2_filter.min.1 <= 0) && (39 <= (updated_head2_filter.extent.1 + updated_head2_filter.min.1)), halide_error_access_out_of_bounds("Output buffer updated_head2_filter", 1, 0, 38, updated_head2_filter.min.1, (updated_head2_filter.extent.1 + updated_head2_filter.min.1) + -1))
 assert(0 <= updated_head2_filter.extent.1, halide_error_buffer_extents_negative("Output buffer updated_head2_filter", 1, updated_head2_filter.extent.1))
 assert((updated_head2_filter.min.2 <= 0) && (4 <= (updated_head2_filter.extent.2 + updated_head2_filter.min.2)), halide_error_access_out_of_bounds("Output buffer updated_head2_filter", 2, 0, 3, updated_head2_filter.min.2, (updated_head2_filter.extent.2 + updated_head2_filter.min.2) + -1))
 assert(0 <= updated_head2_filter.extent.2, halide_error_buffer_extents_negative("Output buffer updated_head2_filter", 2, updated_head2_filter.extent.2))
 assert(bias1.stride.0 == 1, halide_error_constraint_violated("bias1.stride.0", bias1.stride.0, "1", 1))
 assert(bias1.min.0 == 0, halide_error_constraint_violated("bias1.min.0", bias1.min.0, "0", 0))
 assert(bias1.extent.0 == 32, halide_error_constraint_violated("bias1.extent.0", bias1.extent.0, "32", 32))
 assert(compute_cost_output.stride.0 == 1, halide_error_constraint_violated("compute_cost_output.stride.0", compute_cost_output.stride.0, "1", 1))
 assert(filter1.stride.0 == 1, halide_error_constraint_violated("filter1.stride.0", filter1.stride.0, "1", 1))
 assert(filter1.min.0 == 0, halide_error_constraint_violated("filter1.min.0", filter1.min.0, "0", 0))
 assert(filter1.extent.0 == 32, halide_error_constraint_violated("filter1.extent.0", filter1.extent.0, "32", 32))
 assert(filter1.min.1 == 0, halide_error_constraint_violated("filter1.min.1", filter1.min.1, "0", 0))
 assert(filter1.extent.1 == 32, halide_error_constraint_violated("filter1.extent.1", filter1.extent.1, "32", 32))
 assert(head1_bias.stride.0 == 1, halide_error_constraint_violated("head1_bias.stride.0", head1_bias.stride.0, "1", 1))
 assert(head1_bias.min.0 == 0, halide_error_constraint_violated("head1_bias.min.0", head1_bias.min.0, "0", 0))
 assert(head1_bias.extent.0 == 8, halide_error_constraint_violated("head1_bias.extent.0", head1_bias.extent.0, "8", 8))
 assert(head1_filter.stride.0 == 1, halide_error_constraint_violated("head1_filter.stride.0", head1_filter.stride.0, "1", 1))
 assert(head1_filter.min.0 == 0, halide_error_constraint_violated("head1_filter.min.0", head1_filter.min.0, "0", 0))
 assert(head1_filter.extent.0 == 8, halide_error_constraint_violated("head1_filter.extent.0", head1_filter.extent.0, "8", 8))
 assert(head1_filter.min.1 == 0, halide_error_constraint_violated("head1_filter.min.1", head1_filter.min.1, "0", 0))
 assert(head1_filter.extent.1 == 40, halide_error_constraint_violated("head1_filter.extent.1", head1_filter.extent.1, "40", 40))
 assert(head1_filter.min.2 == 0, halide_error_constraint_violated("head1_filter.min.2", head1_filter.min.2, "0", 0))
 assert(head1_filter.extent.2 == 7, halide_error_constraint_violated("head1_filter.extent.2", head1_filter.extent.2, "7", 7))
 assert(head2_bias.stride.0 == 1, halide_error_constraint_violated("head2_bias.stride.0", head2_bias.stride.0, "1", 1))
 assert(head2_bias.min.0 == 0, halide_error_constraint_violated("head2_bias.min.0", head2_bias.min.0, "0", 0))
 assert(head2_bias.extent.0 == 24, halide_error_constraint_violated("head2_bias.extent.0", head2_bias.extent.0, "24", 24))
 assert(head2_filter.stride.0 == 1, halide_error_constraint_violated("head2_filter.stride.0", head2_filter.stride.0, "1", 1))
 assert(head2_filter.min.0 == 0, halide_error_constraint_violated("head2_filter.min.0", head2_filter.min.0, "0", 0))
 assert(head2_filter.extent.0 == 24, halide_error_constraint_violated("head2_filter.extent.0", head2_filter.extent.0, "24", 24))
 assert(head2_filter.min.1 == 0, halide_error_constraint_violated("head2_filter.min.1", head2_filter.min.1, "0", 0))
 assert(head2_filter.extent.1 == 39, halide_error_constraint_violated("head2_filter.extent.1", head2_filter.extent.1, "39", 39))
 assert(load_cost_output.stride.0 == 1, halide_error_constraint_violated("load_cost_output.stride.0", load_cost_output.stride.0, "1", 1))
 assert(pipeline_features.stride.0 == 1, halide_error_constraint_violated("pipeline_features.stride.0", pipeline_features.stride.0, "1", 1))
 assert(prediction_output.stride.0 == 1, halide_error_constraint_violated("prediction_output.stride.0", prediction_output.stride.0, "1", 1))
 assert(schedule_features.stride.0 == 1, halide_error_constraint_violated("schedule_features.stride.0", schedule_features.stride.0, "1", 1))
 assert(store_cost_output.stride.0 == 1, halide_error_constraint_violated("store_cost_output.stride.0", store_cost_output.stride.0, "1", 1))
 assert(true_runtime.stride.0 == 1, halide_error_constraint_violated("true_runtime.stride.0", true_runtime.stride.0, "1", 1))
 assert(updated_bias1.stride.0 == 1, halide_error_constraint_violated("updated_bias1.stride.0", updated_bias1.stride.0, "1", 1))
 assert(updated_bias1.min.0 == 0, halide_error_constraint_violated("updated_bias1.min.0", updated_bias1.min.0, "0", 0))
 assert(updated_bias1.extent.0 == 32, halide_error_constraint_violated("updated_bias1.extent.0", updated_bias1.extent.0, "32", 32))
 assert(updated_bias1.min.1 == 0, halide_error_constraint_violated("updated_bias1.min.1", updated_bias1.min.1, "0", 0))
 assert(updated_bias1.extent.1 == 4, halide_error_constraint_violated("updated_bias1.extent.1", updated_bias1.extent.1, "4", 4))
 assert(updated_filter1.stride.0 == 1, halide_error_constraint_violated("updated_filter1.stride.0", updated_filter1.stride.0, "1", 1))
 assert(updated_filter1.min.0 == 0, halide_error_constraint_violated("updated_filter1.min.0", updated_filter1.min.0, "0", 0))
 assert(updated_filter1.extent.0 == 32, halide_error_constraint_violated("updated_filter1.extent.0", updated_filter1.extent.0, "32", 32))
 assert(updated_filter1.min.1 == 0, halide_error_constraint_violated("updated_filter1.min.1", updated_filter1.min.1, "0", 0))
 assert(updated_filter1.extent.1 == 32, halide_error_constraint_violated("updated_filter1.extent.1", updated_filter1.extent.1, "32", 32))
 assert(updated_filter1.min.2 == 0, halide_error_constraint_violated("updated_filter1.min.2", updated_filter1.min.2, "0", 0))
 assert(updated_filter1.extent.2 == 4, halide_error_constraint_violated("updated_filter1.extent.2", updated_filter1.extent.2, "4", 4))
 assert(updated_head1_bias.stride.0 == 1, halide_error_constraint_violated("updated_head1_bias.stride.0", updated_head1_bias.stride.0, "1", 1))
 assert(updated_head1_bias.min.0 == 0, halide_error_constraint_violated("updated_head1_bias.min.0", updated_head1_bias.min.0, "0", 0))
 assert(updated_head1_bias.extent.0 == 8, halide_error_constraint_violated("updated_head1_bias.extent.0", updated_head1_bias.extent.0, "8", 8))
 assert(updated_head1_bias.min.1 == 0, halide_error_constraint_violated("updated_head1_bias.min.1", updated_head1_bias.min.1, "0", 0))
 assert(updated_head1_bias.extent.1 == 4, halide_error_constraint_violated("updated_head1_bias.extent.1", updated_head1_bias.extent.1, "4", 4))
 assert(updated_head1_filter.stride.0 == 1, halide_error_constraint_violated("updated_head1_filter.stride.0", updated_head1_filter.stride.0, "1", 1))
 assert(updated_head1_filter.min.0 == 0, halide_error_constraint_violated("updated_head1_filter.min.0", updated_head1_filter.min.0, "0", 0))
 assert(updated_head1_filter.extent.0 == 8, halide_error_constraint_violated("updated_head1_filter.extent.0", updated_head1_filter.extent.0, "8", 8))
 assert(updated_head1_filter.min.1 == 0, halide_error_constraint_violated("updated_head1_filter.min.1", updated_head1_filter.min.1, "0", 0))
 assert(updated_head1_filter.extent.1 == 40, halide_error_constraint_violated("updated_head1_filter.extent.1", updated_head1_filter.extent.1, "40", 40))
 assert(updated_head1_filter.min.2 == 0, halide_error_constraint_violated("updated_head1_filter.min.2", updated_head1_filter.min.2, "0", 0))
 assert(updated_head1_filter.extent.2 == 7, halide_error_constraint_violated("updated_head1_filter.extent.2", updated_head1_filter.extent.2, "7", 7))
 assert(updated_head1_filter.min.3 == 0, halide_error_constraint_violated("updated_head1_filter.min.3", updated_head1_filter.min.3, "0", 0))
 assert(updated_head1_filter.extent.3 == 4, halide_error_constraint_violated("updated_head1_filter.extent.3", updated_head1_filter.extent.3, "4", 4))
 assert(updated_head2_bias.stride.0 == 1, halide_error_constraint_violated("updated_head2_bias.stride.0", updated_head2_bias.stride.0, "1", 1))
 assert(updated_head2_bias.min.0 == 0, halide_error_constraint_violated("updated_head2_bias.min.0", updated_head2_bias.min.0, "0", 0))
 assert(updated_head2_bias.extent.0 == 24, halide_error_constraint_violated("updated_head2_bias.extent.0", updated_head2_bias.extent.0, "24", 24))
 assert(updated_head2_bias.min.1 == 0, halide_error_constraint_violated("updated_head2_bias.min.1", updated_head2_bias.min.1, "0", 0))
 assert(updated_head2_bias.extent.1 == 4, halide_error_constraint_violated("updated_head2_bias.extent.1", updated_head2_bias.extent.1, "4", 4))
 assert(updated_head2_filter.stride.0 == 1, halide_error_constraint_violated("updated_head2_filter.stride.0", updated_head2_filter.stride.0, "1", 1))
 assert(updated_head2_filter.min.0 == 0, halide_error_constraint_violated("updated_head2_filter.min.0", updated_head2_filter.min.0, "0", 0))
 assert(updated_head2_filter.extent.0 == 24, halide_error_constraint_violated("updated_head2_filter.extent.0", updated_head2_filter.extent.0, "24", 24))
 assert(updated_head2_filter.min.1 == 0, halide_error_constraint_violated("updated_head2_filter.min.1", updated_head2_filter.min.1, "0", 0))
 assert(updated_head2_filter.extent.1 == 39, halide_error_constraint_violated("updated_head2_filter.extent.1", updated_head2_filter.extent.1, "39", 39))
 assert(updated_head2_filter.min.2 == 0, halide_error_constraint_violated("updated_head2_filter.min.2", updated_head2_filter.min.2, "0", 0))
 assert(updated_head2_filter.extent.2 == 4, halide_error_constraint_violated("updated_head2_filter.extent.2", updated_head2_filter.extent.2, "4", 4))
 let pipeline_features.total_extent.1 = int64(pipeline_features.extent.1)*int64(pipeline_features.extent.0)
 let pipeline_features.total_extent.2 = pipeline_features.total_extent.1*int64(pipeline_features.extent.2)
 let schedule_features.total_extent.1 = int64(schedule_features.extent.1)*int64(schedule_features.extent.0)
 let schedule_features.total_extent.2 = schedule_features.total_extent.1*int64(schedule_features.extent.2)
 assert((uint64)abs(int64(compute_cost_output.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("compute_cost_output", (uint64)abs(int64(compute_cost_output.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(filter1.stride.1)*(int64)32) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("filter1", (uint64)abs(int64(filter1.stride.1)*(int64)32), (uint64)2147483647))
 assert((uint64)abs(int64(head1_filter.stride.1)*(int64)40) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("head1_filter", (uint64)abs(int64(head1_filter.stride.1)*(int64)40), (uint64)2147483647))
 assert((uint64)abs(int64(head1_filter.stride.2)*(int64)7) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("head1_filter", (uint64)abs(int64(head1_filter.stride.2)*(int64)7), (uint64)2147483647))
 assert((uint64)abs(int64(head2_filter.stride.1)*(int64)39) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("head2_filter", (uint64)abs(int64(head2_filter.stride.1)*(int64)39), (uint64)2147483647))
 assert((uint64)abs(int64(load_cost_output.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("load_cost_output", (uint64)abs(int64(load_cost_output.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(pipeline_features.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pipeline_features", (uint64)abs(int64(pipeline_features.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(pipeline_features.extent.1)*int64(pipeline_features.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pipeline_features", (uint64)abs(int64(pipeline_features.extent.1)*int64(pipeline_features.stride.1)), (uint64)2147483647))
 assert(pipeline_features.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("pipeline_features", pipeline_features.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(pipeline_features.extent.2)*int64(pipeline_features.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("pipeline_features", (uint64)abs(int64(pipeline_features.extent.2)*int64(pipeline_features.stride.2)), (uint64)2147483647))
 assert(pipeline_features.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("pipeline_features", pipeline_features.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(prediction_output.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("prediction_output", (uint64)abs(int64(prediction_output.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(schedule_features.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("schedule_features", (uint64)abs(int64(schedule_features.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(schedule_features.extent.1)*int64(schedule_features.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("schedule_features", (uint64)abs(int64(schedule_features.extent.1)*int64(schedule_features.stride.1)), (uint64)2147483647))
 assert(schedule_features.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("schedule_features", schedule_features.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(schedule_features.extent.2)*int64(schedule_features.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("schedule_features", (uint64)abs(int64(schedule_features.extent.2)*int64(schedule_features.stride.2)), (uint64)2147483647))
 assert(schedule_features.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("schedule_features", schedule_features.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(store_cost_output.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("store_cost_output", (uint64)abs(int64(store_cost_output.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(true_runtime.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("true_runtime", (uint64)abs(int64(true_runtime.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(updated_bias1.stride.1)*(int64)4) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_bias1", (uint64)abs(int64(updated_bias1.stride.1)*(int64)4), (uint64)2147483647))
 assert((uint64)abs(int64(updated_filter1.stride.1)*(int64)32) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_filter1", (uint64)abs(int64(updated_filter1.stride.1)*(int64)32), (uint64)2147483647))
 assert((uint64)abs(int64(updated_filter1.stride.2)*(int64)4) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_filter1", (uint64)abs(int64(updated_filter1.stride.2)*(int64)4), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head1_bias.stride.1)*(int64)4) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head1_bias", (uint64)abs(int64(updated_head1_bias.stride.1)*(int64)4), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head1_filter.stride.1)*(int64)40) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head1_filter", (uint64)abs(int64(updated_head1_filter.stride.1)*(int64)40), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head1_filter.stride.2)*(int64)7) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head1_filter", (uint64)abs(int64(updated_head1_filter.stride.2)*(int64)7), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head1_filter.stride.3)*(int64)4) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head1_filter", (uint64)abs(int64(updated_head1_filter.stride.3)*(int64)4), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head2_bias.stride.1)*(int64)4) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head2_bias", (uint64)abs(int64(updated_head2_bias.stride.1)*(int64)4), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head2_filter.stride.1)*(int64)39) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head2_filter", (uint64)abs(int64(updated_head2_filter.stride.1)*(int64)39), (uint64)2147483647))
 assert((uint64)abs(int64(updated_head2_filter.stride.2)*(int64)4) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("updated_head2_filter", (uint64)abs(int64(updated_head2_filter.stride.2)*(int64)4), (uint64)2147483647))
 assert(!bias1.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer bias1"))
 assert(!compute_cost_output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer compute_cost_output"))
 assert(!filter1.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer filter1"))
 assert(!head1_bias.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer head1_bias"))
 assert(!head1_filter.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer head1_filter"))
 assert(!head2_bias.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer head2_bias"))
 assert(!head2_filter.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer head2_filter"))
 assert(!load_cost_output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer load_cost_output"))
 assert(!loss_output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer loss_output"))
 assert(!pipeline_features.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer pipeline_features"))
 assert(!prediction_output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer prediction_output"))
 assert(!schedule_features.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer schedule_features"))
 assert(!store_cost_output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer store_cost_output"))
 assert(!true_runtime.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer true_runtime"))
 assert(!updated_bias1.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer updated_bias1"))
 assert(!updated_filter1.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer updated_filter1"))
 assert(!updated_head1_bias.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer updated_head1_bias"))
 assert(!updated_head1_filter.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer updated_head1_filter"))
 assert(!updated_head2_bias.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer updated_head2_bias"))
 assert(!updated_head2_filter.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer updated_head2_filter"))
 assert((void *)reinterpret((uint64)0) != bias1, halide_error_host_is_null("Input buffer bias1"))
 assert((void *)reinterpret((uint64)0) != compute_cost_output, halide_error_host_is_null("Output buffer compute_cost_output"))
 assert((void *)reinterpret((uint64)0) != filter1, halide_error_host_is_null("Input buffer filter1"))
 assert((void *)reinterpret((uint64)0) != head1_bias, halide_error_host_is_null("Input buffer head1_bias"))
 assert((void *)reinterpret((uint64)0) != head1_filter, halide_error_host_is_null("Input buffer head1_filter"))
 assert((void *)reinterpret((uint64)0) != head2_bias, halide_error_host_is_null("Input buffer head2_bias"))
 assert((void *)reinterpret((uint64)0) != head2_filter, halide_error_host_is_null("Input buffer head2_filter"))
 assert((void *)reinterpret((uint64)0) != load_cost_output, halide_error_host_is_null("Output buffer load_cost_output"))
 assert((void *)reinterpret((uint64)0) != loss_output, halide_error_host_is_null("Output buffer loss_output"))
 assert((void *)reinterpret((uint64)0) != pipeline_features, halide_error_host_is_null("Input buffer pipeline_features"))
 assert((void *)reinterpret((uint64)0) != prediction_output, halide_error_host_is_null("Output buffer prediction_output"))
 assert((void *)reinterpret((uint64)0) != schedule_features, halide_error_host_is_null("Input buffer schedule_features"))
 assert((void *)reinterpret((uint64)0) != store_cost_output, halide_error_host_is_null("Output buffer store_cost_output"))
 assert((void *)reinterpret((uint64)0) != true_runtime, halide_error_host_is_null("Input buffer true_runtime"))
 assert((void *)reinterpret((uint64)0) != updated_bias1, halide_error_host_is_null("Output buffer updated_bias1"))
 assert((void *)reinterpret((uint64)0) != updated_filter1, halide_error_host_is_null("Output buffer updated_filter1"))
 assert((void *)reinterpret((uint64)0) != updated_head1_bias, halide_error_host_is_null("Output buffer updated_head1_bias"))
 assert((void *)reinterpret((uint64)0) != updated_head1_filter, halide_error_host_is_null("Output buffer updated_head1_filter"))
 assert((void *)reinterpret((uint64)0) != updated_head2_bias, halide_error_host_is_null("Output buffer updated_head2_bias"))
 assert((void *)reinterpret((uint64)0) != updated_head2_filter, halide_error_host_is_null("Output buffer updated_head2_filter"))
 allocate squashed_head1_filter[float32 * 8 * 40 * 7]
 produce squashed_head1_filter {
  parallel (squashed_head1_filter.s0.s.s.s, 0, 16) {
   if (squashed_head1_filter.s0.s.s.s < 12) {
    let t20202 = (squashed_head1_filter.s0.s.s.s/4)*2
    let t20203 = squashed_head1_filter.s0.s.s.s % 4
    for (squashed_head1_filter.s0.n.ni, 0, 2) {
     let t20205 = t20203*10
     let t20204 = squashed_head1_filter.s0.n.ni + t20202
     for (squashed_head1_filter.s0.s.si, 0, 10) {
      squashed_head1_filter[ramp((((t20204*40) + t20205) + squashed_head1_filter.s0.s.si)*8, 1, 8) aligned(8, 0)] = x8(1.000000f)/((float32x8)exp_f32(x8(0.000000f) - head1_filter[ramp((head1_filter.stride.2*t20204) + ((squashed_head1_filter.s0.s.si + t20205)*head1_filter.stride.1), 1, 8)]) + x8(1.000000f))
     }
    }
   } else {
    let t20206 = (squashed_head1_filter.s0.s.s.s % 4)*10
    let t20207 = head1_filter.stride.2*6
    for (squashed_head1_filter.s0.s.si, 0, 10) {
     let t20012 = squashed_head1_filter.s0.s.si + t20206
     squashed_head1_filter[ramp((t20012*8) + 1920, 1, 8) aligned(8, 0)] = x8(1.000000f)/((float32x8)exp_f32(x8(0.000000f) - head1_filter[ramp((head1_filter.stride.1*t20012) + t20207, 1, 8)]) + x8(1.000000f))
    }
   }
  }
 }
 allocate head1_conv[float32 * 8 * max(num_stages, 1)]
 produce head1_conv {
  let t20208 = max(num_stages, 1)
  parallel (head1_conv.s0.w, 0, t20208) {
   head1_conv[ramp(head1_conv.s0.w*8, 1, 8) aligned(8, 0)] = head1_bias[ramp(0, 1, 8)]
  }
  consume squashed_head1_filter {
   let t20209 = max(num_stages, 1)
   let t20210 = ((pipeline_features.min.2*pipeline_features.stride.2) + (pipeline_features.min.1*pipeline_features.stride.1)) + pipeline_features.min.0
   parallel (head1_conv.s1.w, 0, t20209) {
    let t20211 = head1_conv.s1.w*8
    let t20212 = (head1_conv.s1.w*pipeline_features.stride.2) - t20210
    for (head1_conv.s1.r31$y, 0, 7) {
     let t20213 = head1_conv.s1.r31$y*40
     let t20214 = (head1_conv.s1.r31$y*pipeline_features.stride.1) + t20212
     for (head1_conv.s1.r31$x, 0, 40) {
      allocate squashed_head1_filter_broadcast[float32 * 8] in Stack
      produce squashed_head1_filter_broadcast {
       squashed_head1_filter_broadcast[ramp(0, 1, 8)] = squashed_head1_filter[ramp((head1_conv.s1.r31$x + t20213)*8, 1, 8) aligned(8, 0)]
      }
      consume squashed_head1_filter_broadcast {
       head1_conv[ramp(t20211, 1, 8) aligned(8, 0)] = head1_conv[ramp(t20211, 1, 8) aligned(8, 0)] + (squashed_head1_filter_broadcast[ramp(0, 1, 8)]*x8(pipeline_features[head1_conv.s1.r31$x + t20214]))
      }
      free squashed_head1_filter_broadcast
     }
    }
   }
  }
  free squashed_head1_filter
 }
 let normalized_schedule_features.s.extent_realized = let t20013 = (max(head2_conv.s1.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)) in max(max(min(max(min(num_stages, 2), 1) + ((min((((((t20013 + 39)/40)*((max(num_stages, 1) + 1)/2))*2) + -1)/((t20013 + 39)/40), (((max(num_stages, 1) + 1)/2)*2) + -1)/2)*2), 1), num_stages), min(max(num_stages, 1), max(min(num_stages, 7), 1) + (((max(num_stages, 1) + -1)/7)*7)))
 let normalized_schedule_features.n.extent_realized = let t20017 = (max(head2_conv.s1.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)) in (let t20019 = (max(normalized_schedule_features.s0.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)) in (max(max(min(max(head2_conv.s1.n.max.s, 1), (min((t20017 + -1)/8, 4)*8) + (min(min(conv1_stage2.s1.n.min.s, 0) + (((t20017 + -1)/40)*40), max(head2_conv.s1.n.max.s, 1) + -1) + min(t20017, 8))), batch_size), min(max(normalized_schedule_features.s0.n.max.s, 1), min(min(conv1_stage2.s1.n.min.s, 0) + (((t20019 + -1)/8)*8), max(normalized_schedule_features.s0.n.max.s, 1) + -1) + min(t20019, 8))) - min(conv1_stage2.s1.n.min.s, 0)))
 allocate normalized_schedule_features[float32 * normalized_schedule_features.n.extent_realized * 39 * normalized_schedule_features.s.extent_realized]
 let normalized_schedule_features.s0.n.n.loop_extent.s = max(normalized_schedule_features.s0.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)
 produce normalized_schedule_features {
  let t20223 = max(num_stages, 1)
  let t20224 = min(conv1_stage2.s1.n.min.s, 0)
  let t20225 = max(normalized_schedule_features.s0.n.max.s, 1)
  let t20226 = t20225 - t20224
  let t20217 = min(normalized_schedule_features.s0.n.n.loop_extent.s + 7, t20226)
  let t20220 = min(normalized_schedule_features.s0.n.n.loop_extent.s, t20226)
  let t20216 = (t20223/7)*8
  let t20215 = ((t20223 + 6)/7)*8
  let t20219 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
  parallel (normalized_schedule_features.s0.c.c.c, 0, t20215) {
   if (normalized_schedule_features.s0.c.c.c < t20216) {
    let t20232 = (normalized_schedule_features.s0.c.c.c % 8)*5
    let t20233 = t20217/8
    let t20229 = (normalized_schedule_features.s0.c.c.c/8)*7
    let t20231 = ((t20220 + 7)/8) - t20233
    let t20227 = 39 - max(t20232, 34)
    for (normalized_schedule_features.s0.s.si, 0, 7) {
     let t20236 = normalized_schedule_features.s0.s.si + t20229
     let t20235 = ((normalized_schedule_features.n.extent_realized*t20236)*39) - t20224
     let t20234 = (schedule_features.stride.2*t20236) - t20219
     for (normalized_schedule_features.s0.c.ci, 0, t20227) {
      let t20239 = normalized_schedule_features.s0.c.ci + t20232
      let t20237 = (schedule_features.stride.1*t20239) + t20234
      let t20238 = (normalized_schedule_features.n.extent_realized*t20239) + t20235
      for (normalized_schedule_features.s0.n.n, 0, t20233) {
       let normalized_schedule_features.s0.n.ni.base = (normalized_schedule_features.s0.n.n*8) + t20224
       let t19314 = (int32x8)reinterpret(schedule_features[ramp(normalized_schedule_features.s0.n.ni.base + t20237, 1, 8)] + x8(1.000000f))
       let t19315 = (int32x8)bitwise_and(t19314, x8(-2139095041))
       let t19316 = (float32x8)reinterpret((int32x8)bitwise_or(t19315, (x8(127) - (t19315/x8(4194304)))*x8(8388608)))
       let t19317 = (t19316 + x8(-1.000000f))*(t19316 + x8(-1.000000f))
       normalized_schedule_features[ramp(normalized_schedule_features.s0.n.ni.base + t20238, 1, 8)] = (float32x8((((t19315/x8(4194304)) + (t19314/x8(8388608))) + x8(-127)))*x8(0.693147f)) + ((((((((t19317*x8(0.076403f)) + x8(0.206252f))*t19317) + x8(0.333205f))*t19317) + x8(1.000000f))*(t19316 + x8(-1.000000f))) + (((((t19317*x8(-0.162530f)) + x8(-0.251103f))*t19317) + x8(-0.499975f))*t19317))
      }
      let t20242 = normalized_schedule_features.s0.c.ci + t20232
      let t20240 = (schedule_features.stride.1*t20242) + t20234
      let t20241 = (normalized_schedule_features.n.extent_realized*t20242) + t20235
      for (normalized_schedule_features.s0.n.n, t20233, t20231) {
       let normalized_schedule_features.s0.n.ni.base = (normalized_schedule_features.s0.n.n*8) + t20224
       let t20243 = min(t20225 - normalized_schedule_features.s0.n.ni.base, 8)
       let t20245 = normalized_schedule_features.s0.n.ni.base + t20241
       let t20244 = normalized_schedule_features.s0.n.ni.base + t20240
       for (normalized_schedule_features.s0.n.ni, 0, t20243) {
        let t19321 = reinterpret(schedule_features[normalized_schedule_features.s0.n.ni + t20244] + 1.000000f)
        let t19322 = bitwise_and(t19321, -2139095041)
        let t19323 = (float32)reinterpret(bitwise_or(t19322, (127 - (t19322/4194304))*8388608))
        let t19324 = (t19323 + -1.000000f)*(t19323 + -1.000000f)
        normalized_schedule_features[normalized_schedule_features.s0.n.ni + t20245] = (float32((((t19321/8388608) + (t19322/4194304)) + -127))*0.693147f) + ((((((((t19324*0.076403f) + 0.206252f)*t19324) + 0.333205f)*t19324) + 1.000000f)*(t19323 + -1.000000f)) + (((((t19324*-0.162530f) + -0.251103f)*t19324) + -0.499975f)*t19324))
       }
      }
     }
    }
   } else {
    let normalized_schedule_features.s0.s.si.new_max.s = t20223 - ((normalized_schedule_features.s0.c.c.c/8)*7)
    let t20251 = (normalized_schedule_features.s0.c.c.c % 8)*5
    let t20246 = min(normalized_schedule_features.s0.s.si.new_max.s, 7)
    let t20248 = (t20220 + 7)/8
    let t20249 = (normalized_schedule_features.s0.c.c.c/8)*7
    let t20247 = 39 - max(t20251, 34)
    for (normalized_schedule_features.s0.s.si, 0, t20246) {
     let t20254 = normalized_schedule_features.s0.s.si + t20249
     let t20253 = ((normalized_schedule_features.n.extent_realized*t20254)*39) - t20224
     let t20252 = (schedule_features.stride.2*t20254) - t20219
     for (normalized_schedule_features.s0.c.ci, 0, t20247) {
      let t20257 = normalized_schedule_features.s0.c.ci + t20251
      let t20255 = (schedule_features.stride.1*t20257) + t20252
      let t20256 = (normalized_schedule_features.n.extent_realized*t20257) + t20253
      for (normalized_schedule_features.s0.n.n, 0, t20248) {
       let normalized_schedule_features.s0.n.ni.base = (normalized_schedule_features.s0.n.n*8) + t20224
       if ((normalized_schedule_features.s0.n.ni.base + 8) <= t20225) {
        let t19327 = (int32x8)reinterpret(schedule_features[ramp(normalized_schedule_features.s0.n.ni.base + t20255, 1, 8)] + x8(1.000000f))
        let t19328 = (int32x8)bitwise_and(t19327, x8(-2139095041))
        let t19329 = (float32x8)reinterpret((int32x8)bitwise_or(t19328, (x8(127) - (t19328/x8(4194304)))*x8(8388608)))
        let t19330 = (t19329 + x8(-1.000000f))*(t19329 + x8(-1.000000f))
        normalized_schedule_features[ramp(normalized_schedule_features.s0.n.ni.base + t20256, 1, 8)] = (float32x8((((t19328/x8(4194304)) + (t19327/x8(8388608))) + x8(-127)))*x8(0.693147f)) + ((((((((t19330*x8(0.076403f)) + x8(0.206252f))*t19330) + x8(0.333205f))*t19330) + x8(1.000000f))*(t19329 + x8(-1.000000f))) + (((((t19330*x8(-0.162530f)) + x8(-0.251103f))*t19330) + x8(-0.499975f))*t19330))
       } else {
        let t20258 = min(t20225 - normalized_schedule_features.s0.n.ni.base, 8)
        let t20260 = normalized_schedule_features.s0.n.ni.base + t20256
        let t20259 = normalized_schedule_features.s0.n.ni.base + t20255
        for (normalized_schedule_features.s0.n.ni, 0, t20258) {
         let t19334 = reinterpret(schedule_features[normalized_schedule_features.s0.n.ni + t20259] + 1.000000f)
         let t19335 = bitwise_and(t19334, -2139095041)
         let t19336 = (float32)reinterpret(bitwise_or(t19335, (127 - (t19335/4194304))*8388608))
         let t19337 = (t19336 + -1.000000f)*(t19336 + -1.000000f)
         normalized_schedule_features[normalized_schedule_features.s0.n.ni + t20260] = (float32((((t19334/8388608) + (t19335/4194304)) + -127))*0.693147f) + ((((((((t19337*0.076403f) + 0.206252f)*t19337) + 0.333205f)*t19337) + 1.000000f)*(t19336 + -1.000000f)) + (((((t19337*-0.162530f) + -0.251103f)*t19337) + -0.499975f)*t19337))
        }
       }
      }
     }
    }
   }
  }
 }
 let head2_conv.n.extent_realized = let t20022 = (max(head2_conv.s1.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)) in (let t20024 = (max(head2_relu.s0.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)) in (max(max(max(min(max(head2_conv.s1.n.max.s, 1), (min((t20022 + -1)/8, 4)*8) + (min(min(conv1_stage2.s1.n.min.s, 0) + (((t20022 + -1)/40)*40), max(head2_conv.s1.n.max.s, 1) + -1) + min(t20022, 8))), min(max(head2_relu.s0.n.max.s, 1), min(min(conv1_stage2.s1.n.min.s, 0) + (((t20024 + -1)/8)*8), max(head2_relu.s0.n.max.s, 1) + -1) + min(t20024, 8))), min(min(batch_size, 5) + (((batch_size + -1)/5)*5), batch_size)), 1) - min(conv1_stage2.s1.n.min.s, 0)))
 allocate head2_conv[float32 * 24 * max(num_stages, 1) * head2_conv.n.extent_realized]
 let head2_conv.s0.n.n.loop_extent.s = max(head2_conv.s1.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)
 let head2_conv.s0.n.n.n.loop_extent.s = ((head2_conv.s0.n.n.loop_extent.s + 39)/40)*((max(num_stages, 1) + 1)/2)
 let head2_conv.s1.n.n.n.loop_extent.s = ((head2_conv.s0.n.n.loop_extent.s + 39)/40)*((max(num_stages, 1) + 1)/2)
 produce head2_conv {
  let t20264 = max(num_stages, 1)
  let t20265 = max(head2_conv.s1.n.max.s, 1)
  let t20262 = min(conv1_stage2.s1.n.min.s, 0)
  let t20263 = (head2_conv.s0.n.n.loop_extent.s + 39)/40
  let t20261 = head2_conv.s0.n.n.n.loop_extent.s*2
  parallel (head2_conv.s0.n.n.n, 0, t20261) {
   let head2_conv.s0.n.ni.base = ((head2_conv.s0.n.n.n % t20263)*40) + t20262
   let head2_conv.s0.c.ci.base.s = head2_conv.s0.n.n.n/t20263
   let head2_conv.s0.w.wi.epilogue.s = t20264 - ((head2_conv.s0.c.ci.base.s/2)*2)
   let t20273 = t20265 - head2_conv.s0.n.ni.base
   let t20274 = max(min(t20273/8, 5), 0)
   let t20266 = max(min(head2_conv.s0.w.wi.epilogue.s, 2), 0)
   let t20271 = max(min((t20273 + 7)/8, 5) - t20274, 0)
   let t20270 = (head2_conv.s0.c.ci.base.s/2)*2
   let t20268 = (head2_conv.s0.c.ci.base.s % 2)*12
   let t20269 = head2_conv.s0.n.ni.base - t20262
   for (head2_conv.s0.w.wi, 0, t20266) {
    let t20275 = (((head2_conv.s0.w.wi + t20270)*head2_conv.n.extent_realized)*24) + t20269
    for (head2_conv.s0.c.ci, 0, 12) {
     let t20276 = head2_conv.s0.c.ci + t20268
     for (head2_conv.s0.n.ni.ni, 0, t20274) {
      head2_conv[ramp((head2_conv.s0.n.ni.ni*8) + ((head2_conv.n.extent_realized*t20276) + t20275), 1, 8)] = x8(head2_bias[t20276])
     }
     let t20277 = head2_conv.s0.c.ci + t20268
     for (head2_conv.s0.n.ni.ni, t20274, t20271) {
      let head2_conv.s0.n.ni.nii.new_max.s = t20273 - (head2_conv.s0.n.ni.ni*8)
      let t20278 = min(head2_conv.s0.n.ni.nii.new_max.s, 8)
      let t20279 = (head2_conv.s0.n.ni.ni*8) + ((head2_conv.n.extent_realized*t20277) + t20275)
      for (head2_conv.s0.n.ni.nii, 0, t20278) {
       head2_conv[head2_conv.s0.n.ni.nii + t20279] = head2_bias[t20277]
      }
     }
    }
   }
  }
  consume normalized_schedule_features {
   let t20283 = max(num_stages, 1)
   let t20284 = max(head2_conv.s1.n.max.s, 1)
   let t20281 = min(conv1_stage2.s1.n.min.s, 0)
   let t20282 = (head2_conv.s0.n.n.loop_extent.s + 39)/40
   let t20280 = head2_conv.s1.n.n.n.loop_extent.s*2
   parallel (head2_conv.s1.n.n.n, 0, t20280) {
    let head2_conv.s1.n.ni.base = ((head2_conv.s1.n.n.n % t20282)*40) + t20281
    let head2_conv.s1.c.ci.base.s = head2_conv.s1.n.n.n/t20282
    let head2_conv.s1.w.wi.epilogue.s = t20283 - ((head2_conv.s1.c.ci.base.s/2)*2)
    let t20292 = t20284 - head2_conv.s1.n.ni.base
    let t20293 = max(min(t20292/8, 5), 0)
    let t20285 = max(min(head2_conv.s1.w.wi.epilogue.s, 2), 0)
    let t20290 = max(min((t20292 + 7)/8, 5) - t20293, 0)
    let t20288 = (head2_conv.s1.c.ci.base.s/2)*2
    let t20289 = (head2_conv.s1.c.ci.base.s % 2)*12
    let t20287 = head2_conv.s1.n.ni.base - t20281
    for (head2_conv.s1.w.wi, 0, t20285) {
     let t20296 = head2_conv.s1.w.wi + t20288
     let t20295 = (normalized_schedule_features.n.extent_realized*t20296)*39
     let t20294 = (head2_conv.n.extent_realized*t20296)*24
     for (head2_conv.s1.c.ci, 0, 12) {
      let t20299 = head2_conv.s1.c.ci + t20289
      let t20297 = (head2_conv.n.extent_realized*t20299) + t20294
      for (head2_conv.s1.n.ni.ni, 0, t20293) {
       let t20300 = (head2_conv.s1.n.ni.ni*8) + t20287
       for (head2_conv.s1.r40$x, 0, 39) {
        let t20028 = t20297 + t20300
        head2_conv[ramp(t20028, 1, 8)] = head2_conv[ramp(t20028, 1, 8)] + (normalized_schedule_features[ramp((head2_conv.s1.r40$x*normalized_schedule_features.n.extent_realized) + (t20295 + t20300), 1, 8)]*x8(head2_filter[(head2_conv.s1.r40$x*head2_filter.stride.1) + t20299]))
       }
      }
      let t20303 = head2_conv.s1.c.ci + t20289
      let t20301 = (head2_conv.n.extent_realized*t20303) + t20294
      for (head2_conv.s1.n.ni.ni, t20293, t20290) {
       let t20306 = head2_conv.s1.n.ni.ni*8
       let t20304 = t20292 - t20306
       let t20305 = t20287 + t20306
       for (head2_conv.s1.r40$x, 0, 39) {
        let t20307 = min(t20304, 8)
        let t20309 = (head2_conv.s1.r40$x*normalized_schedule_features.n.extent_realized) + t20295
        let t20308 = (head2_conv.s1.r40$x*head2_filter.stride.1) + t20303
        for (head2_conv.s1.n.ni.nii, 0, t20307) {
         let t19351 = head2_conv.s1.n.ni.nii + t20305
         let t20030 = t19351 + t20301
         head2_conv[t20030] = head2_conv[t20030] + (head2_filter[t20308]*normalized_schedule_features[t19351 + t20309])
        }
       }
      }
     }
    }
   }
  }
 }
 let head2_relu.n.extent_realized = let t20033 = (max(conv1_stage2.s1.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)) in (let t20035 = (max(head2_relu.s0.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)) in (max(max(min(max(conv1_stage2.s1.n.max.s, 1), min(min(conv1_stage2.s1.n.min.s, 0) + (((t20033 + -1)/8)*8), max(conv1_stage2.s1.n.max.s, 1) + -1) + min(t20033, 8)), batch_size), min(max(head2_relu.s0.n.max.s, 1), min(min(conv1_stage2.s1.n.min.s, 0) + (((t20035 + -1)/8)*8), max(head2_relu.s0.n.max.s, 1) + -1) + min(t20035, 8))) - min(conv1_stage2.s1.n.min.s, 0)))
 allocate head2_relu[float32 * 24 * max(num_stages, 1) * head2_relu.n.extent_realized]
 let head2_relu.s0.n.n.loop_extent.s = max(head2_relu.s0.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)
 produce head2_relu {
  consume head2_conv {
   let t20317 = max(num_stages, 1)
   let t20318 = min(conv1_stage2.s1.n.min.s, 0)
   let t20319 = max(head2_relu.s0.n.max.s, 1)
   let t20320 = t20319 - t20318
   let t20312 = min(head2_relu.s0.n.n.loop_extent.s + 7, t20320)
   let t20314 = min(head2_relu.s0.n.n.loop_extent.s, t20320)
   let t20311 = (t20317/7)*8
   let t20310 = ((t20317 + 6)/7)*8
   parallel (head2_relu.s0.c.c.c, 0, t20310) {
    if (head2_relu.s0.c.c.c < t20311) {
     let t20325 = t20312/8
     let t20322 = (head2_relu.s0.c.c.c/8)*7
     let t20323 = (head2_relu.s0.c.c.c % 8)*3
     let t20324 = ((t20314 + 7)/8) - t20325
     for (head2_relu.s0.w.wi, 0, 7) {
      let t20326 = head2_relu.s0.w.wi + t20322
      for (head2_relu.s0.c.ci, 0, 3) {
       let t20329 = (head2_relu.n.extent_realized*t20326)*24
       let t20328 = (head2_conv.n.extent_realized*t20326)*24
       let t20327 = head2_relu.s0.c.ci + t20323
       for (head2_relu.s0.n.n, 0, t20325) {
        let head2_relu.s0.n.ni.base = (head2_relu.s0.n.n*8) + t20318
        let t19360 = head2_relu.s0.n.ni.base - t20318
        head2_relu[ramp(((head2_relu.n.extent_realized*t20327) + t20329) + t19360, 1, 8)] = max(head2_conv[ramp(((head2_conv.n.extent_realized*t20327) + t20328) + t19360, 1, 8)], x8(0.000000f))
       }
       let t20332 = (head2_relu.n.extent_realized*t20326)*24
       let t20331 = (head2_conv.n.extent_realized*t20326)*24
       let t20330 = head2_relu.s0.c.ci + t20323
       for (head2_relu.s0.n.n, t20325, t20324) {
        let head2_relu.s0.n.ni.base = (head2_relu.s0.n.n*8) + t20318
        let t20333 = min(t20319 - head2_relu.s0.n.ni.base, 8)
        let t20334 = head2_relu.s0.n.ni.base - t20318
        let t20336 = (head2_relu.n.extent_realized*t20330) + t20332
        let t20335 = (head2_conv.n.extent_realized*t20330) + t20331
        for (head2_relu.s0.n.ni, 0, t20333) {
         let t19363 = head2_relu.s0.n.ni + t20334
         head2_relu[t19363 + t20336] = max(head2_conv[t19363 + t20335], 0.000000f)
        }
       }
      }
     }
    } else {
     let head2_relu.s0.w.wi.new_max.s = t20317 - ((head2_relu.s0.c.c.c/8)*7)
     let t20337 = min(head2_relu.s0.w.wi.new_max.s, 7)
     let t20338 = (t20314 + 7)/8
     let t20339 = (head2_relu.s0.c.c.c/8)*7
     let t20340 = (head2_relu.s0.c.c.c % 8)*3
     for (head2_relu.s0.w.wi, 0, t20337) {
      let t20341 = head2_relu.s0.w.wi + t20339
      for (head2_relu.s0.c.ci, 0, 3) {
       let t20344 = (head2_relu.n.extent_realized*t20341)*24
       let t20343 = (head2_conv.n.extent_realized*t20341)*24
       let t20342 = head2_relu.s0.c.ci + t20340
       for (head2_relu.s0.n.n, 0, t20338) {
        let head2_relu.s0.n.ni.base = (head2_relu.s0.n.n*8) + t20318
        if ((head2_relu.s0.n.ni.base + 8) <= t20319) {
         let t19366 = head2_relu.s0.n.ni.base - t20318
         head2_relu[ramp(((head2_relu.n.extent_realized*t20342) + t20344) + t19366, 1, 8)] = max(head2_conv[ramp(((head2_conv.n.extent_realized*t20342) + t20343) + t19366, 1, 8)], x8(0.000000f))
        } else {
         let t20345 = min(t20319 - head2_relu.s0.n.ni.base, 8)
         let t20346 = head2_relu.s0.n.ni.base - t20318
         let t20348 = (head2_relu.n.extent_realized*t20342) + t20344
         let t20347 = (head2_conv.n.extent_realized*t20342) + t20343
         for (head2_relu.s0.n.ni, 0, t20345) {
          let t19369 = head2_relu.s0.n.ni + t20346
          head2_relu[t19369 + t20348] = max(head2_conv[t19369 + t20347], 0.000000f)
         }
        }
       }
      }
     }
    }
   }
  }
 }
 let conv1_stage2.n.extent_realized = let t20046 = (max(f7.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) in (let t20049 = (max(conv1_stage2.s1.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)) in (let t20050 = min(max(conv1_stage2.s1.n.max.s, 1), min(min(conv1_stage2.s1.n.min.s, 0) + (((t20049 + -1)/8)*8), max(conv1_stage2.s1.n.max.s, 1) + -1) + min(t20049, 8)) in (max(max(max(max(max(max(max(min(max(f7.s1.n.max.s, 1), min(min(prediction_output.min.0, 0) + (((t20046 + -1)/8)*8), max(f7.s1.n.max.s, 1) + -1) + min(t20046, 8)), t20050), min(min(batch_size, 8) + (((batch_size + -1)/8)*8), batch_size)), load_cost_output.extent.0 + load_cost_output.min.0), store_cost_output.extent.0 + store_cost_output.min.0), compute_cost_output.extent.0 + compute_cost_output.min.0), t20050), 1) - min(schedule_features.min.0.required.s, 0))))
 allocate conv1_stage2[float32 * 32 * max(num_stages, 1) * conv1_stage2.n.extent_realized]
 let conv1_stage2.s0.n.n.loop_extent.s = max(conv1_stage2.s1.n.max.s, 1) - min(conv1_stage2.s1.n.min.s, 0)
 produce conv1_stage2 {
  consume head1_conv {
   let t20358 = max(num_stages, 1)
   let t20359 = min(conv1_stage2.s1.n.min.s, 0)
   let t20360 = max(conv1_stage2.s1.n.max.s, 1)
   let t20361 = t20360 - t20359
   let t20352 = min(conv1_stage2.s0.n.n.loop_extent.s + 7, t20361)
   let t20355 = min(conv1_stage2.s0.n.n.loop_extent.s, t20361)
   let t20354 = min(schedule_features.min.0.required.s, 0)
   let t20357 = (t20358 + -1)/2
   let t20350 = (t20358/4)*4
   let t20349 = ((t20358 + 3)/4)*4
   parallel (conv1_stage2.s0.c.c.c, 0, t20349) {
    if (conv1_stage2.s0.c.c.c < t20350) {
     let conv1_stage1.w.extent_realized.s = t20358 - ((conv1_stage2.s0.c.c.c/4)*4)
     allocate conv1_stage1[float32 * 8 * min(conv1_stage1.w.extent_realized.s, 4)]
     produce conv1_stage1 {
      let t20363 = min(conv1_stage1.w.extent_realized.s, 4)
      let t20362 = (conv1_stage2.s0.c.c.c/4)*4
      let t20364 = (conv1_stage2.s0.c.c.c % 4)*8
      for (conv1_stage1.s0.w, t20362, t20363) {
       conv1_stage1[ramp((conv1_stage1.s0.w - t20362)*8, 1, 8) aligned(8, 0)] = bias1[ramp(t20364, 1, 8) aligned(8, 0)]
      }
      let t20366 = min(conv1_stage1.w.extent_realized.s, 4)
      let t20365 = (conv1_stage2.s0.c.c.c/4)*4
      let t20367 = (conv1_stage2.s0.c.c.c % 4)*8
      for (conv1_stage1.s1.r54$x, 0, 8) {
       let t20368 = (conv1_stage1.s1.r54$x*filter1.stride.1) + t20367
       for (conv1_stage1.s1.w, t20365, t20366) {
        let t19379 = conv1_stage1.s1.w - t20365
        conv1_stage1[ramp(t19379*8, 1, 8) aligned(8, 0)] = conv1_stage1[ramp(t19379*8, 1, 8) aligned(8, 0)] + (filter1[ramp(t20368, 1, 8)]*x8(head1_conv[(conv1_stage1.s1.w*8) + conv1_stage1.s1.r54$x]))
       }
      }
     }
     consume conv1_stage1 {
      let t20373 = t20352/8
      let t20369 = (conv1_stage2.s0.c.c.c/4)*4
      let t20371 = (conv1_stage2.s0.c.c.c % 4)*8
      let t20372 = ((t20355 + 7)/8) - t20373
      for (conv1_stage2.s0.w.wi.wi, 0, 2) {
       let t20376 = conv1_stage2.s0.w.wi.wi*2
       let t20374 = t20369 + t20376
       for (conv1_stage2.s0.w.wi.wii, 0, 2) {
        let conv1_stage2.s0.w = conv1_stage2.s0.w.wi.wii + t20374
        let t20377 = (conv1_stage2.s0.w.wi.wii + t20376)*8
        let t20378 = ((conv1_stage2.n.extent_realized*conv1_stage2.s0.w)*32) - t20354
        for (conv1_stage2.s0.c.ci, 0, 8) {
         let t20380 = ((conv1_stage2.s0.c.ci + t20371)*conv1_stage2.n.extent_realized) + t20378
         let t20379 = conv1_stage2.s0.c.ci + t20377
         for (conv1_stage2.s0.n.n, 0, t20373) {
          let conv1_stage2.s0.n.ni.base = (conv1_stage2.s0.n.n*8) + t20359
          conv1_stage2[ramp(conv1_stage2.s0.n.ni.base + t20380, 1, 8)] = x8(conv1_stage1[t20379])
         }
         let t20382 = ((conv1_stage2.s0.c.ci + t20371)*conv1_stage2.n.extent_realized) + t20378
         let t20381 = conv1_stage2.s0.c.ci + t20377
         for (conv1_stage2.s0.n.n, t20373, t20372) {
          let conv1_stage2.s0.n.ni.base = (conv1_stage2.s0.n.n*8) + t20359
          let t20383 = min(t20360 - conv1_stage2.s0.n.ni.base, 8)
          let t20384 = conv1_stage2.s0.n.ni.base + t20382
          for (conv1_stage2.s0.n.ni, 0, t20383) {
           conv1_stage2[conv1_stage2.s0.n.ni + t20384] = conv1_stage1[t20381]
          }
         }
        }
       }
      }
     }
     free conv1_stage1
    } else {
     let conv1_stage1.w.extent_realized.s = t20358 - ((conv1_stage2.s0.c.c.c/4)*4)
     allocate conv1_stage1[float32 * 8 * min(conv1_stage1.w.extent_realized.s, 4)]
     produce conv1_stage1 {
      let t20386 = min(conv1_stage1.w.extent_realized.s, 4)
      let t20385 = (conv1_stage2.s0.c.c.c/4)*4
      let t20387 = (conv1_stage2.s0.c.c.c % 4)*8
      for (conv1_stage1.s0.w, t20385, t20386) {
       conv1_stage1[ramp((conv1_stage1.s0.w - t20385)*8, 1, 8) aligned(8, 0)] = bias1[ramp(t20387, 1, 8) aligned(8, 0)]
      }
      let t20389 = min(conv1_stage1.w.extent_realized.s, 4)
      let t20388 = (conv1_stage2.s0.c.c.c/4)*4
      let t20390 = (conv1_stage2.s0.c.c.c % 4)*8
      for (conv1_stage1.s1.r54$x, 0, 8) {
       let t20391 = (conv1_stage1.s1.r54$x*filter1.stride.1) + t20390
       for (conv1_stage1.s1.w, t20388, t20389) {
        let t19380 = conv1_stage1.s1.w - t20388
        conv1_stage1[ramp(t19380*8, 1, 8) aligned(8, 0)] = conv1_stage1[ramp(t19380*8, 1, 8) aligned(8, 0)] + (filter1[ramp(t20391, 1, 8)]*x8(head1_conv[(conv1_stage1.s1.w*8) + conv1_stage1.s1.r54$x]))
       }
      }
     }
     consume conv1_stage1 {
      let conv1_stage2.s0.w.wi.wi.new_max.s = t20357 - ((conv1_stage2.s0.c.c.c/4)*2)
      let t20397 = conv1_stage2.s0.c.c.c/4
      let t20392 = min(conv1_stage2.s0.w.wi.wi.new_max.s, 1)
      let t20395 = (t20355 + 7)/8
      let t20394 = t20397*4
      let t20393 = t20397*2
      let t20396 = (conv1_stage2.s0.c.c.c % 4)*8
      for (conv1_stage2.s0.w.wi.wi, 0, t20392 + 1) {
       let conv1_stage2.s0.w.wi.wii.new_max.s = t20358 - ((conv1_stage2.s0.w.wi.wi + t20393)*2)
       let t20401 = conv1_stage2.s0.w.wi.wi*2
       let t20398 = min(conv1_stage2.s0.w.wi.wii.new_max.s, 2)
       let t20399 = t20394 + t20401
       for (conv1_stage2.s0.w.wi.wii, 0, t20398) {
        let conv1_stage2.s0.w = conv1_stage2.s0.w.wi.wii + t20399
        let t20402 = (conv1_stage2.s0.w.wi.wii + t20401)*8
        let t20403 = ((conv1_stage2.n.extent_realized*conv1_stage2.s0.w)*32) - t20354
        for (conv1_stage2.s0.c.ci, 0, 8) {
         let t20405 = ((conv1_stage2.s0.c.ci + t20396)*conv1_stage2.n.extent_realized) + t20403
         let t20404 = conv1_stage2.s0.c.ci + t20402
         for (conv1_stage2.s0.n.n, 0, t20395) {
          let conv1_stage2.s0.n.ni.base = (conv1_stage2.s0.n.n*8) + t20359
          if ((conv1_stage2.s0.n.ni.base + 8) <= t20360) {
           conv1_stage2[ramp(conv1_stage2.s0.n.ni.base + t20405, 1, 8)] = x8(conv1_stage1[t20404])
          } else {
           let t20406 = min(t20360 - conv1_stage2.s0.n.ni.base, 8)
           let t20407 = conv1_stage2.s0.n.ni.base + t20405
           for (conv1_stage2.s0.n.ni, 0, t20406) {
            conv1_stage2[conv1_stage2.s0.n.ni + t20407] = conv1_stage1[t20404]
           }
          }
         }
        }
       }
      }
     }
     free conv1_stage1
    }
   }
  }
  consume head2_relu {
   let t20416 = max(num_stages, 1)
   let t20417 = min(conv1_stage2.s1.n.min.s, 0)
   let t20418 = max(conv1_stage2.s1.n.max.s, 1)
   let t20419 = t20418 - t20417
   let t20410 = min(conv1_stage2.s0.n.n.loop_extent.s + 7, t20419)
   let t20413 = min(conv1_stage2.s0.n.n.loop_extent.s, t20419)
   let t20412 = min(schedule_features.min.0.required.s, 0)
   let t20409 = (t20416/2)*4
   let t20408 = ((t20416 + 1)/2)*4
   parallel (conv1_stage2.s1.c.c.c, 0, t20408) {
    if (conv1_stage2.s1.c.c.c < t20409) {
     let t20424 = t20410/8
     let t20421 = (conv1_stage2.s1.c.c.c/4)*2
     let t20422 = (conv1_stage2.s1.c.c.c % 4)*8
     let t20423 = ((t20413 + 7)/8) - t20424
     for (conv1_stage2.s1.w.wi, 0, 2) {
      let t20427 = conv1_stage2.s1.w.wi + t20421
      let t20426 = ((head2_relu.n.extent_realized*t20427)*24) - t20417
      let t20425 = ((conv1_stage2.n.extent_realized*t20427)*32) - t20412
      for (conv1_stage2.s1.c.ci, 0, 8) {
       let t20430 = conv1_stage2.s1.c.ci + t20422
       let t20428 = (conv1_stage2.n.extent_realized*t20430) + t20425
       for (conv1_stage2.s1.n.n, 0, t20424) {
        let conv1_stage2.s1.n.ni.base = (conv1_stage2.s1.n.n*8) + t20417
        let t20431 = conv1_stage2.s1.n.ni.base + t20428
        let t20432 = conv1_stage2.s1.n.ni.base + t20426
        for (conv1_stage2.s1.r63$x, 0, 24) {
         conv1_stage2[ramp(t20431, 1, 8)] = conv1_stage2[ramp(t20431, 1, 8)] + (head2_relu[ramp((conv1_stage2.s1.r63$x*head2_relu.n.extent_realized) + t20432, 1, 8)]*x8(filter1[((conv1_stage2.s1.r63$x + 8)*filter1.stride.1) + t20430]))
        }
       }
       let t20435 = conv1_stage2.s1.c.ci + t20422
       let t20433 = (conv1_stage2.n.extent_realized*t20435) + t20425
       for (conv1_stage2.s1.n.n, t20424, t20423) {
        let conv1_stage2.s1.n.ni.base = (conv1_stage2.s1.n.n*8) + t20417
        let t20436 = min(t20418 - conv1_stage2.s1.n.ni.base, 8)
        let t20437 = conv1_stage2.s1.n.ni.base + t20433
        let t20438 = conv1_stage2.s1.n.ni.base + t20426
        for (conv1_stage2.s1.r63$x, 0, 24) {
         let t20439 = ((conv1_stage2.s1.r63$x + 8)*filter1.stride.1) + t20435
         let t20440 = (conv1_stage2.s1.r63$x*head2_relu.n.extent_realized) + t20438
         for (conv1_stage2.s1.n.ni, 0, t20436) {
          let t19387 = conv1_stage2.s1.n.ni + t20437
          conv1_stage2[t19387] = conv1_stage2[t19387] + (filter1[t20439]*head2_relu[conv1_stage2.s1.n.ni + t20440])
         }
        }
       }
      }
     }
    } else {
     let conv1_stage2.s1.w.wi.new_max.s = t20416 - ((conv1_stage2.s1.c.c.c/4)*2)
     let t20441 = min(conv1_stage2.s1.w.wi.new_max.s, 2)
     let t20442 = (t20413 + 7)/8
     let t20443 = (conv1_stage2.s1.c.c.c/4)*2
     let t20444 = (conv1_stage2.s1.c.c.c % 4)*8
     for (conv1_stage2.s1.w.wi, 0, t20441) {
      let t20447 = conv1_stage2.s1.w.wi + t20443
      let t20446 = ((head2_relu.n.extent_realized*t20447)*24) - t20417
      let t20445 = ((conv1_stage2.n.extent_realized*t20447)*32) - t20412
      for (conv1_stage2.s1.c.ci, 0, 8) {
       let t20450 = conv1_stage2.s1.c.ci + t20444
       let t20448 = (conv1_stage2.n.extent_realized*t20450) + t20445
       for (conv1_stage2.s1.n.n, 0, t20442) {
        let conv1_stage2.s1.n.ni.base = (conv1_stage2.s1.n.n*8) + t20417
        let t20451 = (conv1_stage2.s1.n.ni.base + 8) <= t20418
        let t20454 = min(t20418 - conv1_stage2.s1.n.ni.base, 8)
        let t20452 = conv1_stage2.s1.n.ni.base + t20448
        let t20453 = conv1_stage2.s1.n.ni.base + t20446
        for (conv1_stage2.s1.r63$x, 0, 24) {
         if (t20451) {
          conv1_stage2[ramp(t20452, 1, 8)] = conv1_stage2[ramp(t20452, 1, 8)] + (head2_relu[ramp((conv1_stage2.s1.r63$x*head2_relu.n.extent_realized) + t20453, 1, 8)]*x8(filter1[((conv1_stage2.s1.r63$x + 8)*filter1.stride.1) + t20450]))
         } else {
          let t20455 = ((conv1_stage2.s1.r63$x + 8)*filter1.stride.1) + t20450
          let t20456 = (conv1_stage2.s1.r63$x*head2_relu.n.extent_realized) + t20453
          for (conv1_stage2.s1.n.ni, 0, t20454) {
           let t19394 = conv1_stage2.s1.n.ni + t20452
           conv1_stage2[t19394] = conv1_stage2[t19394] + (filter1[t20455]*head2_relu[conv1_stage2.s1.n.ni + t20456])
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 let f7.n.extent_realized.s = let t20051.s = max(-8 - batch_size, batch_size + -1) in (let t20052 = min((max(t20051.s/8, 0)*8) + 8, batch_size) in (let t20053 = min(max(t20051.s/8, 0), (t20052 + -1)/8) in (let t20056 = (max(f7.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) in ((max(max(max(max(min(min(prediction_output.extent.0, 8) + (((prediction_output.extent.0 + -1)/8)*8), prediction_output.extent.0) + prediction_output.min.0, batch_size), min(min((min(max(t20051.s/8, 0), t20053)*8) + 8, batch_size), min(t20052, 8) + ((((t20052 + -1)/8) + t20053)*8))), min(max(f7.s1.n.max.s, 1), min(min(prediction_output.min.0, 0) + (((t20056 + -1)/8)*8), max(f7.s1.n.max.s, 1) + -1) + min(t20056, 8))), 1) - min(prediction_output.min.0, 0)) + -1))))
 allocate f7[float32 * (f7.n.extent_realized.s + 1)]
 let f7.s0.n.n.loop_extent.s = max(f7.s1.n.max.s, 1) - min(prediction_output.min.0, 0)
 produce f7 {
  let f7.s0.n.n.epilogue.s = min(max(f7.s1.n.max.s, 1) - min(prediction_output.min.0, 0), f7.s0.n.n.loop_extent.s + 7)
  let f7.s0.n.n.new_max.s = min(max((max(f7.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) + 7, f7.s0.n.n.epilogue.s), f7.s0.n.n.loop_extent.s + 7)
  let t20460 = max(f7.s1.n.max.s, 1)
  let t20459 = min(prediction_output.min.0, 0)
  let t20457 = f7.s0.n.n.new_max.s/8
  let t20458 = f7.s0.n.n.epilogue.s/8
  parallel (f7.s0.n.n, 0, t20457) {
   if (f7.s0.n.n < t20458) {
    let f7.s0.n.ni.base = (f7.s0.n.n*8) + t20459
    f7[ramp(f7.s0.n.ni.base - t20459, 1, 8)] = x8(0.000000f)
   } else {
    let f7.s0.n.ni.base = (f7.s0.n.n*8) + t20459
    let t20461 = max(min(t20460 - f7.s0.n.ni.base, 8), 0)
    let t20462 = f7.s0.n.ni.base - t20459
    for (f7.s0.n.ni, 0, t20461) {
     f7[f7.s0.n.ni + t20462] = 0.000000f
    }
   }
  }
  consume conv1_stage2 {
   let f7.s1.n.n.epilogue.s = min(max(f7.s1.n.max.s, 1) - min(prediction_output.min.0, 0), f7.s0.n.n.loop_extent.s + 7)
   let f7.s1.n.n.new_max.s = min(max((max(f7.s1.n.max.s, 1) - min(prediction_output.min.0, 0)) + 7, f7.s1.n.n.epilogue.s), f7.s0.n.n.loop_extent.s + 7)
   let t20511 = max(f7.s1.n.max.s, 1)
   let t20467 = min(schedule_features.min.0.required.s, 0)
   let t20465 = min(prediction_output.min.0, 0)
   let t20463 = f7.s1.n.n.new_max.s/8
   let t20464 = f7.s1.n.n.epilogue.s/8
   let t20466 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   let t20473 = float32(num_cores)
   parallel (f7.s1.n.n, 0, t20463) {
    if (f7.s1.n.n < t20464) {
     let f7.s1.n.ni.base = (f7.s1.n.n*8) + t20465
     let t20513 = f7.s1.n.ni.base - t20467
     let t20514 = f7.s1.n.ni.base - t20466
     let t20512 = f7.s1.n.ni.base - t20465
     let t20540 = ((schedule_features.stride.1*34) - t20466) + f7.s1.n.ni.base
     let t20542 = ((schedule_features.stride.1*33) - t20466) + f7.s1.n.ni.base
     let t20521 = ((schedule_features.stride.1*32) - t20466) + f7.s1.n.ni.base
     let t20522 = ((schedule_features.stride.1*31) - t20466) + f7.s1.n.ni.base
     let t20520 = ((schedule_features.stride.1*30) - t20466) + f7.s1.n.ni.base
     let t20534 = ((schedule_features.stride.1*29) - t20466) + f7.s1.n.ni.base
     let t20549 = ((schedule_features.stride.1*28) - t20466) + f7.s1.n.ni.base
     let t20548 = ((schedule_features.stride.1*27) - t20466) + f7.s1.n.ni.base
     let t20551 = ((schedule_features.stride.1*26) - t20466) + f7.s1.n.ni.base
     let t20517 = ((schedule_features.stride.1*25) - t20466) + f7.s1.n.ni.base
     let t20515 = ((schedule_features.stride.1*24) - t20466) + f7.s1.n.ni.base
     let t20516 = ((schedule_features.stride.1*22) - t20466) + f7.s1.n.ni.base
     let t20524 = ((schedule_features.stride.1*21) - t20466) + f7.s1.n.ni.base
     let t20553 = ((schedule_features.stride.1*19) - t20466) + f7.s1.n.ni.base
     let t20555 = ((schedule_features.stride.1*18) - t20466) + f7.s1.n.ni.base
     let t20527 = ((schedule_features.stride.1*17) - t20466) + f7.s1.n.ni.base
     let t20530 = ((schedule_features.stride.1*12) - t20466) + f7.s1.n.ni.base
     let t20535 = ((schedule_features.stride.1*11) - t20466) + f7.s1.n.ni.base
     let t20519 = ((schedule_features.stride.1*10) - t20466) + f7.s1.n.ni.base
     let t20518 = ((schedule_features.stride.1*9) - t20466) + f7.s1.n.ni.base
     let t20523 = (schedule_features.stride.1 - t20466) + f7.s1.n.ni.base
     for (f7.s1.r77$x, 0, num_stages) {
      let t19407 = schedule_features[ramp((f7.s1.r77$x*schedule_features.stride.2) + t20514, 1, 8)]
      let t19408 = schedule_features[ramp((f7.s1.r77$x*schedule_features.stride.2) + t20515, 1, 8)]
      let t19409.s = schedule_features[ramp((f7.s1.r77$x*schedule_features.stride.2) + t20516, 1, 8)]
      let t19410 = schedule_features[ramp((f7.s1.r77$x*schedule_features.stride.2) + t20517, 1, 8)]
      let t19411 = schedule_features[ramp((f7.s1.r77$x*schedule_features.stride.2) + t20518, 1, 8)]
      let t19412 = schedule_features[ramp((f7.s1.r77$x*schedule_features.stride.2) + t20519, 1, 8)]
      let t19414 = max(t19411*t19412, x8(1.000000f))/x8(t20473)
      let t19415.s = schedule_features[ramp((f7.s1.r77$x*schedule_features.stride.2) + t20520, 1, 8)]
      let t19416 = x8(1.000000f) < t19411
      let t19417 = f7.s1.r77$x == 0
      let t19418 = schedule_features[ramp((f7.s1.r77$x*schedule_features.stride.2) + t20521, 1, 8)]
      let t19419 = schedule_features[ramp((f7.s1.r77$x*schedule_features.stride.2) + t20522, 1, 8)]
      let t19420 = schedule_features[ramp((f7.s1.r77$x*schedule_features.stride.2) + t20523, 1, 8)]
      let t20057 = f7.s1.r77$x*schedule_features.stride.2
      let t20058 = conv1_stage2.n.extent_realized*f7.s1.r77$x
      let t20059 = t19408*t19409.s
      let t20060 = max(t19415.s, x8(1.000000f))
      let t20061 = max(t19411*t19412, x8(1.000000f))
      f7[ramp(t20512, 1, 8)] = f7[ramp(t20512, 1, 8)] + (((schedule_features[ramp(t20057 + t20524, 1, 8)]*max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*27) + t20513), 1, 8)], x8(0.000000f))) + (((max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*24) + t20513), 1, 8)], x8(0.000000f))*t19407) + (((select(schedule_features[ramp(t20057 + t20527, 1, 8)] == x8(0.000000f), (max(conv1_stage2[ramp((t20058*32) + t20513, 1, 8)], x8(0.000000f))*t20059) + (max(conv1_stage2[ramp((t20058*32) + (conv1_stage2.n.extent_realized + t20513), 1, 8)], x8(0.000000f))*t19410), (max(conv1_stage2[ramp((((t20058*16) + conv1_stage2.n.extent_realized)*2) + t20513, 1, 8)], x8(0.000000f))*t20059) + (max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*3) + t20513), 1, 8)], x8(0.000000f))*t19410))*((float32x8)ceil_f32(t19414)/max(t19414, x8(1.000000f)))) + (((max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*23) + t20513), 1, 8)], x8(0.000000f))*(((schedule_features[ramp(t20057 + t20530, 1, 8)]*min(x8(4096.000000f)/t20060, t19411))*t19411)*t19412)) + (select(t19416, (max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*22) + t20513), 1, 8)], x8(0.000000f))*(t19408 + t19410))/t20060, x8(0.000000f)) + (((select(t19416, max(conv1_stage2[ramp((((t20058*2) + conv1_stage2.n.extent_realized)*16) + t20513, 1, 8)], x8(0.000000f)), select(t19417, max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*17) + t20513), 1, 8)], x8(0.000000f)), max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*18) + t20513), 1, 8)], x8(0.000000f))))*((schedule_features[ramp(t20057 + t20534, 1, 8)]/t20060)*t19411)) + (schedule_features[ramp(t20057 + t20535, 1, 8)]*select(t19416, max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*19) + t20513), 1, 8)], x8(0.000000f)), select(t19417, max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*20) + t20513), 1, 8)], x8(0.000000f)), max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*21) + t20513), 1, 8)], x8(0.000000f))))))*t19407)))*x8(2.000000f))) + ((max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*15) + t20513), 1, 8)], x8(0.000000f))*(schedule_features[ramp(t20057 + t20540, 1, 8)]*t20061)) + ((max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*14) + t20513), 1, 8)], x8(0.000000f))*(schedule_features[ramp(t20057 + t20542, 1, 8)]*t20061)) + ((max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*13) + t20513), 1, 8)], x8(0.000000f))*(t19408*t19418)) + ((max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*12) + t20513), 1, 8)], x8(0.000000f))*(t19410*t19418)) + ((max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*11) + t20513), 1, 8)], x8(0.000000f))*(t19408*t19419)) + ((max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*10) + t20513), 1, 8)], x8(0.000000f))*(t19410*t19419)) + ((max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*9) + t20513), 1, 8)], x8(0.000000f))*(schedule_features[ramp(t20057 + t20548, 1, 8)]*t19408)) + ((max(conv1_stage2[ramp((((t20058*4) + conv1_stage2.n.extent_realized)*8) + t20513, 1, 8)], x8(0.000000f))*(schedule_features[ramp(t20057 + t20549, 1, 8)]*t19410)) + ((max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*7) + t20513), 1, 8)], x8(0.000000f))*(schedule_features[ramp(t20057 + t20551, 1, 8)]*t19408)) + ((max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*5) + t20513), 1, 8)], x8(0.000000f))*(schedule_features[ramp(t20057 + t20553, 1, 8)]*t19407)) + (max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*6) + t20513), 1, 8)], x8(0.000000f))*(schedule_features[ramp(t20057 + t20555, 1, 8)]*t19407)))))))))))))) + ((max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*26) + t20513), 1, 8)], x8(0.000000f))*((t19411 + x8(-1.000000f))*t19420)) + (select(t19416, max(conv1_stage2[ramp((t20058*32) + ((conv1_stage2.n.extent_realized*25) + t20513), 1, 8)], x8(0.000000f)), x8(0.000000f))*t19420))))*x8(0.000000f))
     }
    } else {
     let f7.s1.n.ni.base = (f7.s1.n.n*8) + t20465
     let t20558 = max(min(t20511 - f7.s1.n.ni.base, 8), 0)
     let t20560 = f7.s1.n.ni.base - t20467
     let t20561 = f7.s1.n.ni.base - t20466
     let t20559 = f7.s1.n.ni.base - t20465
     let t20587 = ((schedule_features.stride.1*34) - t20466) + f7.s1.n.ni.base
     let t20589 = ((schedule_features.stride.1*33) - t20466) + f7.s1.n.ni.base
     let t20568 = ((schedule_features.stride.1*32) - t20466) + f7.s1.n.ni.base
     let t20569 = ((schedule_features.stride.1*31) - t20466) + f7.s1.n.ni.base
     let t20567 = ((schedule_features.stride.1*30) - t20466) + f7.s1.n.ni.base
     let t20581 = ((schedule_features.stride.1*29) - t20466) + f7.s1.n.ni.base
     let t20596 = ((schedule_features.stride.1*28) - t20466) + f7.s1.n.ni.base
     let t20595 = ((schedule_features.stride.1*27) - t20466) + f7.s1.n.ni.base
     let t20598 = ((schedule_features.stride.1*26) - t20466) + f7.s1.n.ni.base
     let t20564 = ((schedule_features.stride.1*25) - t20466) + f7.s1.n.ni.base
     let t20562 = ((schedule_features.stride.1*24) - t20466) + f7.s1.n.ni.base
     let t20563 = ((schedule_features.stride.1*22) - t20466) + f7.s1.n.ni.base
     let t20571 = ((schedule_features.stride.1*21) - t20466) + f7.s1.n.ni.base
     let t20600 = ((schedule_features.stride.1*19) - t20466) + f7.s1.n.ni.base
     let t20602 = ((schedule_features.stride.1*18) - t20466) + f7.s1.n.ni.base
     let t20574 = ((schedule_features.stride.1*17) - t20466) + f7.s1.n.ni.base
     let t20577 = ((schedule_features.stride.1*12) - t20466) + f7.s1.n.ni.base
     let t20582 = ((schedule_features.stride.1*11) - t20466) + f7.s1.n.ni.base
     let t20566 = ((schedule_features.stride.1*10) - t20466) + f7.s1.n.ni.base
     let t20565 = ((schedule_features.stride.1*9) - t20466) + f7.s1.n.ni.base
     let t20570 = (schedule_features.stride.1 - t20466) + f7.s1.n.ni.base
     for (f7.s1.r77$x, 0, num_stages) {
      let t20640 = f7.s1.r77$x*schedule_features.stride.2
      let t20612 = f7.s1.r77$x == 0
      let t20617 = conv1_stage2.n.extent_realized*f7.s1.r77$x
      let t20615 = t20570 + t20640
      let t20614 = t20569 + t20640
      let t20613 = t20568 + t20640
      let t20611 = t20567 + t20640
      let t20610 = t20566 + t20640
      let t20609 = t20565 + t20640
      let t20608 = t20564 + t20640
      let t20607 = t20563 + t20640
      let t20606 = t20562 + t20640
      let t20605 = t20561 + t20640
      for (f7.s1.n.ni, 0, t20558) {
       let t19422 = f7.s1.n.ni + t20559
       let t19425 = f7.s1.n.ni + t20560
       let t19427 = schedule_features[f7.s1.n.ni + t20605]
       let t19428 = schedule_features[f7.s1.n.ni + t20606]
       let t19429.s = schedule_features[f7.s1.n.ni + t20607]
       let t19430 = schedule_features[f7.s1.n.ni + t20608]
       let t19431 = schedule_features[f7.s1.n.ni + t20609]
       let t19432 = schedule_features[f7.s1.n.ni + t20610]
       let t19434 = max(t19431*t19432, 1.000000f)/t20473
       let t19435.s = schedule_features[f7.s1.n.ni + t20611]
       let t19436 = 1.000000f < t19431
       let t19438 = schedule_features[f7.s1.n.ni + t20613]
       let t19439 = schedule_features[f7.s1.n.ni + t20614]
       let t19440 = schedule_features[f7.s1.n.ni + t20615]
       let t20064 = t19428*t19429.s
       let t20065 = max(t19435.s, 1.000000f)
       let t20066 = max(t19431*t19432, 1.000000f)
       f7[t19422] = f7[t19422] + (((schedule_features[(t20571 + t20640) + f7.s1.n.ni]*max(conv1_stage2[((conv1_stage2.n.extent_realized*27) + (t20617*32)) + t19425], 0.000000f)) + (((max(conv1_stage2[((conv1_stage2.n.extent_realized*24) + (t20617*32)) + t19425], 0.000000f)*t19427) + (((select(schedule_features[(t20574 + t20640) + f7.s1.n.ni] == 0.000000f, (max(conv1_stage2[(t20617*32) + t19425], 0.000000f)*t20064) + (max(conv1_stage2[((t20617*32) + conv1_stage2.n.extent_realized) + t19425], 0.000000f)*t19430), (max(conv1_stage2[(((t20617*16) + conv1_stage2.n.extent_realized)*2) + t19425], 0.000000f)*t20064) + (max(conv1_stage2[((conv1_stage2.n.extent_realized*3) + (t20617*32)) + t19425], 0.000000f)*t19430))*((float32)ceil_f32(t19434)/max(t19434, 1.000000f))) + (((max(conv1_stage2[((conv1_stage2.n.extent_realized*23) + (t20617*32)) + t19425], 0.000000f)*(((schedule_features[(t20577 + t20640) + f7.s1.n.ni]*min(4096.000000f/t20065, t19431))*t19431)*t19432)) + (select(t19436, (max(conv1_stage2[((conv1_stage2.n.extent_realized*22) + (t20617*32)) + t19425], 0.000000f)*(t19428 + t19430))/t20065, 0.000000f) + (((select(t19436, max(conv1_stage2[(((t20617*2) + conv1_stage2.n.extent_realized)*16) + t19425], 0.000000f), select(t20612, max(conv1_stage2[((conv1_stage2.n.extent_realized*17) + (t20617*32)) + t19425], 0.000000f), max(conv1_stage2[((conv1_stage2.n.extent_realized*18) + (t20617*32)) + t19425], 0.000000f)))*((schedule_features[(t20581 + t20640) + f7.s1.n.ni]/t20065)*t19431)) + (schedule_features[(t20582 + t20640) + f7.s1.n.ni]*select(t19436, max(conv1_stage2[((conv1_stage2.n.extent_realized*19) + (t20617*32)) + t19425], 0.000000f), select(t20612, max(conv1_stage2[((conv1_stage2.n.extent_realized*20) + (t20617*32)) + t19425], 0.000000f), max(conv1_stage2[((conv1_stage2.n.extent_realized*21) + (t20617*32)) + t19425], 0.000000f)))))*t19427)))*2.000000f)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*15) + (t20617*32)) + t19425], 0.000000f)*(schedule_features[(t20587 + t20640) + f7.s1.n.ni]*t20066)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*14) + (t20617*32)) + t19425], 0.000000f)*(schedule_features[(t20589 + t20640) + f7.s1.n.ni]*t20066)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*13) + (t20617*32)) + t19425], 0.000000f)*(t19428*t19438)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*12) + (t20617*32)) + t19425], 0.000000f)*(t19430*t19438)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*11) + (t20617*32)) + t19425], 0.000000f)*(t19428*t19439)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*10) + (t20617*32)) + t19425], 0.000000f)*(t19430*t19439)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*9) + (t20617*32)) + t19425], 0.000000f)*(schedule_features[(t20595 + t20640) + f7.s1.n.ni]*t19428)) + ((max(conv1_stage2[(((t20617*4) + conv1_stage2.n.extent_realized)*8) + t19425], 0.000000f)*(schedule_features[(t20596 + t20640) + f7.s1.n.ni]*t19430)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*7) + (t20617*32)) + t19425], 0.000000f)*(schedule_features[(t20598 + t20640) + f7.s1.n.ni]*t19428)) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*5) + (t20617*32)) + t19425], 0.000000f)*(schedule_features[(t20600 + t20640) + f7.s1.n.ni]*t19427)) + (max(conv1_stage2[((conv1_stage2.n.extent_realized*6) + (t20617*32)) + t19425], 0.000000f)*(schedule_features[(t20602 + t20640) + f7.s1.n.ni]*t19427)))))))))))))) + ((max(conv1_stage2[((conv1_stage2.n.extent_realized*26) + (t20617*32)) + t19425], 0.000000f)*((t19431 + -1.000000f)*t19440)) + (select(t19436, max(conv1_stage2[((conv1_stage2.n.extent_realized*25) + (t20617*32)) + t19425], 0.000000f), 0.000000f)*t19440))))*0.000000f)
      }
     }
    }
   }
  }
 }
 allocate sum$1_1_d_def__[float32 * 1]
 produce sum$1_1_d_def__ {
  sum$1_1_d_def__[0] = 1.000000f
 }
 let f6_0_d_def__.w.min_realized = select(0 < batch_size, 0, ((((batch_size + 7)/8)*((num_stages + 1)/2)) + -1)/((batch_size + 7)/8))*2
 let f6_0_d_def__.w.extent_realized.s = let t20067 = (0 < batch_size) in (let t20068 = (((((batch_size + 7)/8)*((num_stages + 1)/2)) + -1)/((batch_size + 7)/8)) in (let t20069 = select(t20067, 0, t20068) in ((min(min(num_stages - (t20069*2), 2) + (min(select(t20067, t20068, 0), (num_stages + -1)/2)*2), num_stages) - (t20069*2)) + -1)))
 let f6_0_d_def__.n.extent_realized = min(min(batch_size, 8) + (min(max(max(-8 - batch_size, batch_size + -1)/8, 0), (batch_size + -1)/8)*8), batch_size)
 allocate f6_0_d_def__[float32 * f6_0_d_def__.n.extent_realized * (f6_0_d_def__.w.extent_realized.s + 1)]
 let f6_0_d_def__.s0.n.n.n.loop_extent = ((batch_size + 7)/8)*((num_stages + 1)/2)
 produce f6_0_d_def__ {
  consume sum$1_1_d_def__ {
   consume f7 {
    let t20643 = min(prediction_output.min.0, 0)
    let t20641 = (batch_size + 7)/8
    let t20642 = max(min(batch_size + -1, reference), 0) - true_runtime.min.0
    parallel (f6_0_d_def__.s0.n.n.n, 0, f6_0_d_def__.s0.n.n.n.loop_extent) {
     let f6_0_d_def__.s0.n.ni.base.s = f6_0_d_def__.s0.n.n.n % t20641
     let f6_0_d_def__.s0.w.wi.base.s = f6_0_d_def__.s0.n.n.n/t20641
     let f6_0_d_def__.s0.n.max_1.s = min((f6_0_d_def__.s0.n.ni.base.s*8) + 8, batch_size)
     let f7_1_d_def__.n.extent_realized = f6_0_d_def__.s0.n.max_1.s - (f6_0_d_def__.s0.n.ni.base.s*8)
     allocate f7_1_d_def__[float32 * f7_1_d_def__.n.extent_realized]
     produce f7_1_d_def__ {
      let f7_1_d_def__.s0.n.n.epilogue.s = min(min(batch_size, f6_0_d_def__.s0.n.max_1.s), f6_0_d_def__.s0.n.max_1.s + 7)
      let t20644 = max((f7_1_d_def__.s0.n.n.epilogue.s/8) - f6_0_d_def__.s0.n.ni.base.s, 0)
      for (f7_1_d_def__.s0.n.n, 0, t20644) {
       let t19447 = true_runtime[t20642]
       let t19448 = f7[ramp(((f6_0_d_def__.s0.n.ni.base.s + f7_1_d_def__.s0.n.n)*8) - t20643, 1, 8)]*x8(1.000000f/t19447)
       let t20070 = f6_0_d_def__.s0.n.ni.base.s + f7_1_d_def__.s0.n.n
       let t20071 = max(t19448, x8(0.000000f))
       f7_1_d_def__[ramp(f7_1_d_def__.s0.n.n*8, 1, 8) aligned(8, 0)] = select(t19448 < x8(0.000000f), x8(0.000000f), ((x8(0.000000f) - ((select(x8(batch_size) < ramp((t20070*8) + 1, 1, 8), x8(0.000000f), x8(sum$1_1_d_def__[0]))*((x8(1.000000f)/t20071) - (x8(1.000000f)/(true_runtime[ramp((t20070*8) - true_runtime.min.0, 1, 8)]*x8(1.000000f/t19447)))))*x8(2.000000f)))/(t20071*t20071))*x8(1.000000f/t19447))
      }
      let f7_1_d_def__.s0.n.n.new_max.s = max(min(max((f6_0_d_def__.s0.n.max_1.s/8) - f6_0_d_def__.s0.n.ni.base.s, (((f6_0_d_def__.s0.n.max_1.s + -1)/8) - f6_0_d_def__.s0.n.ni.base.s) + 1), ((f6_0_d_def__.s0.n.max_1.s + 7)/8) - f6_0_d_def__.s0.n.ni.base.s), (f7_1_d_def__.s0.n.n.epilogue.s/8) - f6_0_d_def__.s0.n.ni.base.s)
      let t20648 = max((f7_1_d_def__.s0.n.n.epilogue.s/8) - f6_0_d_def__.s0.n.ni.base.s, 0)
      let t20646 = max(f7_1_d_def__.s0.n.n.new_max.s, 0) - t20648
      for (f7_1_d_def__.s0.n.n, t20648, t20646) {
       if ((((f6_0_d_def__.s0.n.ni.base.s + f7_1_d_def__.s0.n.n)*8) + 8) <= f6_0_d_def__.s0.n.max_1.s) {
        let t19451.s = min(ramp((f6_0_d_def__.s0.n.ni.base.s + f7_1_d_def__.s0.n.n)*8, 1, 8), x8(batch_size + -1))
        let t19452 = true_runtime[t20642]
        let t19453 = f7[max(t19451.s, x8(0)) - x8(t20643)]*x8(1.000000f/t19452)
        let t20072 = max(t19453, x8(0.000000f))
        f7_1_d_def__[ramp(f7_1_d_def__.s0.n.n*8, 1, 8) aligned(8, 0)] = select(t19453 < x8(0.000000f), x8(0.000000f), ((x8(0.000000f) - ((select(x8(batch_size) < ramp(((f6_0_d_def__.s0.n.ni.base.s + f7_1_d_def__.s0.n.n)*8) + 1, 1, 8), x8(0.000000f), x8(sum$1_1_d_def__[0]))*((x8(1.000000f)/t20072) - (x8(1.000000f)/(true_runtime[max(t19451.s, x8(0)) - x8(true_runtime.min.0)]*x8(1.000000f/t19452)))))*x8(2.000000f)))/(t20072*t20072))*x8(1.000000f/t19452))
       } else {
        let f7_1_d_def__.s0.n.ni.new_max.s = f6_0_d_def__.s0.n.max_1.s - ((f6_0_d_def__.s0.n.ni.base.s + f7_1_d_def__.s0.n.n)*8)
        let t20653 = f6_0_d_def__.s0.n.ni.base.s + f7_1_d_def__.s0.n.n
        let t20649 = min(f7_1_d_def__.s0.n.ni.new_max.s, 8)
        let t20652 = f6_0_d_def__.s0.n.ni.base.s*8
        for (f7_1_d_def__.s0.n.ni, 0, t20649) {
         let t19456.s = min((t20653*8) + f7_1_d_def__.s0.n.ni, batch_size + -1)
         let t19457 = true_runtime[t20642]
         let t19458 = f7[max(t19456.s, 0) - t20643]*(1.000000f/t19457)
         let t20074 = max(t19458, 0.000000f)
         f7_1_d_def__[((t20653*8) - t20652) + f7_1_d_def__.s0.n.ni] = select(t19458 < 0.000000f, 0.000000f, ((0.000000f - ((select(batch_size < (((t20653*8) + f7_1_d_def__.s0.n.ni) + 1), 0.000000f, sum$1_1_d_def__[0])*((1.000000f/t20074) - (1.000000f/(true_runtime[max(t19456.s, 0) - true_runtime.min.0]*(1.000000f/t19457)))))*2.000000f))/(t20074*t20074))*(1.000000f/t19457))
        }
       }
      }
     }
     consume f7_1_d_def__ {
      let f6_0_d_def__.s0.w.wi.epilogue.s = num_stages - (f6_0_d_def__.s0.w.wi.base.s*2)
      let t20660 = f6_0_d_def__.s0.n.ni.base.s*8
      let t20661 = f6_0_d_def__.s0.w.wi.base.s*2
      let t20655 = (t20660 + 8) <= batch_size
      let t20654 = max(min(f6_0_d_def__.s0.w.wi.epilogue.s, 2), 0)
      let t20658 = t20661 - f6_0_d_def__.w.min_realized
      let t20659 = batch_size - t20660
      for (f6_0_d_def__.s0.w.wi, 0, t20654) {
       if (t20655) {
        let t20075 = f6_0_d_def__.s0.w.wi + t20661
        f6_0_d_def__[ramp(((f6_0_d_def__.s0.w.wi + t20658)*f6_0_d_def__.n.extent_realized) + t20660, 1, 8)] = select((0 <= t20075) && ((t20075 + 1) <= num_stages), f7_1_d_def__[ramp(0, 1, 8)], x8(0.000000f))
       } else {
        let t20662 = max(min(t20659, 8), 0)
        let t20664 = ((f6_0_d_def__.s0.w.wi + t20658)*f6_0_d_def__.n.extent_realized) + t20660
        let t20663 = f6_0_d_def__.s0.w.wi + t20661
        for (f6_0_d_def__.s0.n.ni, 0, t20662) {
         f6_0_d_def__[f6_0_d_def__.s0.n.ni + t20664] = select((0 <= t20663) && ((t20663 + 1) <= num_stages), f7_1_d_def__[f6_0_d_def__.s0.n.ni], 0.000000f)
        }
       }
      }
     }
     free f7_1_d_def__
    }
   }
  }
 }
 let relu1_0_d_def__.n.extent_realized = min(min(batch_size, 8) + (((batch_size + -1)/8)*8), batch_size)
 let relu1_0_d_def__.w.min_realized.s = select(0 < batch_size, 0, ((((batch_size + 7)/8)*((num_stages + 1)/2)) + -1)/((batch_size + 7)/8))*2
 let relu1_0_d_def__.w.extent_realized.s = let t20077 = (0 < batch_size) in (let t20078 = (((((batch_size + 7)/8)*((num_stages + 1)/2)) + -1)/((batch_size + 7)/8)) in (let t20079 = select(t20077, 0, t20078) in ((num_stages - (min(t20079, 0)*2)) + -1)))
 allocate relu1_0_d_def__[float32 * 32 * (relu1_0_d_def__.w.extent_realized.s + 1) * relu1_0_d_def__.n.extent_realized]
 let relu1_0_d_def__.s0.n.n.n.loop_extent = ((batch_size + 7)/8)*((num_stages + 1)/2)
 produce relu1_0_d_def__ {
  let t20666 = min(relu1_0_d_def__.w.min_realized.s, 0)
  let t20665 = (batch_size + 7)/8
  parallel (relu1_0_d_def__.s0.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
   let relu1_0_d_def__.s0.n.ni.base.s = relu1_0_d_def__.s0.n.n.n % t20665
   let relu1_0_d_def__.s0.w.wi.base.s = relu1_0_d_def__.s0.n.n.n/t20665
   let relu1_0_d_def__.s0.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s0.w.wi.base.s*2)
   let t20672 = relu1_0_d_def__.s0.n.ni.base.s*8
   let t20668 = (t20672 + 8) <= batch_size
   let t20667 = max(min(relu1_0_d_def__.s0.w.wi.epilogue.s, 2), 0)
   let t20670 = (relu1_0_d_def__.s0.w.wi.base.s*2) - t20666
   let t20671 = batch_size - t20672
   for (relu1_0_d_def__.s0.w.wi, 0, t20667) {
    let t20674 = max(min(t20671, 8), 0)
    let t20673 = (((relu1_0_d_def__.s0.w.wi + t20670)*relu1_0_d_def__.n.extent_realized)*32) + t20672
    for (relu1_0_d_def__.s0.c, 0, 32) {
     if (t20668) {
      relu1_0_d_def__[ramp((relu1_0_d_def__.n.extent_realized*relu1_0_d_def__.s0.c) + t20673, 1, 8)] = x8(0.000000f)
     } else {
      let t20675 = (relu1_0_d_def__.n.extent_realized*relu1_0_d_def__.s0.c) + t20673
      for (relu1_0_d_def__.s0.n.ni, 0, t20674) {
       relu1_0_d_def__[relu1_0_d_def__.s0.n.ni + t20675] = 0.000000f
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t20681 = schedule_features.stride.1*21
   let t20682 = schedule_features.min.2*schedule_features.stride.2
   let t20683 = schedule_features.min.1*schedule_features.stride.1
   let t20678 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t20676 = (batch_size + 7)/8
   let t20679 = ((t20681 - t20682) - t20683) - schedule_features.min.0
   let t20680 = (((batch_size + t20681) - t20682) - t20683) - schedule_features.min.0
   parallel (relu1_0_d_def__.s6.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s6.n.ni.base.s = relu1_0_d_def__.s6.n.n.n % t20676
    let relu1_0_d_def__.s6.w.wi.base.s = relu1_0_d_def__.s6.n.n.n/t20676
    let relu1_0_d_def__.s6.w.wi.prologue = 0 - (max(min(relu1_0_d_def__.s6.w.wi.base.s, 0), -1)*2)
    let relu1_0_d_def__.s6.w.wi.epilogue = max(min(num_stages - (relu1_0_d_def__.s6.w.wi.base.s*2), 2), 0 - (max(min(relu1_0_d_def__.s6.w.wi.base.s, 0), -1)*2))
    let relu1_0_d_def__.s6.w.wi.new_max.s = min(num_stages - (relu1_0_d_def__.s6.w.wi.base.s*2), relu1_0_d_def__.s6.w.wi.prologue)
    let t20693 = relu1_0_d_def__.s6.n.ni.base.s*8
    let t20694 = relu1_0_d_def__.s6.w.wi.base.s*2
    let t20685 = (t20693 + 8) <= batch_size
    let t20684 = max(relu1_0_d_def__.s6.w.wi.new_max.s, 0)
    let t20687 = t20694 - t20678
    let t20690 = t20694 - f6_0_d_def__.w.min_realized
    let t20686 = (relu1_0_d_def__.n.extent_realized*27) + t20693
    for (relu1_0_d_def__.s6.w.wi, 0, t20684) {
     if (t20685) {
      let t19468 = (((relu1_0_d_def__.s6.w.wi + t20687)*relu1_0_d_def__.n.extent_realized)*32) + t20686
      relu1_0_d_def__[ramp(t19468, 1, 8)] = relu1_0_d_def__[ramp(t19468, 1, 8)] + ((schedule_features[min(ramp(t20693, 1, 8), x8(batch_size + -1)) + x8((max(relu1_0_d_def__.s6.w.wi + t20694, 0)*schedule_features.stride.2) + t20679)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s6.w.wi + t20690)*f6_0_d_def__.n.extent_realized) + t20693, 1, 8)])*x8(0.000000f))
     } else {
      let t20695 = max(min(batch_size - t20693, 8), 0)
      let t20697 = (max(relu1_0_d_def__.s6.w.wi + t20694, 0)*schedule_features.stride.2) + (t20679 + t20693)
      let t20696 = (((relu1_0_d_def__.s6.w.wi + t20687)*relu1_0_d_def__.n.extent_realized)*32) + t20686
      let t20698 = ((relu1_0_d_def__.s6.w.wi + t20690)*f6_0_d_def__.n.extent_realized) + t20693
      for (relu1_0_d_def__.s6.n.ni, 0, t20695) {
       let t19471 = relu1_0_d_def__.s6.n.ni + t20696
       relu1_0_d_def__[t19471] = relu1_0_d_def__[t19471] + ((schedule_features[relu1_0_d_def__.s6.n.ni + t20697]*f6_0_d_def__[relu1_0_d_def__.s6.n.ni + t20698])*0.000000f)
      }
     }
    }
    let t20708 = relu1_0_d_def__.s6.n.ni.base.s*8
    let t20709 = relu1_0_d_def__.s6.w.wi.base.s*2
    let t20700 = (t20708 + 8) <= batch_size
    let t20702 = t20709 - t20678
    let t20705 = t20709 - f6_0_d_def__.w.min_realized
    let t20699 = relu1_0_d_def__.s6.w.wi.epilogue - relu1_0_d_def__.s6.w.wi.prologue
    let t20701 = (relu1_0_d_def__.n.extent_realized*27) + t20708
    for (relu1_0_d_def__.s6.w.wi, relu1_0_d_def__.s6.w.wi.prologue, t20699) {
     if (t20700) {
      let t19473 = (((relu1_0_d_def__.s6.w.wi + t20702)*relu1_0_d_def__.n.extent_realized)*32) + t20701
      relu1_0_d_def__[ramp(t19473, 1, 8)] = relu1_0_d_def__[ramp(t19473, 1, 8)] + ((schedule_features[min(ramp(t20708, 1, 8), x8(batch_size + -1)) + x8(((relu1_0_d_def__.s6.w.wi + t20709)*schedule_features.stride.2) + t20679)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s6.w.wi + t20705)*f6_0_d_def__.n.extent_realized) + t20708, 1, 8)])*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s6.n.ni.new_max$1.s = batch_size - t20708
      let t20710 = max(min(relu1_0_d_def__.s6.n.ni.new_max$1.s, 8), 0)
      let t20711 = (((relu1_0_d_def__.s6.w.wi + t20702)*relu1_0_d_def__.n.extent_realized)*32) + t20701
      let t20712 = ((relu1_0_d_def__.s6.w.wi + t20709)*schedule_features.stride.2) + (t20679 + t20708)
      let t20713 = ((relu1_0_d_def__.s6.w.wi + t20705)*f6_0_d_def__.n.extent_realized) + t20708
      for (relu1_0_d_def__.s6.n.ni, 0, t20710) {
       let t19476 = relu1_0_d_def__.s6.n.ni + t20711
       relu1_0_d_def__[t19476] = relu1_0_d_def__[t19476] + ((schedule_features[relu1_0_d_def__.s6.n.ni + t20712]*f6_0_d_def__[relu1_0_d_def__.s6.n.ni + t20713])*0.000000f)
      }
      let relu1_0_d_def__.s6.n.ni.new_max$2.s = batch_size - t20708
      let t20719 = max(min(batch_size - t20708, 8), 0)
      let t20715 = max(min(relu1_0_d_def__.s6.n.ni.new_max$2.s, 8), 0) - t20719
      let t20716 = (((relu1_0_d_def__.s6.w.wi + t20702)*relu1_0_d_def__.n.extent_realized)*32) + t20701
      let t20717 = ((relu1_0_d_def__.s6.w.wi + t20709)*schedule_features.stride.2) + t20680
      let t20718 = ((relu1_0_d_def__.s6.w.wi + t20705)*f6_0_d_def__.n.extent_realized) + t20708
      for (relu1_0_d_def__.s6.n.ni, t20719, t20715) {
       let t19479 = relu1_0_d_def__.s6.n.ni + t20716
       relu1_0_d_def__[t19479] = relu1_0_d_def__[t19479] + ((schedule_features[t20717 + -1]*f6_0_d_def__[relu1_0_d_def__.s6.n.ni + t20718])*0.000000f)
      }
     }
    }
    let relu1_0_d_def__.s6.w.wi.new_max$1 = max(min(num_stages - (relu1_0_d_def__.s6.w.wi.base.s*2), 2), relu1_0_d_def__.s6.w.wi.epilogue)
    let t20729 = relu1_0_d_def__.s6.n.ni.base.s*8
    let t20730 = relu1_0_d_def__.s6.w.wi.base.s*2
    let t20721 = (t20729 + 8) <= batch_size
    let t20723 = t20730 - t20678
    let t20726 = t20730 - f6_0_d_def__.w.min_realized
    let t20720 = relu1_0_d_def__.s6.w.wi.new_max$1 - relu1_0_d_def__.s6.w.wi.epilogue
    let t20722 = (relu1_0_d_def__.n.extent_realized*27) + t20729
    for (relu1_0_d_def__.s6.w.wi, relu1_0_d_def__.s6.w.wi.epilogue, t20720) {
     if (t20721) {
      let t19481 = (((relu1_0_d_def__.s6.w.wi + t20723)*relu1_0_d_def__.n.extent_realized)*32) + t20722
      relu1_0_d_def__[ramp(t19481, 1, 8)] = relu1_0_d_def__[ramp(t19481, 1, 8)] + ((schedule_features[min(ramp(t20729, 1, 8), x8(batch_size + -1)) + x8((max(relu1_0_d_def__.s6.w.wi + t20730, 0)*schedule_features.stride.2) + t20679)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s6.w.wi + t20726)*f6_0_d_def__.n.extent_realized) + t20729, 1, 8)])*x8(0.000000f))
     } else {
      let t20731 = max(min(batch_size - t20729, 8), 0)
      let t20733 = (max(relu1_0_d_def__.s6.w.wi + t20730, 0)*schedule_features.stride.2) + (t20679 + t20729)
      let t20732 = (((relu1_0_d_def__.s6.w.wi + t20723)*relu1_0_d_def__.n.extent_realized)*32) + t20722
      let t20734 = ((relu1_0_d_def__.s6.w.wi + t20726)*f6_0_d_def__.n.extent_realized) + t20729
      for (relu1_0_d_def__.s6.n.ni, 0, t20731) {
       let t19484 = relu1_0_d_def__.s6.n.ni + t20732
       relu1_0_d_def__[t19484] = relu1_0_d_def__[t19484] + ((schedule_features[relu1_0_d_def__.s6.n.ni + t20733]*f6_0_d_def__[relu1_0_d_def__.s6.n.ni + t20734])*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t20742 = schedule_features.stride.1*9
   let t20737 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t20735 = (batch_size + 7)/8
   let t20738 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s7.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s7.n.ni.base.s = relu1_0_d_def__.s7.n.n.n % t20735
    let relu1_0_d_def__.s7.w.wi.base.s = relu1_0_d_def__.s7.n.n.n/t20735
    let relu1_0_d_def__.s7.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s7.w.wi.base.s*2)
    let t20757 = relu1_0_d_def__.s7.n.ni.base.s*8
    let t20758 = schedule_features.stride.1 - t20738
    let t20759 = t20742 - t20738
    let t20760 = relu1_0_d_def__.s7.w.wi.base.s*2
    let t20744 = (t20757 + 8) <= batch_size
    let t20743 = max(min(relu1_0_d_def__.s7.w.wi.epilogue.s, 2), 0)
    let t20746 = t20760 - t20737
    let t20751 = t20760 - f6_0_d_def__.w.min_realized
    let t20755 = (batch_size + t20742) - t20738
    let t20756 = (batch_size + schedule_features.stride.1) - t20738
    let t20745 = (relu1_0_d_def__.n.extent_realized*25) + t20757
    for (relu1_0_d_def__.s7.w.wi, 0, t20743) {
     if (t20744) {
      let t19486 = (((relu1_0_d_def__.s7.w.wi + t20746)*relu1_0_d_def__.n.extent_realized)*32) + t20745
      let t19487 = min(ramp(t20757, 1, 8), x8(batch_size + -1))
      let t20080 = max(relu1_0_d_def__.s7.w.wi + t20760, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19486, 1, 8)] = relu1_0_d_def__[ramp(t19486, 1, 8)] + select(x8(1.000000f) < schedule_features[t19487 + x8(t20080 + t20759)], (schedule_features[t19487 + x8(t20080 + t20758)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s7.w.wi + t20751)*f6_0_d_def__.n.extent_realized) + t20757, 1, 8)])*x8(0.000000f), x8(0.000000f))
     } else {
      let relu1_0_d_def__.s7.n.ni.new_max.s = batch_size - t20757
      let t20761 = max(min(relu1_0_d_def__.s7.n.ni.new_max.s, 8), 0)
      let t20763 = max(relu1_0_d_def__.s7.w.wi + t20760, 0)*schedule_features.stride.2
      let t20762 = (((relu1_0_d_def__.s7.w.wi + t20746)*relu1_0_d_def__.n.extent_realized)*32) + t20745
      let t20766 = ((relu1_0_d_def__.s7.w.wi + t20751)*f6_0_d_def__.n.extent_realized) + t20757
      let t20764 = t20757 + t20759
      let t20765 = t20757 + t20758
      for (relu1_0_d_def__.s7.n.ni, 0, t20761) {
       let t19492 = relu1_0_d_def__.s7.n.ni + t20762
       relu1_0_d_def__[t19492] = relu1_0_d_def__[t19492] + select(1.000000f < schedule_features[(t20763 + t20764) + relu1_0_d_def__.s7.n.ni], (schedule_features[(t20763 + t20765) + relu1_0_d_def__.s7.n.ni]*f6_0_d_def__[relu1_0_d_def__.s7.n.ni + t20766])*0.000000f, 0.000000f)
      }
      let relu1_0_d_def__.s7.n.ni.new_max$1.s = batch_size - t20757
      let t20772 = max(min(batch_size - t20757, 8), 0)
      let t20770 = max(relu1_0_d_def__.s7.w.wi + t20760, 0)*schedule_features.stride.2
      let t20768 = max(min(relu1_0_d_def__.s7.n.ni.new_max$1.s, 8), 0) - t20772
      let t20769 = (((relu1_0_d_def__.s7.w.wi + t20746)*relu1_0_d_def__.n.extent_realized)*32) + t20745
      let t20771 = ((relu1_0_d_def__.s7.w.wi + t20751)*f6_0_d_def__.n.extent_realized) + t20757
      for (relu1_0_d_def__.s7.n.ni, t20772, t20768) {
       let t19497 = relu1_0_d_def__.s7.n.ni + t20769
       relu1_0_d_def__[t19497] = relu1_0_d_def__[t19497] + select(1.000000f < schedule_features[(t20755 + t20770) + -1], (schedule_features[(t20756 + t20770) + -1]*f6_0_d_def__[relu1_0_d_def__.s7.n.ni + t20771])*0.000000f, 0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t20780 = schedule_features.stride.1*9
   let t20775 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t20773 = (batch_size + 7)/8
   let t20776 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s8.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s8.n.ni.base.s = relu1_0_d_def__.s8.n.n.n % t20773
    let relu1_0_d_def__.s8.w.wi.base.s = relu1_0_d_def__.s8.n.n.n/t20773
    let relu1_0_d_def__.s8.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s8.w.wi.base.s*2)
    let t20795 = relu1_0_d_def__.s8.n.ni.base.s*8
    let t20796 = schedule_features.stride.1 - t20776
    let t20797 = t20780 - t20776
    let t20798 = relu1_0_d_def__.s8.w.wi.base.s*2
    let t20782 = (t20795 + 8) <= batch_size
    let t20781 = max(min(relu1_0_d_def__.s8.w.wi.epilogue.s, 2), 0)
    let t20784 = t20798 - t20775
    let t20787 = t20798 - f6_0_d_def__.w.min_realized
    let t20794 = (batch_size + t20780) - t20776
    let t20793 = (batch_size + schedule_features.stride.1) - t20776
    let t20783 = (relu1_0_d_def__.n.extent_realized*26) + t20795
    for (relu1_0_d_def__.s8.w.wi, 0, t20781) {
     if (t20782) {
      let t19501 = (((relu1_0_d_def__.s8.w.wi + t20784)*relu1_0_d_def__.n.extent_realized)*32) + t20783
      let t19502 = min(ramp(t20795, 1, 8), x8(batch_size + -1))
      let t20083 = max(relu1_0_d_def__.s8.w.wi + t20798, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19501, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t19501, 1, 8) aligned(2, 0)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s8.w.wi + t20787)*f6_0_d_def__.n.extent_realized) + t20795, 1, 8)]*(schedule_features[t19502 + x8(t20083 + t20796)]*(schedule_features[t19502 + x8(t20083 + t20797)] + x8(-1.000000f))))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s8.n.ni.new_max.s = batch_size - t20795
      let t20799 = max(min(relu1_0_d_def__.s8.n.ni.new_max.s, 8), 0)
      let t20801 = max(relu1_0_d_def__.s8.w.wi + t20798, 0)*schedule_features.stride.2
      let t20800 = (((relu1_0_d_def__.s8.w.wi + t20784)*relu1_0_d_def__.n.extent_realized)*32) + t20783
      let t20802 = ((relu1_0_d_def__.s8.w.wi + t20787)*f6_0_d_def__.n.extent_realized) + t20795
      let t20804 = t20795 + t20797
      let t20803 = t20795 + t20796
      for (relu1_0_d_def__.s8.n.ni, 0, t20799) {
       let t19507 = relu1_0_d_def__.s8.n.ni + t20800
       relu1_0_d_def__[t19507] = relu1_0_d_def__[t19507] + ((f6_0_d_def__[relu1_0_d_def__.s8.n.ni + t20802]*(schedule_features[(t20801 + t20803) + relu1_0_d_def__.s8.n.ni]*(schedule_features[(t20801 + t20804) + relu1_0_d_def__.s8.n.ni] + -1.000000f)))*0.000000f)
      }
      let relu1_0_d_def__.s8.n.ni.new_max$1.s = batch_size - t20795
      let t20810 = max(min(batch_size - t20795, 8), 0)
      let t20808 = max(relu1_0_d_def__.s8.w.wi + t20798, 0)*schedule_features.stride.2
      let t20806 = max(min(relu1_0_d_def__.s8.n.ni.new_max$1.s, 8), 0) - t20810
      let t20807 = (((relu1_0_d_def__.s8.w.wi + t20784)*relu1_0_d_def__.n.extent_realized)*32) + t20783
      let t20809 = ((relu1_0_d_def__.s8.w.wi + t20787)*f6_0_d_def__.n.extent_realized) + t20795
      for (relu1_0_d_def__.s8.n.ni, t20810, t20806) {
       let t19512 = relu1_0_d_def__.s8.n.ni + t20807
       relu1_0_d_def__[t19512] = relu1_0_d_def__[t19512] + ((f6_0_d_def__[relu1_0_d_def__.s8.n.ni + t20809]*(schedule_features[(t20793 + t20808) + -1]*(schedule_features[(t20794 + t20808) + -1] + -1.000000f)))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t20816 = schedule_features.min.2*schedule_features.stride.2
   let t20817 = schedule_features.min.1*schedule_features.stride.1
   let t20813 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t20811 = (batch_size + 7)/8
   let t20815 = ((batch_size - t20816) - t20817) - schedule_features.min.0
   let t20814 = (t20816 + t20817) + schedule_features.min.0
   parallel (relu1_0_d_def__.s9.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s9.n.ni.base.s = relu1_0_d_def__.s9.n.n.n % t20811
    let relu1_0_d_def__.s9.w.wi.base.s = relu1_0_d_def__.s9.n.n.n/t20811
    let relu1_0_d_def__.s9.w.wi.prologue = 0 - (max(min(relu1_0_d_def__.s9.w.wi.base.s, 0), -1)*2)
    let relu1_0_d_def__.s9.w.wi.epilogue = max(min(num_stages - (relu1_0_d_def__.s9.w.wi.base.s*2), 2), 0 - (max(min(relu1_0_d_def__.s9.w.wi.base.s, 0), -1)*2))
    let relu1_0_d_def__.s9.w.wi.new_max.s = min(num_stages - (relu1_0_d_def__.s9.w.wi.base.s*2), relu1_0_d_def__.s9.w.wi.prologue)
    let t20827 = relu1_0_d_def__.s9.n.ni.base.s*8
    let t20828 = relu1_0_d_def__.s9.w.wi.base.s*2
    let t20819 = (t20827 + 8) <= batch_size
    let t20818 = max(relu1_0_d_def__.s9.w.wi.new_max.s, 0)
    let t20820 = ((relu1_0_d_def__.n.extent_realized*3) + relu1_0_d_def__.s9.n.ni.base.s)*8
    let t20821 = t20828 - t20813
    let t20824 = t20828 - f6_0_d_def__.w.min_realized
    for (relu1_0_d_def__.s9.w.wi, 0, t20818) {
     if (t20819) {
      let t19516 = (((relu1_0_d_def__.s9.w.wi + t20821)*relu1_0_d_def__.n.extent_realized)*32) + t20820
      relu1_0_d_def__[ramp(t19516, 1, 8) aligned(8, 0)] = relu1_0_d_def__[ramp(t19516, 1, 8) aligned(8, 0)] + ((schedule_features[min(ramp(t20827, 1, 8), x8(batch_size + -1)) + x8((max(relu1_0_d_def__.s9.w.wi + t20828, 0)*schedule_features.stride.2) - t20814)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s9.w.wi + t20824)*f6_0_d_def__.n.extent_realized) + t20827, 1, 8)])*x8(0.000000f))
     } else {
      let t20829 = max(min(batch_size - t20827, 8), 0)
      let t20831 = (max(relu1_0_d_def__.s9.w.wi + t20828, 0)*schedule_features.stride.2) + (t20827 - t20814)
      let t20830 = (((relu1_0_d_def__.s9.w.wi + t20821)*relu1_0_d_def__.n.extent_realized)*32) + t20820
      let t20832 = ((relu1_0_d_def__.s9.w.wi + t20824)*f6_0_d_def__.n.extent_realized) + t20827
      for (relu1_0_d_def__.s9.n.ni, 0, t20829) {
       let t19519 = relu1_0_d_def__.s9.n.ni + t20830
       relu1_0_d_def__[t19519] = relu1_0_d_def__[t19519] + ((schedule_features[relu1_0_d_def__.s9.n.ni + t20831]*f6_0_d_def__[relu1_0_d_def__.s9.n.ni + t20832])*0.000000f)
      }
     }
    }
    let t20842 = relu1_0_d_def__.s9.n.ni.base.s*8
    let t20843 = relu1_0_d_def__.s9.w.wi.base.s*2
    let t20834 = (t20842 + 8) <= batch_size
    let t20835 = ((relu1_0_d_def__.n.extent_realized*3) + relu1_0_d_def__.s9.n.ni.base.s)*8
    let t20836 = t20843 - t20813
    let t20839 = t20843 - f6_0_d_def__.w.min_realized
    let t20833 = relu1_0_d_def__.s9.w.wi.epilogue - relu1_0_d_def__.s9.w.wi.prologue
    for (relu1_0_d_def__.s9.w.wi, relu1_0_d_def__.s9.w.wi.prologue, t20833) {
     if (t20834) {
      let t19521 = (((relu1_0_d_def__.s9.w.wi + t20836)*relu1_0_d_def__.n.extent_realized)*32) + t20835
      relu1_0_d_def__[ramp(t19521, 1, 8) aligned(8, 0)] = relu1_0_d_def__[ramp(t19521, 1, 8) aligned(8, 0)] + ((schedule_features[min(ramp(t20842, 1, 8), x8(batch_size + -1)) + x8(((relu1_0_d_def__.s9.w.wi + t20843)*schedule_features.stride.2) - t20814)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s9.w.wi + t20839)*f6_0_d_def__.n.extent_realized) + t20842, 1, 8)])*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s9.n.ni.new_max$1.s = batch_size - t20842
      let t20844 = max(min(relu1_0_d_def__.s9.n.ni.new_max$1.s, 8), 0)
      let t20845 = (((relu1_0_d_def__.s9.w.wi + t20836)*relu1_0_d_def__.n.extent_realized)*32) + t20835
      let t20846 = ((relu1_0_d_def__.s9.w.wi + t20843)*schedule_features.stride.2) + (t20842 - t20814)
      let t20847 = ((relu1_0_d_def__.s9.w.wi + t20839)*f6_0_d_def__.n.extent_realized) + t20842
      for (relu1_0_d_def__.s9.n.ni, 0, t20844) {
       let t19524 = relu1_0_d_def__.s9.n.ni + t20845
       relu1_0_d_def__[t19524] = relu1_0_d_def__[t19524] + ((schedule_features[relu1_0_d_def__.s9.n.ni + t20846]*f6_0_d_def__[relu1_0_d_def__.s9.n.ni + t20847])*0.000000f)
      }
      let relu1_0_d_def__.s9.n.ni.new_max$2.s = batch_size - t20842
      let t20853 = max(min(batch_size - t20842, 8), 0)
      let t20849 = max(min(relu1_0_d_def__.s9.n.ni.new_max$2.s, 8), 0) - t20853
      let t20850 = (((relu1_0_d_def__.s9.w.wi + t20836)*relu1_0_d_def__.n.extent_realized)*32) + t20835
      let t20851 = ((relu1_0_d_def__.s9.w.wi + t20843)*schedule_features.stride.2) + t20815
      let t20852 = ((relu1_0_d_def__.s9.w.wi + t20839)*f6_0_d_def__.n.extent_realized) + t20842
      for (relu1_0_d_def__.s9.n.ni, t20853, t20849) {
       let t19527 = relu1_0_d_def__.s9.n.ni + t20850
       relu1_0_d_def__[t19527] = relu1_0_d_def__[t19527] + ((schedule_features[t20851 + -1]*f6_0_d_def__[relu1_0_d_def__.s9.n.ni + t20852])*0.000000f)
      }
     }
    }
    let relu1_0_d_def__.s9.w.wi.new_max$1 = max(min(num_stages - (relu1_0_d_def__.s9.w.wi.base.s*2), 2), relu1_0_d_def__.s9.w.wi.epilogue)
    let t20863 = relu1_0_d_def__.s9.n.ni.base.s*8
    let t20864 = relu1_0_d_def__.s9.w.wi.base.s*2
    let t20855 = (t20863 + 8) <= batch_size
    let t20856 = ((relu1_0_d_def__.n.extent_realized*3) + relu1_0_d_def__.s9.n.ni.base.s)*8
    let t20857 = t20864 - t20813
    let t20860 = t20864 - f6_0_d_def__.w.min_realized
    let t20854 = relu1_0_d_def__.s9.w.wi.new_max$1 - relu1_0_d_def__.s9.w.wi.epilogue
    for (relu1_0_d_def__.s9.w.wi, relu1_0_d_def__.s9.w.wi.epilogue, t20854) {
     if (t20855) {
      let t19529 = (((relu1_0_d_def__.s9.w.wi + t20857)*relu1_0_d_def__.n.extent_realized)*32) + t20856
      relu1_0_d_def__[ramp(t19529, 1, 8) aligned(8, 0)] = relu1_0_d_def__[ramp(t19529, 1, 8) aligned(8, 0)] + ((schedule_features[min(ramp(t20863, 1, 8), x8(batch_size + -1)) + x8((max(relu1_0_d_def__.s9.w.wi + t20864, 0)*schedule_features.stride.2) - t20814)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s9.w.wi + t20860)*f6_0_d_def__.n.extent_realized) + t20863, 1, 8)])*x8(0.000000f))
     } else {
      let t20865 = max(min(batch_size - t20863, 8), 0)
      let t20867 = (max(relu1_0_d_def__.s9.w.wi + t20864, 0)*schedule_features.stride.2) + (t20863 - t20814)
      let t20866 = (((relu1_0_d_def__.s9.w.wi + t20857)*relu1_0_d_def__.n.extent_realized)*32) + t20856
      let t20868 = ((relu1_0_d_def__.s9.w.wi + t20860)*f6_0_d_def__.n.extent_realized) + t20863
      for (relu1_0_d_def__.s9.n.ni, 0, t20865) {
       let t19532 = relu1_0_d_def__.s9.n.ni + t20866
       relu1_0_d_def__[t19532] = relu1_0_d_def__[t19532] + ((schedule_features[relu1_0_d_def__.s9.n.ni + t20867]*f6_0_d_def__[relu1_0_d_def__.s9.n.ni + t20868])*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t20879 = schedule_features.stride.1*9
   let t20880 = schedule_features.stride.1*10
   let t20881 = schedule_features.stride.1*34
   let t20871 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t20869 = (batch_size + 7)/8
   let t20872 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s10.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s10.n.ni.base.s = relu1_0_d_def__.s10.n.n.n % t20869
    let relu1_0_d_def__.s10.w.wi.base.s = relu1_0_d_def__.s10.n.n.n/t20869
    let relu1_0_d_def__.s10.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s10.w.wi.base.s*2)
    let t20899 = relu1_0_d_def__.s10.n.ni.base.s*8
    let t20900 = t20879 - t20872
    let t20901 = t20880 - t20872
    let t20902 = t20881 - t20872
    let t20903 = relu1_0_d_def__.s10.w.wi.base.s*2
    let t20883 = (t20899 + 8) <= batch_size
    let t20882 = max(min(relu1_0_d_def__.s10.w.wi.epilogue.s, 2), 0)
    let t20885 = t20903 - t20871
    let t20888 = t20903 - f6_0_d_def__.w.min_realized
    let t20896 = (batch_size + t20881) - t20872
    let t20898 = (batch_size + t20880) - t20872
    let t20897 = (batch_size + t20879) - t20872
    let t20884 = (relu1_0_d_def__.n.extent_realized*15) + t20899
    for (relu1_0_d_def__.s10.w.wi, 0, t20882) {
     if (t20883) {
      let t19534 = (((relu1_0_d_def__.s10.w.wi + t20885)*relu1_0_d_def__.n.extent_realized)*32) + t20884
      let t19535 = min(ramp(t20899, 1, 8), x8(batch_size + -1))
      let t20086 = max(relu1_0_d_def__.s10.w.wi + t20903, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19534, 1, 8)] = relu1_0_d_def__[ramp(t19534, 1, 8)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s10.w.wi + t20888)*f6_0_d_def__.n.extent_realized) + t20899, 1, 8)]*(schedule_features[t19535 + x8(t20086 + t20902)]*max(schedule_features[t19535 + x8(t20086 + t20900)]*schedule_features[t19535 + x8(t20086 + t20901)], x8(1.000000f))))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s10.n.ni.new_max.s = batch_size - t20899
      let t20904 = max(min(relu1_0_d_def__.s10.n.ni.new_max.s, 8), 0)
      let t20906 = max(relu1_0_d_def__.s10.w.wi + t20903, 0)*schedule_features.stride.2
      let t20905 = (((relu1_0_d_def__.s10.w.wi + t20885)*relu1_0_d_def__.n.extent_realized)*32) + t20884
      let t20907 = ((relu1_0_d_def__.s10.w.wi + t20888)*f6_0_d_def__.n.extent_realized) + t20899
      let t20908 = t20899 + t20902
      let t20910 = t20899 + t20901
      let t20909 = t20899 + t20900
      for (relu1_0_d_def__.s10.n.ni, 0, t20904) {
       let t19540 = relu1_0_d_def__.s10.n.ni + t20905
       relu1_0_d_def__[t19540] = relu1_0_d_def__[t19540] + ((f6_0_d_def__[relu1_0_d_def__.s10.n.ni + t20907]*(schedule_features[(t20906 + t20908) + relu1_0_d_def__.s10.n.ni]*max(schedule_features[(t20906 + t20909) + relu1_0_d_def__.s10.n.ni]*schedule_features[(t20906 + t20910) + relu1_0_d_def__.s10.n.ni], 1.000000f)))*0.000000f)
      }
      let relu1_0_d_def__.s10.n.ni.new_max$1.s = batch_size - t20899
      let t20916 = max(min(batch_size - t20899, 8), 0)
      let t20914 = max(relu1_0_d_def__.s10.w.wi + t20903, 0)*schedule_features.stride.2
      let t20912 = max(min(relu1_0_d_def__.s10.n.ni.new_max$1.s, 8), 0) - t20916
      let t20913 = (((relu1_0_d_def__.s10.w.wi + t20885)*relu1_0_d_def__.n.extent_realized)*32) + t20884
      let t20915 = ((relu1_0_d_def__.s10.w.wi + t20888)*f6_0_d_def__.n.extent_realized) + t20899
      for (relu1_0_d_def__.s10.n.ni, t20916, t20912) {
       let t19545 = relu1_0_d_def__.s10.n.ni + t20913
       relu1_0_d_def__[t19545] = relu1_0_d_def__[t19545] + ((f6_0_d_def__[relu1_0_d_def__.s10.n.ni + t20915]*(schedule_features[(t20896 + t20914) + -1]*max(schedule_features[(t20897 + t20914) + -1]*schedule_features[(t20898 + t20914) + -1], 1.000000f)))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t20927 = schedule_features.stride.1*9
   let t20928 = schedule_features.stride.1*10
   let t20929 = schedule_features.stride.1*33
   let t20919 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t20917 = (batch_size + 7)/8
   let t20920 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s11.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s11.n.ni.base.s = relu1_0_d_def__.s11.n.n.n % t20917
    let relu1_0_d_def__.s11.w.wi.base.s = relu1_0_d_def__.s11.n.n.n/t20917
    let relu1_0_d_def__.s11.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s11.w.wi.base.s*2)
    let t20947 = relu1_0_d_def__.s11.n.ni.base.s*8
    let t20948 = t20927 - t20920
    let t20949 = t20928 - t20920
    let t20950 = t20929 - t20920
    let t20951 = relu1_0_d_def__.s11.w.wi.base.s*2
    let t20931 = (t20947 + 8) <= batch_size
    let t20930 = max(min(relu1_0_d_def__.s11.w.wi.epilogue.s, 2), 0)
    let t20933 = t20951 - t20919
    let t20936 = t20951 - f6_0_d_def__.w.min_realized
    let t20944 = (batch_size + t20929) - t20920
    let t20946 = (batch_size + t20928) - t20920
    let t20945 = (batch_size + t20927) - t20920
    let t20932 = (relu1_0_d_def__.n.extent_realized*14) + t20947
    for (relu1_0_d_def__.s11.w.wi, 0, t20930) {
     if (t20931) {
      let t19549 = (((relu1_0_d_def__.s11.w.wi + t20933)*relu1_0_d_def__.n.extent_realized)*32) + t20932
      let t19550 = min(ramp(t20947, 1, 8), x8(batch_size + -1))
      let t20089 = max(relu1_0_d_def__.s11.w.wi + t20951, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19549, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t19549, 1, 8) aligned(2, 0)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s11.w.wi + t20936)*f6_0_d_def__.n.extent_realized) + t20947, 1, 8)]*(schedule_features[t19550 + x8(t20089 + t20950)]*max(schedule_features[t19550 + x8(t20089 + t20948)]*schedule_features[t19550 + x8(t20089 + t20949)], x8(1.000000f))))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s11.n.ni.new_max.s = batch_size - t20947
      let t20952 = max(min(relu1_0_d_def__.s11.n.ni.new_max.s, 8), 0)
      let t20954 = max(relu1_0_d_def__.s11.w.wi + t20951, 0)*schedule_features.stride.2
      let t20953 = (((relu1_0_d_def__.s11.w.wi + t20933)*relu1_0_d_def__.n.extent_realized)*32) + t20932
      let t20955 = ((relu1_0_d_def__.s11.w.wi + t20936)*f6_0_d_def__.n.extent_realized) + t20947
      let t20956 = t20947 + t20950
      let t20958 = t20947 + t20949
      let t20957 = t20947 + t20948
      for (relu1_0_d_def__.s11.n.ni, 0, t20952) {
       let t19555 = relu1_0_d_def__.s11.n.ni + t20953
       relu1_0_d_def__[t19555] = relu1_0_d_def__[t19555] + ((f6_0_d_def__[relu1_0_d_def__.s11.n.ni + t20955]*(schedule_features[(t20954 + t20956) + relu1_0_d_def__.s11.n.ni]*max(schedule_features[(t20954 + t20957) + relu1_0_d_def__.s11.n.ni]*schedule_features[(t20954 + t20958) + relu1_0_d_def__.s11.n.ni], 1.000000f)))*0.000000f)
      }
      let relu1_0_d_def__.s11.n.ni.new_max$1.s = batch_size - t20947
      let t20964 = max(min(batch_size - t20947, 8), 0)
      let t20962 = max(relu1_0_d_def__.s11.w.wi + t20951, 0)*schedule_features.stride.2
      let t20960 = max(min(relu1_0_d_def__.s11.n.ni.new_max$1.s, 8), 0) - t20964
      let t20961 = (((relu1_0_d_def__.s11.w.wi + t20933)*relu1_0_d_def__.n.extent_realized)*32) + t20932
      let t20963 = ((relu1_0_d_def__.s11.w.wi + t20936)*f6_0_d_def__.n.extent_realized) + t20947
      for (relu1_0_d_def__.s11.n.ni, t20964, t20960) {
       let t19560 = relu1_0_d_def__.s11.n.ni + t20961
       relu1_0_d_def__[t19560] = relu1_0_d_def__[t19560] + ((f6_0_d_def__[relu1_0_d_def__.s11.n.ni + t20963]*(schedule_features[(t20944 + t20962) + -1]*max(schedule_features[(t20945 + t20962) + -1]*schedule_features[(t20946 + t20962) + -1], 1.000000f)))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t20973 = schedule_features.stride.1*24
   let t20974 = schedule_features.stride.1*32
   let t20967 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t20965 = (batch_size + 7)/8
   let t20968 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s12.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s12.n.ni.base.s = relu1_0_d_def__.s12.n.n.n % t20965
    let relu1_0_d_def__.s12.w.wi.base.s = relu1_0_d_def__.s12.n.n.n/t20965
    let relu1_0_d_def__.s12.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s12.w.wi.base.s*2)
    let t20989 = relu1_0_d_def__.s12.n.ni.base.s*8
    let t20990 = t20973 - t20968
    let t20991 = t20974 - t20968
    let t20992 = relu1_0_d_def__.s12.w.wi.base.s*2
    let t20976 = (t20989 + 8) <= batch_size
    let t20975 = max(min(relu1_0_d_def__.s12.w.wi.epilogue.s, 2), 0)
    let t20978 = t20992 - t20967
    let t20981 = t20992 - f6_0_d_def__.w.min_realized
    let t20988 = (batch_size + t20974) - t20968
    let t20987 = (batch_size + t20973) - t20968
    let t20977 = (relu1_0_d_def__.n.extent_realized*13) + t20989
    for (relu1_0_d_def__.s12.w.wi, 0, t20975) {
     if (t20976) {
      let t19564 = (((relu1_0_d_def__.s12.w.wi + t20978)*relu1_0_d_def__.n.extent_realized)*32) + t20977
      let t19565 = min(ramp(t20989, 1, 8), x8(batch_size + -1))
      let t20092 = max(relu1_0_d_def__.s12.w.wi + t20992, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19564, 1, 8)] = relu1_0_d_def__[ramp(t19564, 1, 8)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s12.w.wi + t20981)*f6_0_d_def__.n.extent_realized) + t20989, 1, 8)]*(schedule_features[t19565 + x8(t20092 + t20990)]*schedule_features[t19565 + x8(t20092 + t20991)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s12.n.ni.new_max.s = batch_size - t20989
      let t20993 = max(min(relu1_0_d_def__.s12.n.ni.new_max.s, 8), 0)
      let t20995 = max(relu1_0_d_def__.s12.w.wi + t20992, 0)*schedule_features.stride.2
      let t20994 = (((relu1_0_d_def__.s12.w.wi + t20978)*relu1_0_d_def__.n.extent_realized)*32) + t20977
      let t20996 = ((relu1_0_d_def__.s12.w.wi + t20981)*f6_0_d_def__.n.extent_realized) + t20989
      let t20998 = t20989 + t20991
      let t20997 = t20989 + t20990
      for (relu1_0_d_def__.s12.n.ni, 0, t20993) {
       let t19570 = relu1_0_d_def__.s12.n.ni + t20994
       relu1_0_d_def__[t19570] = relu1_0_d_def__[t19570] + ((f6_0_d_def__[relu1_0_d_def__.s12.n.ni + t20996]*(schedule_features[(t20995 + t20997) + relu1_0_d_def__.s12.n.ni]*schedule_features[(t20995 + t20998) + relu1_0_d_def__.s12.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s12.n.ni.new_max$1.s = batch_size - t20989
      let t21004 = max(min(batch_size - t20989, 8), 0)
      let t21002 = max(relu1_0_d_def__.s12.w.wi + t20992, 0)*schedule_features.stride.2
      let t21000 = max(min(relu1_0_d_def__.s12.n.ni.new_max$1.s, 8), 0) - t21004
      let t21001 = (((relu1_0_d_def__.s12.w.wi + t20978)*relu1_0_d_def__.n.extent_realized)*32) + t20977
      let t21003 = ((relu1_0_d_def__.s12.w.wi + t20981)*f6_0_d_def__.n.extent_realized) + t20989
      for (relu1_0_d_def__.s12.n.ni, t21004, t21000) {
       let t19575 = relu1_0_d_def__.s12.n.ni + t21001
       relu1_0_d_def__[t19575] = relu1_0_d_def__[t19575] + ((f6_0_d_def__[relu1_0_d_def__.s12.n.ni + t21003]*(schedule_features[(t20987 + t21002) + -1]*schedule_features[(t20988 + t21002) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21013 = schedule_features.stride.1*25
   let t21014 = schedule_features.stride.1*32
   let t21007 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21005 = (batch_size + 7)/8
   let t21008 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s13.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s13.n.ni.base.s = relu1_0_d_def__.s13.n.n.n % t21005
    let relu1_0_d_def__.s13.w.wi.base.s = relu1_0_d_def__.s13.n.n.n/t21005
    let relu1_0_d_def__.s13.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s13.w.wi.base.s*2)
    let t21029 = relu1_0_d_def__.s13.n.ni.base.s*8
    let t21030 = t21013 - t21008
    let t21031 = t21014 - t21008
    let t21032 = relu1_0_d_def__.s13.w.wi.base.s*2
    let t21016 = (t21029 + 8) <= batch_size
    let t21015 = max(min(relu1_0_d_def__.s13.w.wi.epilogue.s, 2), 0)
    let t21018 = t21032 - t21007
    let t21021 = t21032 - f6_0_d_def__.w.min_realized
    let t21028 = (batch_size + t21014) - t21008
    let t21027 = (batch_size + t21013) - t21008
    let t21017 = (relu1_0_d_def__.n.extent_realized*12) + t21029
    for (relu1_0_d_def__.s13.w.wi, 0, t21015) {
     if (t21016) {
      let t19579 = (((relu1_0_d_def__.s13.w.wi + t21018)*relu1_0_d_def__.n.extent_realized)*32) + t21017
      let t19580 = min(ramp(t21029, 1, 8), x8(batch_size + -1))
      let t20095 = max(relu1_0_d_def__.s13.w.wi + t21032, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19579, 1, 8) aligned(4, 0)] = relu1_0_d_def__[ramp(t19579, 1, 8) aligned(4, 0)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s13.w.wi + t21021)*f6_0_d_def__.n.extent_realized) + t21029, 1, 8)]*(schedule_features[t19580 + x8(t20095 + t21030)]*schedule_features[t19580 + x8(t20095 + t21031)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s13.n.ni.new_max.s = batch_size - t21029
      let t21033 = max(min(relu1_0_d_def__.s13.n.ni.new_max.s, 8), 0)
      let t21035 = max(relu1_0_d_def__.s13.w.wi + t21032, 0)*schedule_features.stride.2
      let t21034 = (((relu1_0_d_def__.s13.w.wi + t21018)*relu1_0_d_def__.n.extent_realized)*32) + t21017
      let t21036 = ((relu1_0_d_def__.s13.w.wi + t21021)*f6_0_d_def__.n.extent_realized) + t21029
      let t21038 = t21029 + t21031
      let t21037 = t21029 + t21030
      for (relu1_0_d_def__.s13.n.ni, 0, t21033) {
       let t19585 = relu1_0_d_def__.s13.n.ni + t21034
       relu1_0_d_def__[t19585] = relu1_0_d_def__[t19585] + ((f6_0_d_def__[relu1_0_d_def__.s13.n.ni + t21036]*(schedule_features[(t21035 + t21037) + relu1_0_d_def__.s13.n.ni]*schedule_features[(t21035 + t21038) + relu1_0_d_def__.s13.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s13.n.ni.new_max$1.s = batch_size - t21029
      let t21044 = max(min(batch_size - t21029, 8), 0)
      let t21042 = max(relu1_0_d_def__.s13.w.wi + t21032, 0)*schedule_features.stride.2
      let t21040 = max(min(relu1_0_d_def__.s13.n.ni.new_max$1.s, 8), 0) - t21044
      let t21041 = (((relu1_0_d_def__.s13.w.wi + t21018)*relu1_0_d_def__.n.extent_realized)*32) + t21017
      let t21043 = ((relu1_0_d_def__.s13.w.wi + t21021)*f6_0_d_def__.n.extent_realized) + t21029
      for (relu1_0_d_def__.s13.n.ni, t21044, t21040) {
       let t19590 = relu1_0_d_def__.s13.n.ni + t21041
       relu1_0_d_def__[t19590] = relu1_0_d_def__[t19590] + ((f6_0_d_def__[relu1_0_d_def__.s13.n.ni + t21043]*(schedule_features[(t21027 + t21042) + -1]*schedule_features[(t21028 + t21042) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21053 = schedule_features.stride.1*24
   let t21054 = schedule_features.stride.1*31
   let t21047 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21045 = (batch_size + 7)/8
   let t21048 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s14.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s14.n.ni.base.s = relu1_0_d_def__.s14.n.n.n % t21045
    let relu1_0_d_def__.s14.w.wi.base.s = relu1_0_d_def__.s14.n.n.n/t21045
    let relu1_0_d_def__.s14.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s14.w.wi.base.s*2)
    let t21069 = relu1_0_d_def__.s14.n.ni.base.s*8
    let t21070 = t21053 - t21048
    let t21071 = t21054 - t21048
    let t21072 = relu1_0_d_def__.s14.w.wi.base.s*2
    let t21056 = (t21069 + 8) <= batch_size
    let t21055 = max(min(relu1_0_d_def__.s14.w.wi.epilogue.s, 2), 0)
    let t21058 = t21072 - t21047
    let t21061 = t21072 - f6_0_d_def__.w.min_realized
    let t21068 = (batch_size + t21054) - t21048
    let t21067 = (batch_size + t21053) - t21048
    let t21057 = (relu1_0_d_def__.n.extent_realized*11) + t21069
    for (relu1_0_d_def__.s14.w.wi, 0, t21055) {
     if (t21056) {
      let t19594 = (((relu1_0_d_def__.s14.w.wi + t21058)*relu1_0_d_def__.n.extent_realized)*32) + t21057
      let t19595 = min(ramp(t21069, 1, 8), x8(batch_size + -1))
      let t20098 = max(relu1_0_d_def__.s14.w.wi + t21072, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19594, 1, 8)] = relu1_0_d_def__[ramp(t19594, 1, 8)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s14.w.wi + t21061)*f6_0_d_def__.n.extent_realized) + t21069, 1, 8)]*(schedule_features[t19595 + x8(t20098 + t21070)]*schedule_features[t19595 + x8(t20098 + t21071)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s14.n.ni.new_max.s = batch_size - t21069
      let t21073 = max(min(relu1_0_d_def__.s14.n.ni.new_max.s, 8), 0)
      let t21075 = max(relu1_0_d_def__.s14.w.wi + t21072, 0)*schedule_features.stride.2
      let t21074 = (((relu1_0_d_def__.s14.w.wi + t21058)*relu1_0_d_def__.n.extent_realized)*32) + t21057
      let t21076 = ((relu1_0_d_def__.s14.w.wi + t21061)*f6_0_d_def__.n.extent_realized) + t21069
      let t21078 = t21069 + t21071
      let t21077 = t21069 + t21070
      for (relu1_0_d_def__.s14.n.ni, 0, t21073) {
       let t19600 = relu1_0_d_def__.s14.n.ni + t21074
       relu1_0_d_def__[t19600] = relu1_0_d_def__[t19600] + ((f6_0_d_def__[relu1_0_d_def__.s14.n.ni + t21076]*(schedule_features[(t21075 + t21077) + relu1_0_d_def__.s14.n.ni]*schedule_features[(t21075 + t21078) + relu1_0_d_def__.s14.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s14.n.ni.new_max$1.s = batch_size - t21069
      let t21084 = max(min(batch_size - t21069, 8), 0)
      let t21082 = max(relu1_0_d_def__.s14.w.wi + t21072, 0)*schedule_features.stride.2
      let t21080 = max(min(relu1_0_d_def__.s14.n.ni.new_max$1.s, 8), 0) - t21084
      let t21081 = (((relu1_0_d_def__.s14.w.wi + t21058)*relu1_0_d_def__.n.extent_realized)*32) + t21057
      let t21083 = ((relu1_0_d_def__.s14.w.wi + t21061)*f6_0_d_def__.n.extent_realized) + t21069
      for (relu1_0_d_def__.s14.n.ni, t21084, t21080) {
       let t19605 = relu1_0_d_def__.s14.n.ni + t21081
       relu1_0_d_def__[t19605] = relu1_0_d_def__[t19605] + ((f6_0_d_def__[relu1_0_d_def__.s14.n.ni + t21083]*(schedule_features[(t21067 + t21082) + -1]*schedule_features[(t21068 + t21082) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21093 = schedule_features.stride.1*25
   let t21094 = schedule_features.stride.1*31
   let t21087 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21085 = (batch_size + 7)/8
   let t21088 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s15.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s15.n.ni.base.s = relu1_0_d_def__.s15.n.n.n % t21085
    let relu1_0_d_def__.s15.w.wi.base.s = relu1_0_d_def__.s15.n.n.n/t21085
    let relu1_0_d_def__.s15.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s15.w.wi.base.s*2)
    let t21109 = relu1_0_d_def__.s15.n.ni.base.s*8
    let t21110 = t21093 - t21088
    let t21111 = t21094 - t21088
    let t21112 = relu1_0_d_def__.s15.w.wi.base.s*2
    let t21096 = (t21109 + 8) <= batch_size
    let t21095 = max(min(relu1_0_d_def__.s15.w.wi.epilogue.s, 2), 0)
    let t21098 = t21112 - t21087
    let t21101 = t21112 - f6_0_d_def__.w.min_realized
    let t21108 = (batch_size + t21094) - t21088
    let t21107 = (batch_size + t21093) - t21088
    let t21097 = (relu1_0_d_def__.n.extent_realized*10) + t21109
    for (relu1_0_d_def__.s15.w.wi, 0, t21095) {
     if (t21096) {
      let t19609 = (((relu1_0_d_def__.s15.w.wi + t21098)*relu1_0_d_def__.n.extent_realized)*32) + t21097
      let t19610 = min(ramp(t21109, 1, 8), x8(batch_size + -1))
      let t20101 = max(relu1_0_d_def__.s15.w.wi + t21112, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19609, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t19609, 1, 8) aligned(2, 0)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s15.w.wi + t21101)*f6_0_d_def__.n.extent_realized) + t21109, 1, 8)]*(schedule_features[t19610 + x8(t20101 + t21110)]*schedule_features[t19610 + x8(t20101 + t21111)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s15.n.ni.new_max.s = batch_size - t21109
      let t21113 = max(min(relu1_0_d_def__.s15.n.ni.new_max.s, 8), 0)
      let t21115 = max(relu1_0_d_def__.s15.w.wi + t21112, 0)*schedule_features.stride.2
      let t21114 = (((relu1_0_d_def__.s15.w.wi + t21098)*relu1_0_d_def__.n.extent_realized)*32) + t21097
      let t21116 = ((relu1_0_d_def__.s15.w.wi + t21101)*f6_0_d_def__.n.extent_realized) + t21109
      let t21118 = t21109 + t21111
      let t21117 = t21109 + t21110
      for (relu1_0_d_def__.s15.n.ni, 0, t21113) {
       let t19615 = relu1_0_d_def__.s15.n.ni + t21114
       relu1_0_d_def__[t19615] = relu1_0_d_def__[t19615] + ((f6_0_d_def__[relu1_0_d_def__.s15.n.ni + t21116]*(schedule_features[(t21115 + t21117) + relu1_0_d_def__.s15.n.ni]*schedule_features[(t21115 + t21118) + relu1_0_d_def__.s15.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s15.n.ni.new_max$1.s = batch_size - t21109
      let t21124 = max(min(batch_size - t21109, 8), 0)
      let t21122 = max(relu1_0_d_def__.s15.w.wi + t21112, 0)*schedule_features.stride.2
      let t21120 = max(min(relu1_0_d_def__.s15.n.ni.new_max$1.s, 8), 0) - t21124
      let t21121 = (((relu1_0_d_def__.s15.w.wi + t21098)*relu1_0_d_def__.n.extent_realized)*32) + t21097
      let t21123 = ((relu1_0_d_def__.s15.w.wi + t21101)*f6_0_d_def__.n.extent_realized) + t21109
      for (relu1_0_d_def__.s15.n.ni, t21124, t21120) {
       let t19620 = relu1_0_d_def__.s15.n.ni + t21121
       relu1_0_d_def__[t19620] = relu1_0_d_def__[t19620] + ((f6_0_d_def__[relu1_0_d_def__.s15.n.ni + t21123]*(schedule_features[(t21107 + t21122) + -1]*schedule_features[(t21108 + t21122) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21133 = schedule_features.stride.1*24
   let t21134 = schedule_features.stride.1*27
   let t21127 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21125 = (batch_size + 7)/8
   let t21128 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s16.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s16.n.ni.base.s = relu1_0_d_def__.s16.n.n.n % t21125
    let relu1_0_d_def__.s16.w.wi.base.s = relu1_0_d_def__.s16.n.n.n/t21125
    let relu1_0_d_def__.s16.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s16.w.wi.base.s*2)
    let t21149 = relu1_0_d_def__.s16.n.ni.base.s*8
    let t21150 = t21133 - t21128
    let t21151 = t21134 - t21128
    let t21152 = relu1_0_d_def__.s16.w.wi.base.s*2
    let t21136 = (t21149 + 8) <= batch_size
    let t21135 = max(min(relu1_0_d_def__.s16.w.wi.epilogue.s, 2), 0)
    let t21138 = t21152 - t21127
    let t21141 = t21152 - f6_0_d_def__.w.min_realized
    let t21148 = (batch_size + t21134) - t21128
    let t21147 = (batch_size + t21133) - t21128
    let t21137 = (relu1_0_d_def__.n.extent_realized*9) + t21149
    for (relu1_0_d_def__.s16.w.wi, 0, t21135) {
     if (t21136) {
      let t19624 = (((relu1_0_d_def__.s16.w.wi + t21138)*relu1_0_d_def__.n.extent_realized)*32) + t21137
      let t19625 = min(ramp(t21149, 1, 8), x8(batch_size + -1))
      let t20104 = max(relu1_0_d_def__.s16.w.wi + t21152, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19624, 1, 8)] = relu1_0_d_def__[ramp(t19624, 1, 8)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s16.w.wi + t21141)*f6_0_d_def__.n.extent_realized) + t21149, 1, 8)]*(schedule_features[t19625 + x8(t20104 + t21150)]*schedule_features[t19625 + x8(t20104 + t21151)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s16.n.ni.new_max.s = batch_size - t21149
      let t21153 = max(min(relu1_0_d_def__.s16.n.ni.new_max.s, 8), 0)
      let t21155 = max(relu1_0_d_def__.s16.w.wi + t21152, 0)*schedule_features.stride.2
      let t21154 = (((relu1_0_d_def__.s16.w.wi + t21138)*relu1_0_d_def__.n.extent_realized)*32) + t21137
      let t21156 = ((relu1_0_d_def__.s16.w.wi + t21141)*f6_0_d_def__.n.extent_realized) + t21149
      let t21158 = t21149 + t21151
      let t21157 = t21149 + t21150
      for (relu1_0_d_def__.s16.n.ni, 0, t21153) {
       let t19630 = relu1_0_d_def__.s16.n.ni + t21154
       relu1_0_d_def__[t19630] = relu1_0_d_def__[t19630] + ((f6_0_d_def__[relu1_0_d_def__.s16.n.ni + t21156]*(schedule_features[(t21155 + t21157) + relu1_0_d_def__.s16.n.ni]*schedule_features[(t21155 + t21158) + relu1_0_d_def__.s16.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s16.n.ni.new_max$1.s = batch_size - t21149
      let t21164 = max(min(batch_size - t21149, 8), 0)
      let t21162 = max(relu1_0_d_def__.s16.w.wi + t21152, 0)*schedule_features.stride.2
      let t21160 = max(min(relu1_0_d_def__.s16.n.ni.new_max$1.s, 8), 0) - t21164
      let t21161 = (((relu1_0_d_def__.s16.w.wi + t21138)*relu1_0_d_def__.n.extent_realized)*32) + t21137
      let t21163 = ((relu1_0_d_def__.s16.w.wi + t21141)*f6_0_d_def__.n.extent_realized) + t21149
      for (relu1_0_d_def__.s16.n.ni, t21164, t21160) {
       let t19635 = relu1_0_d_def__.s16.n.ni + t21161
       relu1_0_d_def__[t19635] = relu1_0_d_def__[t19635] + ((f6_0_d_def__[relu1_0_d_def__.s16.n.ni + t21163]*(schedule_features[(t21147 + t21162) + -1]*schedule_features[(t21148 + t21162) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21172 = schedule_features.stride.1*25
   let t21173 = schedule_features.stride.1*28
   let t21166 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21165 = (batch_size + 7)/8
   let t21167 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s17.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s17.n.ni.base.s = relu1_0_d_def__.s17.n.n.n % t21165
    let relu1_0_d_def__.s17.w.wi.base.s = relu1_0_d_def__.s17.n.n.n/t21165
    let relu1_0_d_def__.s17.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s17.w.wi.base.s*2)
    let t21188 = relu1_0_d_def__.s17.n.ni.base.s*8
    let t21189 = t21172 - t21167
    let t21190 = t21173 - t21167
    let t21191 = relu1_0_d_def__.s17.w.wi.base.s*2
    let t21175 = (t21188 + 8) <= batch_size
    let t21174 = max(min(relu1_0_d_def__.s17.w.wi.epilogue.s, 2), 0)
    let t21176 = t21191 - t21166
    let t21180 = t21191 - f6_0_d_def__.w.min_realized
    let t21187 = (batch_size + t21173) - t21167
    let t21186 = (batch_size + t21172) - t21167
    let t21178 = relu1_0_d_def__.n.extent_realized + relu1_0_d_def__.s17.n.ni.base.s
    for (relu1_0_d_def__.s17.w.wi, 0, t21174) {
     if (t21175) {
      let t19639.s = relu1_0_d_def__.s17.w.wi + t21176
      let t19640 = min(ramp(t21188, 1, 8), x8(batch_size + -1))
      let t20107 = ((relu1_0_d_def__.n.extent_realized*t19639.s)*4) + t21178
      let t20108 = max(relu1_0_d_def__.s17.w.wi + t21191, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t20107*8, 1, 8) aligned(8, 0)] = relu1_0_d_def__[ramp(t20107*8, 1, 8) aligned(8, 0)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s17.w.wi + t21180)*f6_0_d_def__.n.extent_realized) + t21188, 1, 8)]*(schedule_features[t19640 + x8(t20108 + t21189)]*schedule_features[t19640 + x8(t20108 + t21190)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s17.n.ni.new_max.s = batch_size - t21188
      let t21192 = max(min(relu1_0_d_def__.s17.n.ni.new_max.s, 8), 0)
      let t21194 = max(relu1_0_d_def__.s17.w.wi + t21191, 0)*schedule_features.stride.2
      let t21193 = (((((relu1_0_d_def__.s17.w.wi + t21176)*relu1_0_d_def__.n.extent_realized)*4) + relu1_0_d_def__.n.extent_realized)*8) + t21188
      let t21195 = ((relu1_0_d_def__.s17.w.wi + t21180)*f6_0_d_def__.n.extent_realized) + t21188
      let t21197 = t21188 + t21190
      let t21196 = t21188 + t21189
      for (relu1_0_d_def__.s17.n.ni, 0, t21192) {
       let t19645 = relu1_0_d_def__.s17.n.ni + t21193
       relu1_0_d_def__[t19645] = relu1_0_d_def__[t19645] + ((f6_0_d_def__[relu1_0_d_def__.s17.n.ni + t21195]*(schedule_features[(t21194 + t21196) + relu1_0_d_def__.s17.n.ni]*schedule_features[(t21194 + t21197) + relu1_0_d_def__.s17.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s17.n.ni.new_max$1.s = batch_size - t21188
      let t21203 = max(min(batch_size - t21188, 8), 0)
      let t21201 = max(relu1_0_d_def__.s17.w.wi + t21191, 0)*schedule_features.stride.2
      let t21199 = max(min(relu1_0_d_def__.s17.n.ni.new_max$1.s, 8), 0) - t21203
      let t21200 = (((((relu1_0_d_def__.s17.w.wi + t21176)*relu1_0_d_def__.n.extent_realized)*4) + relu1_0_d_def__.n.extent_realized)*8) + t21188
      let t21202 = ((relu1_0_d_def__.s17.w.wi + t21180)*f6_0_d_def__.n.extent_realized) + t21188
      for (relu1_0_d_def__.s17.n.ni, t21203, t21199) {
       let t19650 = relu1_0_d_def__.s17.n.ni + t21200
       relu1_0_d_def__[t19650] = relu1_0_d_def__[t19650] + ((f6_0_d_def__[relu1_0_d_def__.s17.n.ni + t21202]*(schedule_features[(t21186 + t21201) + -1]*schedule_features[(t21187 + t21201) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21212 = schedule_features.stride.1*24
   let t21213 = schedule_features.stride.1*26
   let t21206 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21204 = (batch_size + 7)/8
   let t21207 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s18.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s18.n.ni.base.s = relu1_0_d_def__.s18.n.n.n % t21204
    let relu1_0_d_def__.s18.w.wi.base.s = relu1_0_d_def__.s18.n.n.n/t21204
    let relu1_0_d_def__.s18.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s18.w.wi.base.s*2)
    let t21228 = relu1_0_d_def__.s18.n.ni.base.s*8
    let t21229 = t21212 - t21207
    let t21230 = t21213 - t21207
    let t21231 = relu1_0_d_def__.s18.w.wi.base.s*2
    let t21215 = (t21228 + 8) <= batch_size
    let t21214 = max(min(relu1_0_d_def__.s18.w.wi.epilogue.s, 2), 0)
    let t21217 = t21231 - t21206
    let t21220 = t21231 - f6_0_d_def__.w.min_realized
    let t21227 = (batch_size + t21213) - t21207
    let t21226 = (batch_size + t21212) - t21207
    let t21216 = (relu1_0_d_def__.n.extent_realized*7) + t21228
    for (relu1_0_d_def__.s18.w.wi, 0, t21214) {
     if (t21215) {
      let t19654 = (((relu1_0_d_def__.s18.w.wi + t21217)*relu1_0_d_def__.n.extent_realized)*32) + t21216
      let t19655 = min(ramp(t21228, 1, 8), x8(batch_size + -1))
      let t20111 = max(relu1_0_d_def__.s18.w.wi + t21231, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19654, 1, 8)] = relu1_0_d_def__[ramp(t19654, 1, 8)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s18.w.wi + t21220)*f6_0_d_def__.n.extent_realized) + t21228, 1, 8)]*(schedule_features[t19655 + x8(t20111 + t21229)]*schedule_features[t19655 + x8(t20111 + t21230)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s18.n.ni.new_max.s = batch_size - t21228
      let t21232 = max(min(relu1_0_d_def__.s18.n.ni.new_max.s, 8), 0)
      let t21234 = max(relu1_0_d_def__.s18.w.wi + t21231, 0)*schedule_features.stride.2
      let t21233 = (((relu1_0_d_def__.s18.w.wi + t21217)*relu1_0_d_def__.n.extent_realized)*32) + t21216
      let t21235 = ((relu1_0_d_def__.s18.w.wi + t21220)*f6_0_d_def__.n.extent_realized) + t21228
      let t21237 = t21228 + t21230
      let t21236 = t21228 + t21229
      for (relu1_0_d_def__.s18.n.ni, 0, t21232) {
       let t19660 = relu1_0_d_def__.s18.n.ni + t21233
       relu1_0_d_def__[t19660] = relu1_0_d_def__[t19660] + ((f6_0_d_def__[relu1_0_d_def__.s18.n.ni + t21235]*(schedule_features[(t21234 + t21236) + relu1_0_d_def__.s18.n.ni]*schedule_features[(t21234 + t21237) + relu1_0_d_def__.s18.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s18.n.ni.new_max$1.s = batch_size - t21228
      let t21243 = max(min(batch_size - t21228, 8), 0)
      let t21241 = max(relu1_0_d_def__.s18.w.wi + t21231, 0)*schedule_features.stride.2
      let t21239 = max(min(relu1_0_d_def__.s18.n.ni.new_max$1.s, 8), 0) - t21243
      let t21240 = (((relu1_0_d_def__.s18.w.wi + t21217)*relu1_0_d_def__.n.extent_realized)*32) + t21216
      let t21242 = ((relu1_0_d_def__.s18.w.wi + t21220)*f6_0_d_def__.n.extent_realized) + t21228
      for (relu1_0_d_def__.s18.n.ni, t21243, t21239) {
       let t19665 = relu1_0_d_def__.s18.n.ni + t21240
       relu1_0_d_def__[t19665] = relu1_0_d_def__[t19665] + ((f6_0_d_def__[relu1_0_d_def__.s18.n.ni + t21242]*(schedule_features[(t21226 + t21241) + -1]*schedule_features[(t21227 + t21241) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21250 = schedule_features.stride.1*18
   let t21246 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21244 = (batch_size + 7)/8
   let t21247 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s19.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s19.n.ni.base.s = relu1_0_d_def__.s19.n.n.n % t21244
    let relu1_0_d_def__.s19.w.wi.base.s = relu1_0_d_def__.s19.n.n.n/t21244
    let relu1_0_d_def__.s19.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s19.w.wi.base.s*2)
    let t21264 = relu1_0_d_def__.s19.n.ni.base.s*8
    let t21265 = t21250 - t21247
    let t21266 = relu1_0_d_def__.s19.w.wi.base.s*2
    let t21252 = (t21264 + 8) <= batch_size
    let t21251 = max(min(relu1_0_d_def__.s19.w.wi.epilogue.s, 2), 0)
    let t21254 = t21266 - t21246
    let t21257 = t21266 - f6_0_d_def__.w.min_realized
    let t21263 = (batch_size + t21250) - t21247
    let t21253 = (relu1_0_d_def__.n.extent_realized*6) + t21264
    for (relu1_0_d_def__.s19.w.wi, 0, t21251) {
     if (t21252) {
      let t19669 = (((relu1_0_d_def__.s19.w.wi + t21254)*relu1_0_d_def__.n.extent_realized)*32) + t21253
      let t19670 = min(ramp(t21264, 1, 8), x8(batch_size + -1))
      let t20114 = max(relu1_0_d_def__.s19.w.wi + t21266, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19669, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t19669, 1, 8) aligned(2, 0)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s19.w.wi + t21257)*f6_0_d_def__.n.extent_realized) + t21264, 1, 8)]*(schedule_features[t19670 + x8(t20114 - t21247)]*schedule_features[t19670 + x8(t20114 + t21265)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s19.n.ni.new_max.s = batch_size - t21264
      let t21267 = max(min(relu1_0_d_def__.s19.n.ni.new_max.s, 8), 0)
      let t21269 = max(relu1_0_d_def__.s19.w.wi + t21266, 0)*schedule_features.stride.2
      let t21271 = t21264 - t21247
      let t21268 = (((relu1_0_d_def__.s19.w.wi + t21254)*relu1_0_d_def__.n.extent_realized)*32) + t21253
      let t21270 = ((relu1_0_d_def__.s19.w.wi + t21257)*f6_0_d_def__.n.extent_realized) + t21264
      let t21272 = t21264 + t21265
      for (relu1_0_d_def__.s19.n.ni, 0, t21267) {
       let t19675 = relu1_0_d_def__.s19.n.ni + t21268
       relu1_0_d_def__[t19675] = relu1_0_d_def__[t19675] + ((f6_0_d_def__[relu1_0_d_def__.s19.n.ni + t21270]*(schedule_features[(t21269 + t21271) + relu1_0_d_def__.s19.n.ni]*schedule_features[(t21269 + t21272) + relu1_0_d_def__.s19.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s19.n.ni.new_max$1.s = batch_size - t21264
      let t21279 = max(min(batch_size - t21264, 8), 0)
      let t21276 = max(relu1_0_d_def__.s19.w.wi + t21266, 0)*schedule_features.stride.2
      let t21274 = max(min(relu1_0_d_def__.s19.n.ni.new_max$1.s, 8), 0) - t21279
      let t21278 = batch_size - t21247
      let t21275 = (((relu1_0_d_def__.s19.w.wi + t21254)*relu1_0_d_def__.n.extent_realized)*32) + t21253
      let t21277 = ((relu1_0_d_def__.s19.w.wi + t21257)*f6_0_d_def__.n.extent_realized) + t21264
      for (relu1_0_d_def__.s19.n.ni, t21279, t21274) {
       let t19680 = relu1_0_d_def__.s19.n.ni + t21275
       relu1_0_d_def__[t19680] = relu1_0_d_def__[t19680] + ((f6_0_d_def__[relu1_0_d_def__.s19.n.ni + t21277]*(schedule_features[(t21276 + t21278) + -1]*schedule_features[(t21263 + t21276) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21286 = schedule_features.stride.1*19
   let t21282 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21280 = (batch_size + 7)/8
   let t21283 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s20.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s20.n.ni.base.s = relu1_0_d_def__.s20.n.n.n % t21280
    let relu1_0_d_def__.s20.w.wi.base.s = relu1_0_d_def__.s20.n.n.n/t21280
    let relu1_0_d_def__.s20.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s20.w.wi.base.s*2)
    let t21300 = relu1_0_d_def__.s20.n.ni.base.s*8
    let t21301 = t21286 - t21283
    let t21302 = relu1_0_d_def__.s20.w.wi.base.s*2
    let t21288 = (t21300 + 8) <= batch_size
    let t21287 = max(min(relu1_0_d_def__.s20.w.wi.epilogue.s, 2), 0)
    let t21290 = t21302 - t21282
    let t21293 = t21302 - f6_0_d_def__.w.min_realized
    let t21299 = (batch_size + t21286) - t21283
    let t21289 = (relu1_0_d_def__.n.extent_realized*5) + t21300
    for (relu1_0_d_def__.s20.w.wi, 0, t21287) {
     if (t21288) {
      let t19684 = (((relu1_0_d_def__.s20.w.wi + t21290)*relu1_0_d_def__.n.extent_realized)*32) + t21289
      let t19685 = min(ramp(t21300, 1, 8), x8(batch_size + -1))
      let t20117 = max(relu1_0_d_def__.s20.w.wi + t21302, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19684, 1, 8)] = relu1_0_d_def__[ramp(t19684, 1, 8)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s20.w.wi + t21293)*f6_0_d_def__.n.extent_realized) + t21300, 1, 8)]*(schedule_features[t19685 + x8(t20117 - t21283)]*schedule_features[t19685 + x8(t20117 + t21301)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s20.n.ni.new_max.s = batch_size - t21300
      let t21303 = max(min(relu1_0_d_def__.s20.n.ni.new_max.s, 8), 0)
      let t21305 = max(relu1_0_d_def__.s20.w.wi + t21302, 0)*schedule_features.stride.2
      let t21307 = t21300 - t21283
      let t21304 = (((relu1_0_d_def__.s20.w.wi + t21290)*relu1_0_d_def__.n.extent_realized)*32) + t21289
      let t21306 = ((relu1_0_d_def__.s20.w.wi + t21293)*f6_0_d_def__.n.extent_realized) + t21300
      let t21308 = t21300 + t21301
      for (relu1_0_d_def__.s20.n.ni, 0, t21303) {
       let t19690 = relu1_0_d_def__.s20.n.ni + t21304
       relu1_0_d_def__[t19690] = relu1_0_d_def__[t19690] + ((f6_0_d_def__[relu1_0_d_def__.s20.n.ni + t21306]*(schedule_features[(t21305 + t21307) + relu1_0_d_def__.s20.n.ni]*schedule_features[(t21305 + t21308) + relu1_0_d_def__.s20.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s20.n.ni.new_max$1.s = batch_size - t21300
      let t21315 = max(min(batch_size - t21300, 8), 0)
      let t21312 = max(relu1_0_d_def__.s20.w.wi + t21302, 0)*schedule_features.stride.2
      let t21310 = max(min(relu1_0_d_def__.s20.n.ni.new_max$1.s, 8), 0) - t21315
      let t21314 = batch_size - t21283
      let t21311 = (((relu1_0_d_def__.s20.w.wi + t21290)*relu1_0_d_def__.n.extent_realized)*32) + t21289
      let t21313 = ((relu1_0_d_def__.s20.w.wi + t21293)*f6_0_d_def__.n.extent_realized) + t21300
      for (relu1_0_d_def__.s20.n.ni, t21315, t21310) {
       let t19695 = relu1_0_d_def__.s20.n.ni + t21311
       relu1_0_d_def__[t19695] = relu1_0_d_def__[t19695] + ((f6_0_d_def__[relu1_0_d_def__.s20.n.ni + t21313]*(schedule_features[(t21312 + t21314) + -1]*schedule_features[(t21299 + t21312) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21328 = schedule_features.stride.1*9
   let t21329 = schedule_features.stride.1*10
   let t21330 = schedule_features.stride.1*12
   let t21331 = schedule_features.stride.1*30
   let t21318 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21316 = (batch_size + 7)/8
   let t21319 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s21.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s21.n.ni.base.s = relu1_0_d_def__.s21.n.n.n % t21316
    let relu1_0_d_def__.s21.w.wi.base.s = relu1_0_d_def__.s21.n.n.n/t21316
    let relu1_0_d_def__.s21.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s21.w.wi.base.s*2)
    let t21352 = relu1_0_d_def__.s21.n.ni.base.s*8
    let t21353 = t21328 - t21319
    let t21354 = t21329 - t21319
    let t21355 = t21330 - t21319
    let t21356 = t21331 - t21319
    let t21357 = relu1_0_d_def__.s21.w.wi.base.s*2
    let t21333 = (t21352 + 8) <= batch_size
    let t21332 = max(min(relu1_0_d_def__.s21.w.wi.epilogue.s, 2), 0)
    let t21335 = t21357 - t21318
    let t21339 = t21357 - f6_0_d_def__.w.min_realized
    let t21351 = (batch_size + t21331) - t21319
    let t21350 = (batch_size + t21330) - t21319
    let t21349 = (batch_size + t21329) - t21319
    let t21348 = (batch_size + t21328) - t21319
    let t21334 = (relu1_0_d_def__.n.extent_realized*23) + t21352
    for (relu1_0_d_def__.s21.w.wi, 0, t21332) {
     if (t21333) {
      let t19699 = (((relu1_0_d_def__.s21.w.wi + t21335)*relu1_0_d_def__.n.extent_realized)*32) + t21334
      let t19700 = min(ramp(t21352, 1, 8), x8(batch_size + -1))
      let t19703 = schedule_features[t19700 + x8((max(relu1_0_d_def__.s21.w.wi + t21357, 0)*schedule_features.stride.2) + t21353)]
      let t20120 = max(relu1_0_d_def__.s21.w.wi + t21357, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19699, 1, 8)] = relu1_0_d_def__[ramp(t19699, 1, 8)] + ((f6_0_d_def__[ramp(((relu1_0_d_def__.s21.w.wi + t21339)*f6_0_d_def__.n.extent_realized) + t21352, 1, 8)]*(schedule_features[t19700 + x8(t20120 + t21354)]*((schedule_features[t19700 + x8(t20120 + t21355)]*min(x8(4096.000000f)/max(schedule_features[t19700 + x8(t20120 + t21356)], x8(1.000000f)), t19703))*t19703)))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s21.n.ni.new_max.s = batch_size - t21352
      let t21366 = max(relu1_0_d_def__.s21.w.wi + t21357, 0)*schedule_features.stride.2
      let t21358 = max(min(relu1_0_d_def__.s21.n.ni.new_max.s, 8), 0)
      let t21360 = (t21352 + t21353) + t21366
      let t21359 = (((relu1_0_d_def__.s21.w.wi + t21335)*relu1_0_d_def__.n.extent_realized)*32) + t21334
      let t21362 = ((relu1_0_d_def__.s21.w.wi + t21339)*f6_0_d_def__.n.extent_realized) + t21352
      let t21365 = t21352 + t21356
      let t21364 = t21352 + t21355
      let t21363 = t21352 + t21354
      for (relu1_0_d_def__.s21.n.ni, 0, t21358) {
       let t19706 = relu1_0_d_def__.s21.n.ni + t21359
       let t19709 = schedule_features[relu1_0_d_def__.s21.n.ni + t21360]
       relu1_0_d_def__[t19706] = relu1_0_d_def__[t19706] + ((f6_0_d_def__[relu1_0_d_def__.s21.n.ni + t21362]*(schedule_features[(t21363 + t21366) + relu1_0_d_def__.s21.n.ni]*((schedule_features[(t21364 + t21366) + relu1_0_d_def__.s21.n.ni]*min(4096.000000f/max(schedule_features[(t21365 + t21366) + relu1_0_d_def__.s21.n.ni], 1.000000f), t19709))*t19709)))*0.000000f)
      }
      let relu1_0_d_def__.s21.n.ni.new_max$1.s = batch_size - t21352
      let t21373 = max(relu1_0_d_def__.s21.w.wi + t21357, 0)*schedule_features.stride.2
      let t21374 = max(min(batch_size - t21352, 8), 0)
      let t21368 = max(min(relu1_0_d_def__.s21.n.ni.new_max$1.s, 8), 0) - t21374
      let t21370 = t21348 + t21373
      let t21369 = (((relu1_0_d_def__.s21.w.wi + t21335)*relu1_0_d_def__.n.extent_realized)*32) + t21334
      let t21372 = ((relu1_0_d_def__.s21.w.wi + t21339)*f6_0_d_def__.n.extent_realized) + t21352
      for (relu1_0_d_def__.s21.n.ni, t21374, t21368) {
       let t19712 = relu1_0_d_def__.s21.n.ni + t21369
       let t19715 = schedule_features[t21370 + -1]
       relu1_0_d_def__[t19712] = relu1_0_d_def__[t19712] + ((f6_0_d_def__[relu1_0_d_def__.s21.n.ni + t21372]*(schedule_features[(t21349 + t21373) + -1]*((schedule_features[(t21350 + t21373) + -1]*min(4096.000000f/max(schedule_features[(t21351 + t21373) + -1], 1.000000f), t19715))*t19715)))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21387 = schedule_features.stride.1*9
   let t21388 = schedule_features.stride.1*24
   let t21389 = schedule_features.stride.1*25
   let t21390 = schedule_features.stride.1*30
   let t21377 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21375 = (batch_size + 7)/8
   let t21378 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s22.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s22.n.ni.base.s = relu1_0_d_def__.s22.n.n.n % t21375
    let relu1_0_d_def__.s22.w.wi.base.s = relu1_0_d_def__.s22.n.n.n/t21375
    let relu1_0_d_def__.s22.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s22.w.wi.base.s*2)
    let t21411 = relu1_0_d_def__.s22.n.ni.base.s*8
    let t21412 = t21387 - t21378
    let t21413 = t21388 - t21378
    let t21414 = t21389 - t21378
    let t21415 = t21390 - t21378
    let t21416 = relu1_0_d_def__.s22.w.wi.base.s*2
    let t21392 = (t21411 + 8) <= batch_size
    let t21391 = max(min(relu1_0_d_def__.s22.w.wi.epilogue.s, 2), 0)
    let t21394 = t21416 - t21377
    let t21398 = t21416 - f6_0_d_def__.w.min_realized
    let t21408 = (batch_size + t21390) - t21378
    let t21410 = (batch_size + t21389) - t21378
    let t21409 = (batch_size + t21388) - t21378
    let t21407 = (batch_size + t21387) - t21378
    let t21393 = (relu1_0_d_def__.n.extent_realized*22) + t21411
    for (relu1_0_d_def__.s22.w.wi, 0, t21391) {
     if (t21392) {
      let t19717 = (((relu1_0_d_def__.s22.w.wi + t21394)*relu1_0_d_def__.n.extent_realized)*32) + t21393
      let t19718 = min(ramp(t21411, 1, 8), x8(batch_size + -1))
      let t20123 = max(relu1_0_d_def__.s22.w.wi + t21416, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19717, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t19717, 1, 8) aligned(2, 0)] + select(x8(1.000000f) < schedule_features[t19718 + x8(t20123 + t21412)], ((f6_0_d_def__[ramp(((relu1_0_d_def__.s22.w.wi + t21398)*f6_0_d_def__.n.extent_realized) + t21411, 1, 8)]*x8(0.000000f))/max(schedule_features[t19718 + x8(t20123 + t21415)], x8(1.000000f)))*(schedule_features[t19718 + x8(t20123 + t21413)] + schedule_features[t19718 + x8(t20123 + t21414)]), x8(0.000000f))
     } else {
      let relu1_0_d_def__.s22.n.ni.new_max.s = batch_size - t21411
      let t21417 = max(min(relu1_0_d_def__.s22.n.ni.new_max.s, 8), 0)
      let t21419 = max(relu1_0_d_def__.s22.w.wi + t21416, 0)*schedule_features.stride.2
      let t21418 = (((relu1_0_d_def__.s22.w.wi + t21394)*relu1_0_d_def__.n.extent_realized)*32) + t21393
      let t21421 = ((relu1_0_d_def__.s22.w.wi + t21398)*f6_0_d_def__.n.extent_realized) + t21411
      let t21422 = t21411 + t21415
      let t21424 = t21411 + t21414
      let t21423 = t21411 + t21413
      let t21420 = t21411 + t21412
      for (relu1_0_d_def__.s22.n.ni, 0, t21417) {
       let t19723 = relu1_0_d_def__.s22.n.ni + t21418
       relu1_0_d_def__[t19723] = relu1_0_d_def__[t19723] + select(1.000000f < schedule_features[(t21419 + t21420) + relu1_0_d_def__.s22.n.ni], ((f6_0_d_def__[relu1_0_d_def__.s22.n.ni + t21421]*0.000000f)/max(schedule_features[(t21419 + t21422) + relu1_0_d_def__.s22.n.ni], 1.000000f))*(schedule_features[(t21419 + t21423) + relu1_0_d_def__.s22.n.ni] + schedule_features[(t21419 + t21424) + relu1_0_d_def__.s22.n.ni]), 0.000000f)
      }
      let relu1_0_d_def__.s22.n.ni.new_max$1.s = batch_size - t21411
      let t21430 = max(min(batch_size - t21411, 8), 0)
      let t21428 = max(relu1_0_d_def__.s22.w.wi + t21416, 0)*schedule_features.stride.2
      let t21426 = max(min(relu1_0_d_def__.s22.n.ni.new_max$1.s, 8), 0) - t21430
      let t21427 = (((relu1_0_d_def__.s22.w.wi + t21394)*relu1_0_d_def__.n.extent_realized)*32) + t21393
      let t21429 = ((relu1_0_d_def__.s22.w.wi + t21398)*f6_0_d_def__.n.extent_realized) + t21411
      for (relu1_0_d_def__.s22.n.ni, t21430, t21426) {
       let t19728 = relu1_0_d_def__.s22.n.ni + t21427
       relu1_0_d_def__[t19728] = relu1_0_d_def__[t19728] + select(1.000000f < schedule_features[(t21407 + t21428) + -1], ((f6_0_d_def__[relu1_0_d_def__.s22.n.ni + t21429]*0.000000f)/max(schedule_features[(t21408 + t21428) + -1], 1.000000f))*(schedule_features[(t21409 + t21428) + -1] + schedule_features[(t21410 + t21428) + -1]), 0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21439 = schedule_features.stride.1*9
   let t21440 = schedule_features.stride.1*11
   let t21433 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21431 = (batch_size + 7)/8
   let t21434 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s23.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s23.n.ni.base.s = relu1_0_d_def__.s23.n.n.n % t21431
    let relu1_0_d_def__.s23.w.wi.base.s = relu1_0_d_def__.s23.n.n.n/t21431
    let relu1_0_d_def__.s23.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s23.w.wi.base.s*2)
    let relu1_0_d_def__.s23.w.wi.new_min.s = min(1 - (relu1_0_d_def__.s23.w.wi.base.s*2), relu1_0_d_def__.s23.w.wi.epilogue.s)
    let t21458 = relu1_0_d_def__.s23.n.ni.base.s*8
    let t21459 = t21439 - t21434
    let t21460 = t21440 - t21434
    let t21461 = relu1_0_d_def__.s23.w.wi.base.s*2
    let t21462 = max(min(relu1_0_d_def__.s23.w.wi.new_min.s, 2), 0)
    let t21443 = (t21458 + 8) <= batch_size
    let t21442 = max(min(relu1_0_d_def__.s23.w.wi.epilogue.s, 2), 0) - t21462
    let t21445 = t21461 - t21433
    let t21450 = t21461 - f6_0_d_def__.w.min_realized
    let t21456 = (batch_size + t21440) - t21434
    let t21455 = (batch_size + t21439) - t21434
    let t21444 = (relu1_0_d_def__.n.extent_realized*21) + t21458
    for (relu1_0_d_def__.s23.w.wi, t21462, t21442) {
     if (t21443) {
      let t19732 = (((relu1_0_d_def__.s23.w.wi + t21445)*relu1_0_d_def__.n.extent_realized)*32) + t21444
      let t19733 = min(ramp(t21458, 1, 8), x8(batch_size + -1))
      let t20126 = (relu1_0_d_def__.s23.w.wi + t21461)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19732, 1, 8)] = relu1_0_d_def__[ramp(t19732, 1, 8)] + select(x8(1.000000f) < schedule_features[t19733 + x8(t20126 + t21459)], x8(0.000000f), (schedule_features[t19733 + x8(t20126 + t21460)]*(schedule_features[t19733 + x8(t20126 - t21434)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s23.w.wi + t21450)*f6_0_d_def__.n.extent_realized) + t21458, 1, 8)]))*x8(0.000000f))
     } else {
      let t21463 = max(min(batch_size - t21458, 8), 0)
      let t21465 = (relu1_0_d_def__.s23.w.wi + t21461)*schedule_features.stride.2
      let t21468 = t21458 - t21434
      let t21464 = (((relu1_0_d_def__.s23.w.wi + t21445)*relu1_0_d_def__.n.extent_realized)*32) + t21444
      let t21469 = ((relu1_0_d_def__.s23.w.wi + t21450)*f6_0_d_def__.n.extent_realized) + t21458
      let t21467 = t21458 + t21460
      let t21466 = t21458 + t21459
      for (relu1_0_d_def__.s23.n.ni, 0, t21463) {
       let t19738 = relu1_0_d_def__.s23.n.ni + t21464
       relu1_0_d_def__[t19738] = relu1_0_d_def__[t19738] + select(1.000000f < schedule_features[(t21465 + t21466) + relu1_0_d_def__.s23.n.ni], 0.000000f, (schedule_features[(t21465 + t21467) + relu1_0_d_def__.s23.n.ni]*(schedule_features[(t21465 + t21468) + relu1_0_d_def__.s23.n.ni]*f6_0_d_def__[relu1_0_d_def__.s23.n.ni + t21469]))*0.000000f)
      }
      let t21470 = max(min(batch_size - t21458, 8), 0)
      let t21473 = (relu1_0_d_def__.s23.w.wi + t21461)*schedule_features.stride.2
      let t21474 = batch_size - t21434
      let t21472 = (((relu1_0_d_def__.s23.w.wi + t21445)*relu1_0_d_def__.n.extent_realized)*32) + t21444
      let t21475 = ((relu1_0_d_def__.s23.w.wi + t21450)*f6_0_d_def__.n.extent_realized) + t21458
      for (relu1_0_d_def__.s23.n.ni, t21470, 0) {
       let t19743 = relu1_0_d_def__.s23.n.ni + t21472
       relu1_0_d_def__[t19743] = relu1_0_d_def__[t19743] + select(1.000000f < schedule_features[(t21455 + t21473) + -1], 0.000000f, (schedule_features[(t21456 + t21473) + -1]*(schedule_features[(t21473 + t21474) + -1]*f6_0_d_def__[relu1_0_d_def__.s23.n.ni + t21475]))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21484 = schedule_features.stride.1*9
   let t21485 = schedule_features.stride.1*11
   let t21478 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21476 = (batch_size + 7)/8
   let t21479 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s24.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s24.n.ni.base.s = relu1_0_d_def__.s24.n.n.n % t21476
    let relu1_0_d_def__.s24.w.wi.base.s = relu1_0_d_def__.s24.n.n.n/t21476
    let relu1_0_d_def__.s24.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s24.w.wi.base.s*2)
    let relu1_0_d_def__.s24.w.wi.new_max.s = min(1 - (relu1_0_d_def__.s24.w.wi.base.s*2), relu1_0_d_def__.s24.w.wi.epilogue.s)
    let t21502 = relu1_0_d_def__.s24.n.ni.base.s*8
    let t21503 = t21484 - t21479
    let t21504 = t21485 - t21479
    let t21505 = relu1_0_d_def__.s24.w.wi.base.s*2
    let t21487 = (t21502 + 8) <= batch_size
    let t21486 = max(min(relu1_0_d_def__.s24.w.wi.new_max.s, 2), 0)
    let t21489 = t21505 - t21478
    let t21494 = t21505 - f6_0_d_def__.w.min_realized
    let t21498 = t21502 - t21479
    let t21500 = (batch_size + t21485) - t21479
    let t21499 = (batch_size + t21484) - t21479
    let t21501 = batch_size - t21479
    let t21493 = 0 - t21479
    let t21488 = (relu1_0_d_def__.n.extent_realized*20) + t21502
    for (relu1_0_d_def__.s24.w.wi, 0, t21486) {
     if (t21487) {
      let t19747 = (((relu1_0_d_def__.s24.w.wi + t21489)*relu1_0_d_def__.n.extent_realized)*32) + t21488
      let t19748 = min(ramp(t21502, 1, 8), x8(batch_size + -1))
      relu1_0_d_def__[ramp(t19747, 1, 8) aligned(4, 0)] = relu1_0_d_def__[ramp(t19747, 1, 8) aligned(4, 0)] + select(x8(1.000000f) < schedule_features[t19748 + x8(t21503)], x8(0.000000f), (schedule_features[t19748 + x8(t21504)]*(schedule_features[t19748 + x8(t21493)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s24.w.wi + t21494)*f6_0_d_def__.n.extent_realized) + t21502, 1, 8)]))*x8(0.000000f))
     } else {
      let t21506 = max(min(batch_size - t21502, 8), 0)
      let t21507 = (((relu1_0_d_def__.s24.w.wi + t21489)*relu1_0_d_def__.n.extent_realized)*32) + t21488
      let t21510 = ((relu1_0_d_def__.s24.w.wi + t21494)*f6_0_d_def__.n.extent_realized) + t21502
      let t21509 = t21502 + t21504
      let t21508 = t21502 + t21503
      for (relu1_0_d_def__.s24.n.ni, 0, t21506) {
       let t19752 = relu1_0_d_def__.s24.n.ni + t21507
       relu1_0_d_def__[t19752] = relu1_0_d_def__[t19752] + select(1.000000f < schedule_features[relu1_0_d_def__.s24.n.ni + t21508], 0.000000f, (schedule_features[relu1_0_d_def__.s24.n.ni + t21509]*(schedule_features[relu1_0_d_def__.s24.n.ni + t21498]*f6_0_d_def__[relu1_0_d_def__.s24.n.ni + t21510]))*0.000000f)
      }
      let t21511 = max(min(batch_size - t21502, 8), 0)
      let t21513 = (((relu1_0_d_def__.s24.w.wi + t21489)*relu1_0_d_def__.n.extent_realized)*32) + t21488
      let t21514 = ((relu1_0_d_def__.s24.w.wi + t21494)*f6_0_d_def__.n.extent_realized) + t21502
      for (relu1_0_d_def__.s24.n.ni, t21511, 0) {
       let t19756 = relu1_0_d_def__.s24.n.ni + t21513
       relu1_0_d_def__[t19756] = relu1_0_d_def__[t19756] + select(1.000000f < schedule_features[t21499 + -1], 0.000000f, (schedule_features[t21500 + -1]*(schedule_features[t21501 + -1]*f6_0_d_def__[relu1_0_d_def__.s24.n.ni + t21514]))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21523 = schedule_features.stride.1*9
   let t21524 = schedule_features.stride.1*11
   let t21517 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21515 = (batch_size + 7)/8
   let t21518 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s25.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s25.n.ni.base.s = relu1_0_d_def__.s25.n.n.n % t21515
    let relu1_0_d_def__.s25.w.wi.base.s = relu1_0_d_def__.s25.n.n.n/t21515
    let relu1_0_d_def__.s25.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s25.w.wi.base.s*2)
    let t21541 = relu1_0_d_def__.s25.n.ni.base.s*8
    let t21542 = t21523 - t21518
    let t21543 = t21524 - t21518
    let t21544 = relu1_0_d_def__.s25.w.wi.base.s*2
    let t21526 = (t21541 + 8) <= batch_size
    let t21525 = max(min(relu1_0_d_def__.s25.w.wi.epilogue.s, 2), 0)
    let t21528 = t21544 - t21517
    let t21533 = t21544 - f6_0_d_def__.w.min_realized
    let t21539 = (batch_size + t21524) - t21518
    let t21538 = (batch_size + t21523) - t21518
    let t21527 = (relu1_0_d_def__.n.extent_realized*19) + t21541
    for (relu1_0_d_def__.s25.w.wi, 0, t21525) {
     if (t21526) {
      let t19759 = (((relu1_0_d_def__.s25.w.wi + t21528)*relu1_0_d_def__.n.extent_realized)*32) + t21527
      let t19760 = min(ramp(t21541, 1, 8), x8(batch_size + -1))
      let t20129 = max(relu1_0_d_def__.s25.w.wi + t21544, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19759, 1, 8)] = relu1_0_d_def__[ramp(t19759, 1, 8)] + select(x8(1.000000f) < schedule_features[t19760 + x8(t20129 + t21542)], (schedule_features[t19760 + x8(t20129 + t21543)]*(schedule_features[t19760 + x8(t20129 - t21518)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s25.w.wi + t21533)*f6_0_d_def__.n.extent_realized) + t21541, 1, 8)]))*x8(0.000000f), x8(0.000000f))
     } else {
      let relu1_0_d_def__.s25.n.ni.new_max.s = batch_size - t21541
      let t21545 = max(min(relu1_0_d_def__.s25.n.ni.new_max.s, 8), 0)
      let t21547 = max(relu1_0_d_def__.s25.w.wi + t21544, 0)*schedule_features.stride.2
      let t21550 = t21541 - t21518
      let t21546 = (((relu1_0_d_def__.s25.w.wi + t21528)*relu1_0_d_def__.n.extent_realized)*32) + t21527
      let t21551 = ((relu1_0_d_def__.s25.w.wi + t21533)*f6_0_d_def__.n.extent_realized) + t21541
      let t21549 = t21541 + t21543
      let t21548 = t21541 + t21542
      for (relu1_0_d_def__.s25.n.ni, 0, t21545) {
       let t19765 = relu1_0_d_def__.s25.n.ni + t21546
       relu1_0_d_def__[t19765] = relu1_0_d_def__[t19765] + select(1.000000f < schedule_features[(t21547 + t21548) + relu1_0_d_def__.s25.n.ni], (schedule_features[(t21547 + t21549) + relu1_0_d_def__.s25.n.ni]*(schedule_features[(t21547 + t21550) + relu1_0_d_def__.s25.n.ni]*f6_0_d_def__[relu1_0_d_def__.s25.n.ni + t21551]))*0.000000f, 0.000000f)
      }
      let relu1_0_d_def__.s25.n.ni.new_max$1.s = batch_size - t21541
      let t21558 = max(min(batch_size - t21541, 8), 0)
      let t21555 = max(relu1_0_d_def__.s25.w.wi + t21544, 0)*schedule_features.stride.2
      let t21553 = max(min(relu1_0_d_def__.s25.n.ni.new_max$1.s, 8), 0) - t21558
      let t21556 = batch_size - t21518
      let t21554 = (((relu1_0_d_def__.s25.w.wi + t21528)*relu1_0_d_def__.n.extent_realized)*32) + t21527
      let t21557 = ((relu1_0_d_def__.s25.w.wi + t21533)*f6_0_d_def__.n.extent_realized) + t21541
      for (relu1_0_d_def__.s25.n.ni, t21558, t21553) {
       let t19770 = relu1_0_d_def__.s25.n.ni + t21554
       relu1_0_d_def__[t19770] = relu1_0_d_def__[t19770] + select(1.000000f < schedule_features[(t21538 + t21555) + -1], (schedule_features[(t21539 + t21555) + -1]*(schedule_features[(t21555 + t21556) + -1]*f6_0_d_def__[relu1_0_d_def__.s25.n.ni + t21557]))*0.000000f, 0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21569 = schedule_features.stride.1*9
   let t21570 = schedule_features.stride.1*29
   let t21571 = schedule_features.stride.1*30
   let t21561 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21559 = (batch_size + 7)/8
   let t21562 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s26.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s26.n.ni.base.s = relu1_0_d_def__.s26.n.n.n % t21559
    let relu1_0_d_def__.s26.w.wi.base.s = relu1_0_d_def__.s26.n.n.n/t21559
    let relu1_0_d_def__.s26.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s26.w.wi.base.s*2)
    let relu1_0_d_def__.s26.w.wi.new_min.s = min(1 - (relu1_0_d_def__.s26.w.wi.base.s*2), relu1_0_d_def__.s26.w.wi.epilogue.s)
    let t21592 = relu1_0_d_def__.s26.n.ni.base.s*8
    let t21593 = t21569 - t21562
    let t21594 = t21570 - t21562
    let t21595 = t21571 - t21562
    let t21596 = relu1_0_d_def__.s26.w.wi.base.s*2
    let t21597 = max(min(relu1_0_d_def__.s26.w.wi.new_min.s, 2), 0)
    let t21574 = (t21592 + 8) <= batch_size
    let t21573 = max(min(relu1_0_d_def__.s26.w.wi.epilogue.s, 2), 0) - t21597
    let t21576 = t21596 - t21561
    let t21580 = t21596 - f6_0_d_def__.w.min_realized
    let t21591 = (batch_size + t21571) - t21562
    let t21590 = (batch_size + t21570) - t21562
    let t21588 = (batch_size + t21569) - t21562
    let t21575 = (relu1_0_d_def__.n.extent_realized*18) + t21592
    for (relu1_0_d_def__.s26.w.wi, t21597, t21573) {
     if (t21574) {
      let t19774 = (((relu1_0_d_def__.s26.w.wi + t21576)*relu1_0_d_def__.n.extent_realized)*32) + t21575
      let t19775 = min(ramp(t21592, 1, 8), x8(batch_size + -1))
      let t19778 = schedule_features[t19775 + x8(((relu1_0_d_def__.s26.w.wi + t21596)*schedule_features.stride.2) + t21593)]
      let t20132 = (relu1_0_d_def__.s26.w.wi + t21596)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19774, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t19774, 1, 8) aligned(2, 0)] + select(x8(1.000000f) < t19778, x8(0.000000f), ((schedule_features[t19775 + x8(t20132 - t21562)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s26.w.wi + t21580)*f6_0_d_def__.n.extent_realized) + t21592, 1, 8)])*((schedule_features[t19775 + x8(t20132 + t21594)]/max(schedule_features[t19775 + x8(t20132 + t21595)], x8(1.000000f)))*t19778))*x8(0.000000f))
     } else {
      let t21606 = (relu1_0_d_def__.s26.w.wi + t21596)*schedule_features.stride.2
      let t21598 = max(min(batch_size - t21592, 8), 0)
      let t21602 = t21592 - t21562
      let t21599 = (((relu1_0_d_def__.s26.w.wi + t21576)*relu1_0_d_def__.n.extent_realized)*32) + t21575
      let t21600 = (t21592 + t21593) + t21606
      let t21603 = ((relu1_0_d_def__.s26.w.wi + t21580)*f6_0_d_def__.n.extent_realized) + t21592
      let t21605 = t21592 + t21595
      let t21604 = t21592 + t21594
      for (relu1_0_d_def__.s26.n.ni, 0, t21598) {
       let t19781 = relu1_0_d_def__.s26.n.ni + t21599
       let t19784 = schedule_features[relu1_0_d_def__.s26.n.ni + t21600]
       relu1_0_d_def__[t19781] = relu1_0_d_def__[t19781] + select(1.000000f < t19784, 0.000000f, ((schedule_features[(t21602 + t21606) + relu1_0_d_def__.s26.n.ni]*f6_0_d_def__[relu1_0_d_def__.s26.n.ni + t21603])*((schedule_features[(t21604 + t21606) + relu1_0_d_def__.s26.n.ni]/max(schedule_features[(t21605 + t21606) + relu1_0_d_def__.s26.n.ni], 1.000000f))*t19784))*0.000000f)
      }
      let t21614 = (relu1_0_d_def__.s26.w.wi + t21596)*schedule_features.stride.2
      let t21607 = max(min(batch_size - t21592, 8), 0)
      let t21612 = batch_size - t21562
      let t21609 = (((relu1_0_d_def__.s26.w.wi + t21576)*relu1_0_d_def__.n.extent_realized)*32) + t21575
      let t21610 = t21588 + t21614
      let t21613 = ((relu1_0_d_def__.s26.w.wi + t21580)*f6_0_d_def__.n.extent_realized) + t21592
      for (relu1_0_d_def__.s26.n.ni, t21607, 0) {
       let t19787 = relu1_0_d_def__.s26.n.ni + t21609
       let t19790 = schedule_features[t21610 + -1]
       relu1_0_d_def__[t19787] = relu1_0_d_def__[t19787] + select(1.000000f < t19790, 0.000000f, ((schedule_features[(t21612 + t21614) + -1]*f6_0_d_def__[relu1_0_d_def__.s26.n.ni + t21613])*((schedule_features[(t21590 + t21614) + -1]/max(schedule_features[(t21591 + t21614) + -1], 1.000000f))*t19790))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21625 = schedule_features.stride.1*9
   let t21626 = schedule_features.stride.1*29
   let t21627 = schedule_features.stride.1*30
   let t21617 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21615 = (batch_size + 7)/8
   let t21618 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s27.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s27.n.ni.base.s = relu1_0_d_def__.s27.n.n.n % t21615
    let relu1_0_d_def__.s27.w.wi.base.s = relu1_0_d_def__.s27.n.n.n/t21615
    let relu1_0_d_def__.s27.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s27.w.wi.base.s*2)
    let relu1_0_d_def__.s27.w.wi.new_max.s = min(1 - (relu1_0_d_def__.s27.w.wi.base.s*2), relu1_0_d_def__.s27.w.wi.epilogue.s)
    let t21647 = relu1_0_d_def__.s27.n.ni.base.s*8
    let t21648 = t21625 - t21618
    let t21649 = t21626 - t21618
    let t21650 = t21627 - t21618
    let t21651 = relu1_0_d_def__.s27.w.wi.base.s*2
    let t21629 = (t21647 + 8) <= batch_size
    let t21628 = max(min(relu1_0_d_def__.s27.w.wi.new_max.s, 2), 0)
    let t21631 = t21651 - t21617
    let t21635 = t21651 - f6_0_d_def__.w.min_realized
    let t21640 = t21647 - t21618
    let t21646 = (batch_size + t21627) - t21618
    let t21645 = (batch_size + t21626) - t21618
    let t21643 = (batch_size + t21625) - t21618
    let t21644 = batch_size - t21618
    let t21634 = 0 - t21618
    let t21630 = (relu1_0_d_def__.n.extent_realized*17) + t21647
    for (relu1_0_d_def__.s27.w.wi, 0, t21628) {
     if (t21629) {
      let t19792 = (((relu1_0_d_def__.s27.w.wi + t21631)*relu1_0_d_def__.n.extent_realized)*32) + t21630
      let t19793 = min(ramp(t21647, 1, 8), x8(batch_size + -1))
      let t19795 = schedule_features[t19793 + x8(t21648)]
      relu1_0_d_def__[ramp(t19792, 1, 8)] = relu1_0_d_def__[ramp(t19792, 1, 8)] + select(x8(1.000000f) < t19795, x8(0.000000f), ((schedule_features[t19793 + x8(t21634)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s27.w.wi + t21635)*f6_0_d_def__.n.extent_realized) + t21647, 1, 8)])*((schedule_features[t19793 + x8(t21649)]/max(schedule_features[t19793 + x8(t21650)], x8(1.000000f)))*t19795))*x8(0.000000f))
     } else {
      let t21652 = max(min(batch_size - t21647, 8), 0)
      let t21653 = (((relu1_0_d_def__.s27.w.wi + t21631)*relu1_0_d_def__.n.extent_realized)*32) + t21630
      let t21655 = ((relu1_0_d_def__.s27.w.wi + t21635)*f6_0_d_def__.n.extent_realized) + t21647
      let t21657 = t21647 + t21650
      let t21656 = t21647 + t21649
      let t21654 = t21647 + t21648
      for (relu1_0_d_def__.s27.n.ni, 0, t21652) {
       let t19798 = relu1_0_d_def__.s27.n.ni + t21653
       let t19800 = schedule_features[relu1_0_d_def__.s27.n.ni + t21654]
       relu1_0_d_def__[t19798] = relu1_0_d_def__[t19798] + select(1.000000f < t19800, 0.000000f, ((schedule_features[relu1_0_d_def__.s27.n.ni + t21640]*f6_0_d_def__[relu1_0_d_def__.s27.n.ni + t21655])*((schedule_features[relu1_0_d_def__.s27.n.ni + t21656]/max(schedule_features[relu1_0_d_def__.s27.n.ni + t21657], 1.000000f))*t19800))*0.000000f)
      }
      let t21658 = max(min(batch_size - t21647, 8), 0)
      let t21660 = (((relu1_0_d_def__.s27.w.wi + t21631)*relu1_0_d_def__.n.extent_realized)*32) + t21630
      let t21661 = ((relu1_0_d_def__.s27.w.wi + t21635)*f6_0_d_def__.n.extent_realized) + t21647
      for (relu1_0_d_def__.s27.n.ni, t21658, 0) {
       let t19803 = relu1_0_d_def__.s27.n.ni + t21660
       let t19805 = schedule_features[t21643 + -1]
       relu1_0_d_def__[t19803] = relu1_0_d_def__[t19803] + select(1.000000f < t19805, 0.000000f, ((schedule_features[t21644 + -1]*f6_0_d_def__[relu1_0_d_def__.s27.n.ni + t21661])*((schedule_features[t21645 + -1]/max(schedule_features[t21646 + -1], 1.000000f))*t19805))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21671 = schedule_features.stride.1*9
   let t21672 = schedule_features.stride.1*29
   let t21673 = schedule_features.stride.1*30
   let t21663 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21662 = (batch_size + 7)/8
   let t21664 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   parallel (relu1_0_d_def__.s28.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s28.n.ni.base.s = relu1_0_d_def__.s28.n.n.n % t21662
    let relu1_0_d_def__.s28.w.wi.base.s = relu1_0_d_def__.s28.n.n.n/t21662
    let relu1_0_d_def__.s28.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s28.w.wi.base.s*2)
    let t21692 = relu1_0_d_def__.s28.n.ni.base.s*8
    let t21693 = t21671 - t21664
    let t21694 = t21672 - t21664
    let t21695 = t21673 - t21664
    let t21696 = relu1_0_d_def__.s28.w.wi.base.s*2
    let t21675 = (t21692 + 8) <= batch_size
    let t21674 = max(min(relu1_0_d_def__.s28.w.wi.epilogue.s, 2), 0)
    let t21676 = t21696 - t21663
    let t21680 = t21696 - f6_0_d_def__.w.min_realized
    let t21691 = (batch_size + t21673) - t21664
    let t21690 = (batch_size + t21672) - t21664
    let t21688 = (batch_size + t21671) - t21664
    for (relu1_0_d_def__.s28.w.wi, 0, t21674) {
     if (t21675) {
      let t19807.s = relu1_0_d_def__.s28.w.wi + t21676
      let t19808 = min(ramp(t21692, 1, 8), x8(batch_size + -1))
      let t19811 = schedule_features[t19808 + x8((max(relu1_0_d_def__.s28.w.wi + t21696, 0)*schedule_features.stride.2) + t21693)]
      let t20135 = ((((relu1_0_d_def__.n.extent_realized*t19807.s)*2) + relu1_0_d_def__.n.extent_realized)*2) + relu1_0_d_def__.s28.n.ni.base.s
      let t20136 = max(relu1_0_d_def__.s28.w.wi + t21696, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t20135*8, 1, 8) aligned(8, 0)] = relu1_0_d_def__[ramp(t20135*8, 1, 8) aligned(8, 0)] + select(x8(1.000000f) < t19811, ((schedule_features[t19808 + x8(t20136 - t21664)]*f6_0_d_def__[ramp(((relu1_0_d_def__.s28.w.wi + t21680)*f6_0_d_def__.n.extent_realized) + t21692, 1, 8)])*((schedule_features[t19808 + x8(t20136 + t21694)]/max(schedule_features[t19808 + x8(t20136 + t21695)], x8(1.000000f)))*t19811))*x8(0.000000f), x8(0.000000f))
     } else {
      let relu1_0_d_def__.s28.n.ni.new_max.s = batch_size - t21692
      let t21705 = max(relu1_0_d_def__.s28.w.wi + t21696, 0)*schedule_features.stride.2
      let t21697 = max(min(relu1_0_d_def__.s28.n.ni.new_max.s, 8), 0)
      let t21701 = t21692 - t21664
      let t21699 = (t21692 + t21693) + t21705
      let t21698 = (((((relu1_0_d_def__.s28.w.wi + t21676)*relu1_0_d_def__.n.extent_realized)*2) + relu1_0_d_def__.n.extent_realized)*16) + t21692
      let t21702 = ((relu1_0_d_def__.s28.w.wi + t21680)*f6_0_d_def__.n.extent_realized) + t21692
      let t21704 = t21692 + t21695
      let t21703 = t21692 + t21694
      for (relu1_0_d_def__.s28.n.ni, 0, t21697) {
       let t19814 = relu1_0_d_def__.s28.n.ni + t21698
       let t19817 = schedule_features[relu1_0_d_def__.s28.n.ni + t21699]
       relu1_0_d_def__[t19814] = relu1_0_d_def__[t19814] + select(1.000000f < t19817, ((schedule_features[(t21701 + t21705) + relu1_0_d_def__.s28.n.ni]*f6_0_d_def__[relu1_0_d_def__.s28.n.ni + t21702])*((schedule_features[(t21703 + t21705) + relu1_0_d_def__.s28.n.ni]/max(schedule_features[(t21704 + t21705) + relu1_0_d_def__.s28.n.ni], 1.000000f))*t19817))*0.000000f, 0.000000f)
      }
      let relu1_0_d_def__.s28.n.ni.new_max$1.s = batch_size - t21692
      let t21713 = max(relu1_0_d_def__.s28.w.wi + t21696, 0)*schedule_features.stride.2
      let t21714 = max(min(batch_size - t21692, 8), 0)
      let t21707 = max(min(relu1_0_d_def__.s28.n.ni.new_max$1.s, 8), 0) - t21714
      let t21711 = batch_size - t21664
      let t21709 = t21688 + t21713
      let t21708 = (((((relu1_0_d_def__.s28.w.wi + t21676)*relu1_0_d_def__.n.extent_realized)*2) + relu1_0_d_def__.n.extent_realized)*16) + t21692
      let t21712 = ((relu1_0_d_def__.s28.w.wi + t21680)*f6_0_d_def__.n.extent_realized) + t21692
      for (relu1_0_d_def__.s28.n.ni, t21714, t21707) {
       let t19820 = relu1_0_d_def__.s28.n.ni + t21708
       let t19823 = schedule_features[t21709 + -1]
       relu1_0_d_def__[t19820] = relu1_0_d_def__[t19820] + select(1.000000f < t19823, ((schedule_features[(t21711 + t21713) + -1]*f6_0_d_def__[relu1_0_d_def__.s28.n.ni + t21712])*((schedule_features[(t21690 + t21713) + -1]/max(schedule_features[(t21691 + t21713) + -1], 1.000000f))*t19823))*0.000000f, 0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21728 = schedule_features.stride.1*9
   let t21729 = schedule_features.stride.1*10
   let t21730 = schedule_features.stride.1*17
   let t21731 = schedule_features.stride.1*25
   let t21717 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21715 = (batch_size + 7)/8
   let t21718 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   let t21721 = float32(num_cores)
   parallel (relu1_0_d_def__.s29.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s29.n.ni.base.s = relu1_0_d_def__.s29.n.n.n % t21715
    let relu1_0_d_def__.s29.w.wi.base.s = relu1_0_d_def__.s29.n.n.n/t21715
    let relu1_0_d_def__.s29.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s29.w.wi.base.s*2)
    let t21752 = relu1_0_d_def__.s29.n.ni.base.s*8
    let t21753 = t21728 - t21718
    let t21754 = t21729 - t21718
    let t21755 = t21730 - t21718
    let t21756 = t21731 - t21718
    let t21757 = relu1_0_d_def__.s29.w.wi.base.s*2
    let t21733 = (t21752 + 8) <= batch_size
    let t21732 = max(min(relu1_0_d_def__.s29.w.wi.epilogue.s, 2), 0)
    let t21735 = t21757 - t21717
    let t21742 = t21757 - f6_0_d_def__.w.min_realized
    let t21751 = (batch_size + t21731) - t21718
    let t21750 = (batch_size + t21730) - t21718
    let t21749 = (batch_size + t21729) - t21718
    let t21748 = (batch_size + t21728) - t21718
    let t21734 = (relu1_0_d_def__.n.extent_realized*3) + t21752
    for (relu1_0_d_def__.s29.w.wi, 0, t21732) {
     if (t21733) {
      let t19825 = (((relu1_0_d_def__.s29.w.wi + t21735)*relu1_0_d_def__.n.extent_realized)*32) + t21734
      let t19826 = min(ramp(t21752, 1, 8), x8(batch_size + -1))
      let t19829 = max(schedule_features[t19826 + x8((max(relu1_0_d_def__.s29.w.wi + t21757, 0)*schedule_features.stride.2) + t21753)]*schedule_features[t19826 + x8((max(relu1_0_d_def__.s29.w.wi + t21757, 0)*schedule_features.stride.2) + t21754)], x8(1.000000f))/x8(t21721)
      let t20140 = max(relu1_0_d_def__.s29.w.wi + t21757, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19825, 1, 8)] = relu1_0_d_def__[ramp(t19825, 1, 8)] + select(schedule_features[t19826 + x8(t20140 + t21755)] == x8(0.000000f), x8(0.000000f), (schedule_features[t19826 + x8(t20140 + t21756)]*(f6_0_d_def__[ramp(((relu1_0_d_def__.s29.w.wi + t21742)*f6_0_d_def__.n.extent_realized) + t21752, 1, 8)]*((float32x8)ceil_f32(t19829)/max(t19829, x8(1.000000f)))))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s29.n.ni.new_max.s = batch_size - t21752
      let t21758 = max(min(relu1_0_d_def__.s29.n.ni.new_max.s, 8), 0)
      let t21760 = max(relu1_0_d_def__.s29.w.wi + t21757, 0)*schedule_features.stride.2
      let t21759 = (((relu1_0_d_def__.s29.w.wi + t21735)*relu1_0_d_def__.n.extent_realized)*32) + t21734
      let t21765 = ((relu1_0_d_def__.s29.w.wi + t21742)*f6_0_d_def__.n.extent_realized) + t21752
      let t21764 = t21752 + t21756
      let t21763 = t21752 + t21755
      let t21762 = t21752 + t21754
      let t21761 = t21752 + t21753
      for (relu1_0_d_def__.s29.n.ni, 0, t21758) {
       let t19832 = relu1_0_d_def__.s29.n.ni + t21759
       let t19835 = max(schedule_features[(t21760 + t21761) + relu1_0_d_def__.s29.n.ni]*schedule_features[(t21760 + t21762) + relu1_0_d_def__.s29.n.ni], 1.000000f)/t21721
       relu1_0_d_def__[t19832] = relu1_0_d_def__[t19832] + select(schedule_features[(t21760 + t21763) + relu1_0_d_def__.s29.n.ni] == 0.000000f, 0.000000f, (schedule_features[(t21760 + t21764) + relu1_0_d_def__.s29.n.ni]*(f6_0_d_def__[relu1_0_d_def__.s29.n.ni + t21765]*((float32)ceil_f32(t19835)/max(t19835, 1.000000f))))*0.000000f)
      }
      let relu1_0_d_def__.s29.n.ni.new_max$1.s = batch_size - t21752
      let t21771 = max(min(batch_size - t21752, 8), 0)
      let t21769 = max(relu1_0_d_def__.s29.w.wi + t21757, 0)*schedule_features.stride.2
      let t21767 = max(min(relu1_0_d_def__.s29.n.ni.new_max$1.s, 8), 0) - t21771
      let t21768 = (((relu1_0_d_def__.s29.w.wi + t21735)*relu1_0_d_def__.n.extent_realized)*32) + t21734
      let t21770 = ((relu1_0_d_def__.s29.w.wi + t21742)*f6_0_d_def__.n.extent_realized) + t21752
      for (relu1_0_d_def__.s29.n.ni, t21771, t21767) {
       let t19838 = relu1_0_d_def__.s29.n.ni + t21768
       let t19841 = max(schedule_features[(t21748 + t21769) + -1]*schedule_features[(t21749 + t21769) + -1], 1.000000f)/t21721
       relu1_0_d_def__[t19838] = relu1_0_d_def__[t19838] + select(schedule_features[(t21750 + t21769) + -1] == 0.000000f, 0.000000f, (schedule_features[(t21751 + t21769) + -1]*(f6_0_d_def__[relu1_0_d_def__.s29.n.ni + t21770]*((float32)ceil_f32(t19841)/max(t19841, 1.000000f))))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21786 = schedule_features.stride.1*9
   let t21787 = schedule_features.stride.1*10
   let t21788 = schedule_features.stride.1*17
   let t21789 = schedule_features.stride.1*22
   let t21790 = schedule_features.stride.1*24
   let t21773 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21772 = (batch_size + 7)/8
   let t21774 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   let t21777 = float32(num_cores)
   parallel (relu1_0_d_def__.s30.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s30.n.ni.base.s = relu1_0_d_def__.s30.n.n.n % t21772
    let relu1_0_d_def__.s30.w.wi.base.s = relu1_0_d_def__.s30.n.n.n/t21772
    let relu1_0_d_def__.s30.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s30.w.wi.base.s*2)
    let t21814 = relu1_0_d_def__.s30.n.ni.base.s*8
    let t21815 = t21786 - t21774
    let t21816 = t21787 - t21774
    let t21817 = t21788 - t21774
    let t21818 = t21789 - t21774
    let t21819 = t21790 - t21774
    let t21820 = relu1_0_d_def__.s30.w.wi.base.s*2
    let t21792 = (t21814 + 8) <= batch_size
    let t21791 = max(min(relu1_0_d_def__.s30.w.wi.epilogue.s, 2), 0)
    let t21794 = t21820 - t21773
    let t21800 = t21820 - f6_0_d_def__.w.min_realized
    let t21813 = (batch_size + t21790) - t21774
    let t21812 = (batch_size + t21789) - t21774
    let t21811 = (batch_size + t21788) - t21774
    let t21810 = (batch_size + t21787) - t21774
    let t21809 = (batch_size + t21786) - t21774
    let t21793 = (relu1_0_d_def__.s30.n.ni.base.s*4) + relu1_0_d_def__.n.extent_realized
    for (relu1_0_d_def__.s30.w.wi, 0, t21791) {
     if (t21792) {
      let t19843 = (((relu1_0_d_def__.s30.w.wi + t21794)*relu1_0_d_def__.n.extent_realized)*16) + t21793
      let t19844 = min(ramp(t21814, 1, 8), x8(batch_size + -1))
      let t19847 = max(schedule_features[t19844 + x8((max(relu1_0_d_def__.s30.w.wi + t21820, 0)*schedule_features.stride.2) + t21815)]*schedule_features[t19844 + x8((max(relu1_0_d_def__.s30.w.wi + t21820, 0)*schedule_features.stride.2) + t21816)], x8(1.000000f))/x8(t21777)
      let t20146 = max(relu1_0_d_def__.s30.w.wi + t21820, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19843*2, 1, 8) aligned(2, 0)] = relu1_0_d_def__[ramp(t19843*2, 1, 8) aligned(2, 0)] + select(schedule_features[t19844 + x8(t20146 + t21817)] == x8(0.000000f), x8(0.000000f), ((f6_0_d_def__[ramp(((relu1_0_d_def__.s30.w.wi + t21800)*f6_0_d_def__.n.extent_realized) + t21814, 1, 8)]*((float32x8)ceil_f32(t19847)/max(t19847, x8(1.000000f))))*(schedule_features[t19844 + x8(t20146 + t21818)]*schedule_features[t19844 + x8(t20146 + t21819)]))*x8(0.000000f))
     } else {
      let relu1_0_d_def__.s30.n.ni.new_max$1.s = batch_size - t21814
      let t21821 = max(min(relu1_0_d_def__.s30.n.ni.new_max$1.s, 8), 0)
      let t21823 = max(relu1_0_d_def__.s30.w.wi + t21820, 0)*schedule_features.stride.2
      let t21822 = (((((relu1_0_d_def__.s30.w.wi + t21794)*relu1_0_d_def__.n.extent_realized)*16) + relu1_0_d_def__.n.extent_realized)*2) + t21814
      let t21827 = ((relu1_0_d_def__.s30.w.wi + t21800)*f6_0_d_def__.n.extent_realized) + t21814
      let t21829 = t21814 + t21819
      let t21828 = t21814 + t21818
      let t21826 = t21814 + t21817
      let t21825 = t21814 + t21816
      let t21824 = t21814 + t21815
      for (relu1_0_d_def__.s30.n.ni, 0, t21821) {
       let t19850 = relu1_0_d_def__.s30.n.ni + t21822
       let t19853 = max(schedule_features[(t21823 + t21824) + relu1_0_d_def__.s30.n.ni]*schedule_features[(t21823 + t21825) + relu1_0_d_def__.s30.n.ni], 1.000000f)/t21777
       relu1_0_d_def__[t19850] = relu1_0_d_def__[t19850] + select(schedule_features[(t21823 + t21826) + relu1_0_d_def__.s30.n.ni] == 0.000000f, 0.000000f, ((f6_0_d_def__[relu1_0_d_def__.s30.n.ni + t21827]*((float32)ceil_f32(t19853)/max(t19853, 1.000000f)))*(schedule_features[(t21823 + t21828) + relu1_0_d_def__.s30.n.ni]*schedule_features[(t21823 + t21829) + relu1_0_d_def__.s30.n.ni]))*0.000000f)
      }
      let relu1_0_d_def__.s30.n.ni.new_max$2.s = batch_size - t21814
      let t21835 = max(min(batch_size - t21814, 8), 0)
      let t21833 = max(relu1_0_d_def__.s30.w.wi + t21820, 0)*schedule_features.stride.2
      let t21831 = max(min(relu1_0_d_def__.s30.n.ni.new_max$2.s, 8), 0) - t21835
      let t21832 = (((((relu1_0_d_def__.s30.w.wi + t21794)*relu1_0_d_def__.n.extent_realized)*16) + relu1_0_d_def__.n.extent_realized)*2) + t21814
      let t21834 = ((relu1_0_d_def__.s30.w.wi + t21800)*f6_0_d_def__.n.extent_realized) + t21814
      for (relu1_0_d_def__.s30.n.ni, t21835, t21831) {
       let t19856 = relu1_0_d_def__.s30.n.ni + t21832
       let t19859 = max(schedule_features[(t21809 + t21833) + -1]*schedule_features[(t21810 + t21833) + -1], 1.000000f)/t21777
       relu1_0_d_def__[t19856] = relu1_0_d_def__[t19856] + select(schedule_features[(t21811 + t21833) + -1] == 0.000000f, 0.000000f, ((f6_0_d_def__[relu1_0_d_def__.s30.n.ni + t21834]*((float32)ceil_f32(t19859)/max(t19859, 1.000000f)))*(schedule_features[(t21812 + t21833) + -1]*schedule_features[(t21813 + t21833) + -1]))*0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21848 = schedule_features.stride.1*9
   let t21849 = schedule_features.stride.1*10
   let t21850 = schedule_features.stride.1*17
   let t21851 = schedule_features.stride.1*25
   let t21837 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21836 = (batch_size + 7)/8
   let t21838 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   let t21841 = float32(num_cores)
   parallel (relu1_0_d_def__.s31.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s31.n.ni.base.s = relu1_0_d_def__.s31.n.n.n % t21836
    let relu1_0_d_def__.s31.w.wi.base.s = relu1_0_d_def__.s31.n.n.n/t21836
    let relu1_0_d_def__.s31.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s31.w.wi.base.s*2)
    let t21872 = relu1_0_d_def__.s31.n.ni.base.s*8
    let t21873 = t21848 - t21838
    let t21874 = t21849 - t21838
    let t21875 = t21850 - t21838
    let t21876 = t21851 - t21838
    let t21877 = relu1_0_d_def__.s31.w.wi.base.s*2
    let t21853 = (t21872 + 8) <= batch_size
    let t21852 = max(min(relu1_0_d_def__.s31.w.wi.epilogue.s, 2), 0)
    let t21855 = t21877 - t21837
    let t21862 = t21877 - f6_0_d_def__.w.min_realized
    let t21871 = (batch_size + t21851) - t21838
    let t21870 = (batch_size + t21850) - t21838
    let t21869 = (batch_size + t21849) - t21838
    let t21868 = (batch_size + t21848) - t21838
    for (relu1_0_d_def__.s31.w.wi, 0, t21852) {
     if (t21853) {
      let t19861 = (((relu1_0_d_def__.s31.w.wi + t21855)*relu1_0_d_def__.n.extent_realized)*32) + (relu1_0_d_def__.n.extent_realized + t21872)
      let t19862 = min(ramp(t21872, 1, 8), x8(batch_size + -1))
      let t19865 = max(schedule_features[t19862 + x8((max(relu1_0_d_def__.s31.w.wi + t21877, 0)*schedule_features.stride.2) + t21873)]*schedule_features[t19862 + x8((max(relu1_0_d_def__.s31.w.wi + t21877, 0)*schedule_features.stride.2) + t21874)], x8(1.000000f))/x8(t21841)
      let t20152 = max(relu1_0_d_def__.s31.w.wi + t21877, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t19861, 1, 8)] = relu1_0_d_def__[ramp(t19861, 1, 8)] + select(schedule_features[t19862 + x8(t20152 + t21875)] == x8(0.000000f), (schedule_features[t19862 + x8(t20152 + t21876)]*(f6_0_d_def__[ramp(((relu1_0_d_def__.s31.w.wi + t21862)*f6_0_d_def__.n.extent_realized) + t21872, 1, 8)]*((float32x8)ceil_f32(t19865)/max(t19865, x8(1.000000f)))))*x8(0.000000f), x8(0.000000f))
     } else {
      let relu1_0_d_def__.s31.n.ni.new_max.s = batch_size - t21872
      let t21878 = max(min(relu1_0_d_def__.s31.n.ni.new_max.s, 8), 0)
      let t21880 = max(relu1_0_d_def__.s31.w.wi + t21877, 0)*schedule_features.stride.2
      let t21879 = (((relu1_0_d_def__.s31.w.wi + t21855)*relu1_0_d_def__.n.extent_realized)*32) + (relu1_0_d_def__.n.extent_realized + t21872)
      let t21885 = ((relu1_0_d_def__.s31.w.wi + t21862)*f6_0_d_def__.n.extent_realized) + t21872
      let t21884 = t21872 + t21876
      let t21883 = t21872 + t21875
      let t21882 = t21872 + t21874
      let t21881 = t21872 + t21873
      for (relu1_0_d_def__.s31.n.ni, 0, t21878) {
       let t19868 = relu1_0_d_def__.s31.n.ni + t21879
       let t19871 = max(schedule_features[(t21880 + t21881) + relu1_0_d_def__.s31.n.ni]*schedule_features[(t21880 + t21882) + relu1_0_d_def__.s31.n.ni], 1.000000f)/t21841
       relu1_0_d_def__[t19868] = relu1_0_d_def__[t19868] + select(schedule_features[(t21880 + t21883) + relu1_0_d_def__.s31.n.ni] == 0.000000f, (schedule_features[(t21880 + t21884) + relu1_0_d_def__.s31.n.ni]*(f6_0_d_def__[relu1_0_d_def__.s31.n.ni + t21885]*((float32)ceil_f32(t19871)/max(t19871, 1.000000f))))*0.000000f, 0.000000f)
      }
      let relu1_0_d_def__.s31.n.ni.new_max$1.s = batch_size - t21872
      let t21891 = max(min(batch_size - t21872, 8), 0)
      let t21889 = max(relu1_0_d_def__.s31.w.wi + t21877, 0)*schedule_features.stride.2
      let t21887 = max(min(relu1_0_d_def__.s31.n.ni.new_max$1.s, 8), 0) - t21891
      let t21888 = (((relu1_0_d_def__.s31.w.wi + t21855)*relu1_0_d_def__.n.extent_realized)*32) + (relu1_0_d_def__.n.extent_realized + t21872)
      let t21890 = ((relu1_0_d_def__.s31.w.wi + t21862)*f6_0_d_def__.n.extent_realized) + t21872
      for (relu1_0_d_def__.s31.n.ni, t21891, t21887) {
       let t19874 = relu1_0_d_def__.s31.n.ni + t21888
       let t19877 = max(schedule_features[(t21868 + t21889) + -1]*schedule_features[(t21869 + t21889) + -1], 1.000000f)/t21841
       relu1_0_d_def__[t19874] = relu1_0_d_def__[t19874] + select(schedule_features[(t21870 + t21889) + -1] == 0.000000f, (schedule_features[(t21871 + t21889) + -1]*(f6_0_d_def__[relu1_0_d_def__.s31.n.ni + t21890]*((float32)ceil_f32(t19877)/max(t19877, 1.000000f))))*0.000000f, 0.000000f)
      }
     }
    }
   }
  }
  consume f6_0_d_def__ {
   let t21906 = schedule_features.stride.1*9
   let t21907 = schedule_features.stride.1*10
   let t21908 = schedule_features.stride.1*17
   let t21909 = schedule_features.stride.1*22
   let t21910 = schedule_features.stride.1*24
   let t21893 = min(relu1_0_d_def__.w.min_realized.s, 0)
   let t21892 = (batch_size + 7)/8
   let t21894 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   let t21897 = float32(num_cores)
   parallel (relu1_0_d_def__.s32.n.n.n, 0, relu1_0_d_def__.s0.n.n.n.loop_extent) {
    let relu1_0_d_def__.s32.n.ni.base.s = relu1_0_d_def__.s32.n.n.n % t21892
    let relu1_0_d_def__.s32.w.wi.base.s = relu1_0_d_def__.s32.n.n.n/t21892
    let relu1_0_d_def__.s32.w.wi.epilogue.s = num_stages - (relu1_0_d_def__.s32.w.wi.base.s*2)
    let t21933 = relu1_0_d_def__.s32.n.ni.base.s*8
    let t21934 = t21906 - t21894
    let t21935 = t21907 - t21894
    let t21936 = t21908 - t21894
    let t21937 = t21909 - t21894
    let t21938 = t21910 - t21894
    let t21939 = relu1_0_d_def__.s32.w.wi.base.s*2
    let t21912 = (t21933 + 8) <= batch_size
    let t21911 = max(min(relu1_0_d_def__.s32.w.wi.epilogue.s, 2), 0)
    let t21913 = t21939 - t21893
    let t21919 = t21939 - f6_0_d_def__.w.min_realized
    let t21932 = (batch_size + t21910) - t21894
    let t21931 = (batch_size + t21909) - t21894
    let t21930 = (batch_size + t21908) - t21894
    let t21929 = (batch_size + t21907) - t21894
    let t21928 = (batch_size + t21906) - t21894
    for (relu1_0_d_def__.s32.w.wi, 0, t21911) {
     if (t21912) {
      let t19879.s = relu1_0_d_def__.s32.w.wi + t21913
      let t19880 = min(ramp(t21933, 1, 8), x8(batch_size + -1))
      let t19883 = max(schedule_features[t19880 + x8((max(relu1_0_d_def__.s32.w.wi + t21939, 0)*schedule_features.stride.2) + t21934)]*schedule_features[t19880 + x8((max(relu1_0_d_def__.s32.w.wi + t21939, 0)*schedule_features.stride.2) + t21935)], x8(1.000000f))/x8(t21897)
      let t20158 = ((relu1_0_d_def__.n.extent_realized*t19879.s)*4) + relu1_0_d_def__.s32.n.ni.base.s
      let t20159 = max(relu1_0_d_def__.s32.w.wi + t21939, 0)*schedule_features.stride.2
      relu1_0_d_def__[ramp(t20158*8, 1, 8) aligned(8, 0)] = relu1_0_d_def__[ramp(t20158*8, 1, 8) aligned(8, 0)] + select(schedule_features[t19880 + x8(t20159 + t21936)] == x8(0.000000f), ((f6_0_d_def__[ramp(((relu1_0_d_def__.s32.w.wi + t21919)*f6_0_d_def__.n.extent_realized) + t21933, 1, 8)]*((float32x8)ceil_f32(t19883)/max(t19883, x8(1.000000f))))*(schedule_features[t19880 + x8(t20159 + t21937)]*schedule_features[t19880 + x8(t20159 + t21938)]))*x8(0.000000f), x8(0.000000f))
     } else {
      let relu1_0_d_def__.s32.n.ni.new_max.s = batch_size - t21933
      let t21940 = max(min(relu1_0_d_def__.s32.n.ni.new_max.s, 8), 0)
      let t21942 = max(relu1_0_d_def__.s32.w.wi + t21939, 0)*schedule_features.stride.2
      let t21941 = (((relu1_0_d_def__.s32.w.wi + t21913)*relu1_0_d_def__.n.extent_realized)*32) + t21933
      let t21946 = ((relu1_0_d_def__.s32.w.wi + t21919)*f6_0_d_def__.n.extent_realized) + t21933
      let t21948 = t21933 + t21938
      let t21947 = t21933 + t21937
      let t21945 = t21933 + t21936
      let t21944 = t21933 + t21935
      let t21943 = t21933 + t21934
      for (relu1_0_d_def__.s32.n.ni, 0, t21940) {
       let t19886 = relu1_0_d_def__.s32.n.ni + t21941
       let t19889 = max(schedule_features[(t21942 + t21943) + relu1_0_d_def__.s32.n.ni]*schedule_features[(t21942 + t21944) + relu1_0_d_def__.s32.n.ni], 1.000000f)/t21897
       relu1_0_d_def__[t19886] = relu1_0_d_def__[t19886] + select(schedule_features[(t21942 + t21945) + relu1_0_d_def__.s32.n.ni] == 0.000000f, ((f6_0_d_def__[relu1_0_d_def__.s32.n.ni + t21946]*((float32)ceil_f32(t19889)/max(t19889, 1.000000f)))*(schedule_features[(t21942 + t21947) + relu1_0_d_def__.s32.n.ni]*schedule_features[(t21942 + t21948) + relu1_0_d_def__.s32.n.ni]))*0.000000f, 0.000000f)
      }
      let relu1_0_d_def__.s32.n.ni.new_max$1.s = batch_size - t21933
      let t21954 = max(min(batch_size - t21933, 8), 0)
      let t21952 = max(relu1_0_d_def__.s32.w.wi + t21939, 0)*schedule_features.stride.2
      let t21950 = max(min(relu1_0_d_def__.s32.n.ni.new_max$1.s, 8), 0) - t21954
      let t21951 = (((relu1_0_d_def__.s32.w.wi + t21913)*relu1_0_d_def__.n.extent_realized)*32) + t21933
      let t21953 = ((relu1_0_d_def__.s32.w.wi + t21919)*f6_0_d_def__.n.extent_realized) + t21933
      for (relu1_0_d_def__.s32.n.ni, t21954, t21950) {
       let t19892 = relu1_0_d_def__.s32.n.ni + t21951
       let t19895 = max(schedule_features[(t21928 + t21952) + -1]*schedule_features[(t21929 + t21952) + -1], 1.000000f)/t21897
       relu1_0_d_def__[t19892] = relu1_0_d_def__[t19892] + select(schedule_features[(t21930 + t21952) + -1] == 0.000000f, ((f6_0_d_def__[relu1_0_d_def__.s32.n.ni + t21953]*((float32)ceil_f32(t19895)/max(t19895, 1.000000f)))*(schedule_features[(t21931 + t21952) + -1]*schedule_features[(t21932 + t21952) + -1]))*0.000000f, 0.000000f)
      }
     }
    }
   }
  }
  free f6_0_d_def__
 }
 allocate sum_1_d_def__[float32 * relu1_0_d_def__.n.extent_realized]
 produce sum_1_d_def__ {
  consume sum$1_1_d_def__ {
   let t21955 = max((batch_size + 7)/8, 0)
   let t21956 = max(batch_size/8, 0)
   parallel (sum_1_d_def__.s0.n.n, 0, t21955) {
    if (sum_1_d_def__.s0.n.n < t21956) {
     sum_1_d_def__[ramp(sum_1_d_def__.s0.n.n*8, 1, 8) aligned(8, 0)] = select(x8(batch_size) < ramp((sum_1_d_def__.s0.n.n*8) + 1, 1, 8), x8(0.000000f), x8(sum$1_1_d_def__[0]))*x8(0.000010f)
    } else {
     let sum_1_d_def__.s0.n.ni.new_max.s = batch_size - (sum_1_d_def__.s0.n.n*8)
     let t21957 = max(min(sum_1_d_def__.s0.n.ni.new_max.s, 8), 0)
     let t21958 = sum_1_d_def__.s0.n.n*8
     for (sum_1_d_def__.s0.n.ni, 0, t21957) {
      sum_1_d_def__[sum_1_d_def__.s0.n.ni + t21958] = sum$1_1_d_def__[0]*0.000010f
     }
    }
   }
  }
 }
 free sum$1_1_d_def__
 let conv1_stage2_1_d_def__.n.extent_realized = max(max(min(batch_size, 2) + (((batch_size + -1)/2)*2), batch_size), relu1_0_d_def__.n.extent_realized)
 allocate conv1_stage2_1_d_def__[float32 * 32 * num_stages * conv1_stage2_1_d_def__.n.extent_realized]
 produce conv1_stage2_1_d_def__ {
  consume sum_1_d_def__ {
   consume relu1_0_d_def__ {
    consume conv1_stage2 {
     let t21965 = max(batch_size/8, 0)
     let t21964 = max(((batch_size + 7)/8) - t21965, 0)
     let t21960 = max(num_stages, 0)
     let t21962 = min(schedule_features.min.0.required.s, 0)
     let t21963 = min(relu1_0_d_def__.w.min_realized.s, 0)
     let t21959 = min(num_stages, 0)
     parallel (conv1_stage2_1_d_def__.s0.c.c, 0, 16) {
      let t21966 = conv1_stage2_1_d_def__.s0.c.c*2
      for (conv1_stage2_1_d_def__.s0.w, t21959, t21960) {
       let t21974 = (conv1_stage2.n.extent_realized*conv1_stage2_1_d_def__.s0.w)*32
       let t21975 = (max(min(num_stages + -1, conv1_stage2_1_d_def__.s0.w), 0)*conv1_stage2.n.extent_realized)*32
       let t21968 = (conv1_stage2_1_d_def__.s0.w + 1) <= num_stages
       let t21970 = ((conv1_stage2_1_d_def__.s0.w - t21963)*relu1_0_d_def__.n.extent_realized)*32
       let t21971 = (conv1_stage2_1_d_def__.n.extent_realized*conv1_stage2_1_d_def__.s0.w)*32
       for (conv1_stage2_1_d_def__.s0.c.ci, 0, 2) {
        let t21977 = t21975 - t21962
        let t21978 = t21974 - t21962
        let t21976 = conv1_stage2_1_d_def__.s0.c.ci + t21966
        for (conv1_stage2_1_d_def__.s0.n.n, 0, t21965) {
         let t20166 = conv1_stage2.n.extent_realized*t21976
         conv1_stage2_1_d_def__[ramp((conv1_stage2_1_d_def__.s0.n.n*8) + ((conv1_stage2_1_d_def__.n.extent_realized*t21976) + t21971), 1, 8)] = select((conv1_stage2[ramp((conv1_stage2_1_d_def__.s0.n.n*8) + (t20166 + t21977), 1, 8)] <= x8(0.000000f)) && x8(t21968), x8(0.000000f) - sum_1_d_def__[ramp(conv1_stage2_1_d_def__.s0.n.n*8, 1, 8) aligned(8, 0)], x8(0.000000f)) + select(conv1_stage2[ramp((conv1_stage2_1_d_def__.s0.n.n*8) + (t20166 + t21978), 1, 8)] < x8(0.000000f), x8(0.000000f), relu1_0_d_def__[ramp((conv1_stage2_1_d_def__.s0.n.n*8) + ((relu1_0_d_def__.n.extent_realized*t21976) + t21970), 1, 8)])
        }
        let t21979 = conv1_stage2_1_d_def__.s0.c.ci + t21966
        for (conv1_stage2_1_d_def__.s0.n.n, t21965, t21964) {
         if (((conv1_stage2_1_d_def__.s0.n.n*8) + 8) <= batch_size) {
          let t19899 = min(ramp(conv1_stage2_1_d_def__.s0.n.n*8, 1, 8), x8(batch_size + -1))
          let t20169 = conv1_stage2.n.extent_realized*t21979
          conv1_stage2_1_d_def__[ramp((conv1_stage2_1_d_def__.s0.n.n*8) + ((conv1_stage2_1_d_def__.n.extent_realized*t21979) + t21971), 1, 8)] = select((conv1_stage2[t19899 + x8((t21975 - t21962) + t20169)] <= x8(0.000000f)) && x8(t21968), x8(0.000000f) - sum_1_d_def__[ramp(conv1_stage2_1_d_def__.s0.n.n*8, 1, 8) aligned(8, 0)], x8(0.000000f)) + select(conv1_stage2[t19899 + x8((t21974 - t21962) + t20169)] < x8(0.000000f), x8(0.000000f), relu1_0_d_def__[ramp((conv1_stage2_1_d_def__.s0.n.n*8) + ((relu1_0_d_def__.n.extent_realized*t21979) + t21970), 1, 8)])
         } else {
          let conv1_stage2_1_d_def__.s0.n.ni.new_max.s = batch_size - (conv1_stage2_1_d_def__.s0.n.n*8)
          let t21988 = conv1_stage2_1_d_def__.s0.n.n*8
          let t21982 = min(conv1_stage2_1_d_def__.s0.n.ni.new_max.s, 8)
          let t21984 = conv1_stage2.n.extent_realized*t21979
          let t21983 = t21988 - t21962
          let t21986 = ((relu1_0_d_def__.n.extent_realized*t21979) + t21970) + t21988
          let t21987 = ((conv1_stage2_1_d_def__.n.extent_realized*t21979) + t21971) + t21988
          for (conv1_stage2_1_d_def__.s0.n.ni, 0, t21982) {
           let t19904 = conv1_stage2_1_d_def__.s0.n.ni + t21983
           conv1_stage2_1_d_def__[conv1_stage2_1_d_def__.s0.n.ni + t21987] = select((conv1_stage2[(t21975 + t21984) + t19904] <= 0.000000f) && t21968, 0.000000f - sum_1_d_def__[conv1_stage2_1_d_def__.s0.n.ni + t21988], 0.000000f) + select(conv1_stage2[(t21974 + t21984) + t19904] < 0.000000f, 0.000000f, relu1_0_d_def__[conv1_stage2_1_d_def__.s0.n.ni + t21986])
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 free relu1_0_d_def__
 free sum_1_d_def__
 allocate conv1_stage1_1_d_def__[float32 * 32 * num_stages]
 produce conv1_stage1_1_d_def__ {
  let t21991 = max(num_stages/8, 0)
  let t21990 = max(((num_stages + 7)/8) - t21991, 0)
  parallel (conv1_stage1_1_d_def__.s0.c, 0, 32) {
   let t21992 = conv1_stage1_1_d_def__.s0.c*num_stages
   for (conv1_stage1_1_d_def__.s0.w.w, 0, t21991) {
    conv1_stage1_1_d_def__[ramp((conv1_stage1_1_d_def__.s0.w.w*8) + t21992, 1, 8)] = x8(0.000000f)
   }
   let t21993 = conv1_stage1_1_d_def__.s0.c*num_stages
   for (conv1_stage1_1_d_def__.s0.w.w, t21991, t21990) {
    let conv1_stage1_1_d_def__.s0.w.wi.new_max.s = num_stages - (conv1_stage1_1_d_def__.s0.w.w*8)
    let t21994 = min(conv1_stage1_1_d_def__.s0.w.wi.new_max.s, 8)
    let t21995 = (conv1_stage1_1_d_def__.s0.w.w*8) + t21993
    for (conv1_stage1_1_d_def__.s0.w.wi, 0, t21994) {
     conv1_stage1_1_d_def__[conv1_stage1_1_d_def__.s0.w.wi + t21995] = 0.000000f
    }
   }
  }
  consume conv1_stage2_1_d_def__ {
   let t22002 = (batch_size + 1)/2
   let t22003 = max(batch_size/2, 0)
   let t22004 = max(num_stages/8, 0)
   let t22001 = max(t22002, 0)
   let t22000 = max(((num_stages + 7)/8) - t22004, 0)
   let t21999 = max(t22002 - t22003, 0)
   parallel (conv1_stage1_1_d_def__.s1.c, 0, 32) {
    let t22007 = conv1_stage1_1_d_def__.s1.c*num_stages
    let t22005 = conv1_stage1_1_d_def__.s1.c*conv1_stage2_1_d_def__.n.extent_realized
    for (conv1_stage1_1_d_def__.s1.w.w, 0, t22004) {
     let t22013 = conv1_stage1_1_d_def__.s1.w.w*8
     let t22009 = t22013 < num_stages
     let t22011 = conv1_stage2_1_d_def__.n.extent_realized*32
     let t22008 = num_stages - t22013
     let t22010 = ((conv1_stage1_1_d_def__.s1.w.w*conv1_stage2_1_d_def__.n.extent_realized)*256) + t22005
     let t22012 = t22007 + t22013
     for (conv1_stage1_1_d_def__.s1.r997$x.r997$x, 0, t22003) {
      allocate conv1_stage2_0_d_def__$1[float32 * 1 * min(t22008, 8) * 1] in Stack
      let t22014 = (conv1_stage1_1_d_def__.s1.r997$x.r997$x*2) + t22010
      for (conv1_stage1_1_d_def__.s1.r997$x.r1029$xi, 0, 2) {
       if (t22009) {
        produce conv1_stage2_0_d_def__$1 {
         conv1_stage2_0_d_def__$1[ramp(0, 1, 8)] = conv1_stage2_1_d_def__[ramp(conv1_stage1_1_d_def__.s1.r997$x.r1029$xi + t22014, t22011, 8)]
        }
       }
       consume conv1_stage2_0_d_def__$1 {
        conv1_stage1_1_d_def__[ramp(t22012, 1, 8)] = conv1_stage1_1_d_def__[ramp(t22012, 1, 8)] + conv1_stage2_0_d_def__$1[ramp(0, 1, 8)]
       }
      }
      free conv1_stage2_0_d_def__$1
     }
     let t22020 = conv1_stage1_1_d_def__.s1.w.w*8
     let t22016 = t22020 < num_stages
     let t22018 = conv1_stage2_1_d_def__.n.extent_realized*32
     let t22015 = num_stages - t22020
     let t22017 = ((conv1_stage1_1_d_def__.s1.w.w*conv1_stage2_1_d_def__.n.extent_realized)*256) + t22005
     let t22019 = t22007 + t22020
     for (conv1_stage1_1_d_def__.s1.r997$x.r997$x, t22003, t21999) {
      allocate conv1_stage2_0_d_def__$1[float32 * 1 * min(t22015, 8) * 1] in Stack
      let conv1_stage1_1_d_def__.s1.r997$x.r1029$xi.new_max.s = batch_size - (conv1_stage1_1_d_def__.s1.r997$x.r997$x*2)
      let t22021 = min(conv1_stage1_1_d_def__.s1.r997$x.r1029$xi.new_max.s, 2)
      let t22022 = (conv1_stage1_1_d_def__.s1.r997$x.r997$x*2) + t22017
      for (conv1_stage1_1_d_def__.s1.r997$x.r1029$xi, 0, t22021) {
       if (t22016) {
        produce conv1_stage2_0_d_def__$1 {
         conv1_stage2_0_d_def__$1[ramp(0, 1, 8)] = conv1_stage2_1_d_def__[ramp(conv1_stage1_1_d_def__.s1.r997$x.r1029$xi + t22022, t22018, 8)]
        }
       }
       consume conv1_stage2_0_d_def__$1 {
        conv1_stage1_1_d_def__[ramp(t22019, 1, 8)] = conv1_stage1_1_d_def__[ramp(t22019, 1, 8)] + conv1_stage2_0_d_def__$1[ramp(0, 1, 8)]
       }
      }
      free conv1_stage2_0_d_def__$1
     }
    }
    let t22024 = conv1_stage1_1_d_def__.s1.c*num_stages
    let t22023 = conv1_stage1_1_d_def__.s1.c*conv1_stage2_1_d_def__.n.extent_realized
    for (conv1_stage1_1_d_def__.s1.w.w, t22004, t22000) {
     let t22029 = conv1_stage1_1_d_def__.s1.w.w*8
     let t22026 = max(t22029 - num_stages, -8)
     let t22025 = num_stages - t22029
     let t22028 = t22024 + t22029
     for (conv1_stage1_1_d_def__.s1.r997$x.r997$x, 0, t22001) {
      allocate conv1_stage2_0_d_def__$1[float32 * 1 * min(t22025, 8) * 1] in Stack
      let conv1_stage1_1_d_def__.s1.r997_x.r1029_xi.new_max$1.s = batch_size - (conv1_stage1_1_d_def__.s1.r997$x.r997$x*2)
      let t22031 = min(t22025, 8)
      let t22030 = min(conv1_stage1_1_d_def__.s1.r997_x.r1029_xi.new_max$1.s, 2)
      let t22032 = (conv1_stage1_1_d_def__.s1.r997$x.r997$x*2) + t22023
      for (conv1_stage1_1_d_def__.s1.r997$x.r1029$xi, 0, t22030) {
       produce conv1_stage2_0_d_def__$1 {
        let t22033 = conv1_stage1_1_d_def__.s1.r997$x.r1029$xi + t22032
        for (conv1_stage2_0_d_def__$1.s0.w.wi, 0, t22031) {
         if ((conv1_stage2_0_d_def__$1.s0.w.wi + t22026) <= -1) {
          conv1_stage2_0_d_def__$1[conv1_stage2_0_d_def__$1.s0.w.wi] = conv1_stage2_1_d_def__[(((conv1_stage2_0_d_def__$1.s0.w.wi + t22029)*conv1_stage2_1_d_def__.n.extent_realized)*32) + t22033]
         }
        }
       }
       consume conv1_stage2_0_d_def__$1 {
        for (conv1_stage1_1_d_def__.s1.w.wi, 0, t22031) {
         let t19909 = conv1_stage1_1_d_def__.s1.w.wi + t22028
         conv1_stage1_1_d_def__[t19909] = conv1_stage1_1_d_def__[t19909] + conv1_stage2_0_d_def__$1[conv1_stage1_1_d_def__.s1.w.wi]
        }
       }
      }
      free conv1_stage2_0_d_def__$1
     }
    }
   }
  }
 }
 allocate head1_conv_1_d_def__[float32 * 8 * num_stages]
 produce head1_conv_1_d_def__ {
  parallel (head1_conv_1_d_def__.s0.w, 0, num_stages) {
   head1_conv_1_d_def__[ramp(head1_conv_1_d_def__.s0.w*8, 1, 8) aligned(8, 0)] = x8(0.000000f)
  }
  consume conv1_stage1_1_d_def__ {
   parallel (head1_conv_1_d_def__.s1.w, 0, num_stages) {
    for (head1_conv_1_d_def__.s1.r1152$x, 0, 32) {
     head1_conv_1_d_def__[ramp(head1_conv_1_d_def__.s1.w*8, 1, 8) aligned(8, 0)] = head1_conv_1_d_def__[ramp(head1_conv_1_d_def__.s1.w*8, 1, 8) aligned(8, 0)] + (filter1[ramp(head1_conv_1_d_def__.s1.r1152$x, filter1.stride.1, 8)]*x8(conv1_stage1_1_d_def__[(head1_conv_1_d_def__.s1.r1152$x*num_stages) + head1_conv_1_d_def__.s1.w]))
    }
   }
  }
 }
 produce updated_head1_filter {
  consume head1_conv_1_d_def__ {
   let t22042 = pipeline_features.min.2*pipeline_features.stride.2
   let t22043 = pipeline_features.min.1*pipeline_features.stride.1
   let t22036 = max(num_stages, 0)
   let t22035 = min(num_stages, 0)
   let t22041 = ((updated_head1_filter.stride.2*2) + updated_head1_filter.stride.3)*3
   let t22038 = updated_head1_filter.stride.3*3
   let t22039 = (((pipeline_features.stride.1*6) - t22042) - t22043) - pipeline_features.min.0
   let t22037 = (t22042 + t22043) + pipeline_features.min.0
   parallel (updated_head1_filter.s1.v241.v241.v241, 0, 80) {
    if (updated_head1_filter.s1.v241.v241.v241 < 60) {
     let t22047 = (updated_head1_filter.s1.v241.v241.v241 % 20)*2
     let t22045 = (updated_head1_filter.s1.v241.v241.v241/20)*2
     let t22044 = t22047 - t22037
     for (updated_head1_filter.s1.v242.v209i, 0, 2) {
      let t22051 = t22045 + updated_head1_filter.s1.v242.v209i
      let t22049 = head1_filter.stride.2*t22051
      let t22050 = (t22051*updated_head1_filter.stride.2) + t22038
      let t22048 = (pipeline_features.stride.1*t22051) + t22044
      for (updated_head1_filter.s1.v241.v208i, 0, 2) {
       allocate squashed_head1_filter_0_d_def__[float32 * 8] in Stack
       produce squashed_head1_filter_0_d_def__ {
        squashed_head1_filter_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
        let t22052 = t22048 + updated_head1_filter.s1.v241.v208i
        for (squashed_head1_filter_0_d_def__.s1.r1275$x, t22035, t22036) {
         squashed_head1_filter_0_d_def__[ramp(0, 1, 8)] = squashed_head1_filter_0_d_def__[ramp(0, 1, 8)] + (head1_conv_1_d_def__[ramp(squashed_head1_filter_0_d_def__.s1.r1275$x*8, 1, 8) aligned(8, 0)]*x8(pipeline_features[(pipeline_features.stride.2*squashed_head1_filter_0_d_def__.s1.r1275$x) + t22052]))
        }
       }
       consume squashed_head1_filter_0_d_def__ {
        let t19912 = (float32x8)exp_f32(x8(0.000000f) - head1_filter[ramp(((t22047 + updated_head1_filter.s1.v241.v208i)*head1_filter.stride.1) + t22049, 1, 8)])
        updated_head1_filter[ramp(((t22047 + updated_head1_filter.s1.v241.v208i)*updated_head1_filter.stride.1) + t22050, 1, 8)] = x8(0.000000f) - (((x8(0.000000f) - squashed_head1_filter_0_d_def__[ramp(0, 1, 8)])/((t19912 + x8(1.000000f))*(t19912 + x8(1.000000f))))*t19912)
       }
       free squashed_head1_filter_0_d_def__
      }
     }
    } else {
     let t22056 = (updated_head1_filter.s1.v241.v241.v241 % 20)*2
     let t22054 = head1_filter.stride.2*6
     let t22053 = t22039 + t22056
     for (updated_head1_filter.s1.v241.v208i, 0, 2) {
      allocate squashed_head1_filter_0_d_def__[float32 * 8] in Stack
      produce squashed_head1_filter_0_d_def__ {
       squashed_head1_filter_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
       let t22057 = t22053 + updated_head1_filter.s1.v241.v208i
       for (squashed_head1_filter_0_d_def__.s1.r1275$x, 0, num_stages) {
        squashed_head1_filter_0_d_def__[ramp(0, 1, 8)] = squashed_head1_filter_0_d_def__[ramp(0, 1, 8)] + (head1_conv_1_d_def__[ramp(squashed_head1_filter_0_d_def__.s1.r1275$x*8, 1, 8) aligned(8, 0)]*x8(pipeline_features[(pipeline_features.stride.2*squashed_head1_filter_0_d_def__.s1.r1275$x) + t22057]))
       }
      }
      consume squashed_head1_filter_0_d_def__ {
       let t19914 = (float32x8)exp_f32(x8(0.000000f) - head1_filter[ramp(((t22056 + updated_head1_filter.s1.v241.v208i)*head1_filter.stride.1) + t22054, 1, 8)])
       updated_head1_filter[ramp(((t22056 + updated_head1_filter.s1.v241.v208i)*updated_head1_filter.stride.1) + t22041, 1, 8)] = x8(0.000000f) - (((x8(0.000000f) - squashed_head1_filter_0_d_def__[ramp(0, 1, 8)])/((t19914 + x8(1.000000f))*(t19914 + x8(1.000000f))))*t19914)
      }
      free squashed_head1_filter_0_d_def__
     }
    }
   }
  }
  parallel (updated_head1_filter.s2.v241.v241.v241, 0, 80) {
   if (updated_head1_filter.s2.v241.v241.v241 < 60) {
    let t22060 = (updated_head1_filter.s2.v241.v241.v241/20)*2
    let t22061 = (updated_head1_filter.s2.v241.v241.v241 % 20)*2
    for (updated_head1_filter.s2.v242.v209i, 0, 2) {
     let t22063 = (t22060 + updated_head1_filter.s2.v242.v209i)*updated_head1_filter.stride.2
     for (updated_head1_filter.s2.v241.v208i, 0, 2) {
      let t19915 = ((t22061 + updated_head1_filter.s2.v241.v208i)*updated_head1_filter.stride.1) + t22063
      let t20172 = t19915 + updated_head1_filter.stride.3
      updated_head1_filter[ramp(t20172, 1, 8)] = (updated_head1_filter[ramp(t20172, 1, 8)]*x8(0.900000f)) + (updated_head1_filter[ramp((updated_head1_filter.stride.3*3) + t19915, 1, 8)]*x8(0.100000f))
     }
    }
   } else {
    let t22066 = (updated_head1_filter.s2.v241.v241.v241 % 20)*2
    let t22065 = updated_head1_filter.stride.2*6
    for (updated_head1_filter.s2.v241.v208i, 0, 2) {
     let t19917 = ((t22066 + updated_head1_filter.s2.v241.v208i)*updated_head1_filter.stride.1) + t22065
     let t20173 = t19917 + updated_head1_filter.stride.3
     updated_head1_filter[ramp(t20173, 1, 8)] = (updated_head1_filter[ramp(t20173, 1, 8)]*x8(0.900000f)) + (updated_head1_filter[ramp((updated_head1_filter.stride.3*3) + t19917, 1, 8)]*x8(0.100000f))
    }
   }
  }
  let t22068 = updated_head1_filter.stride.3*3
  let t22069 = updated_head1_filter.stride.3*2
  parallel (updated_head1_filter.s3.v241.v241.v241, 0, 80) {
   if (updated_head1_filter.s3.v241.v241.v241 < 60) {
    let t22071 = (updated_head1_filter.s3.v241.v241.v241/20)*2
    let t22072 = (updated_head1_filter.s3.v241.v241.v241 % 20)*2
    for (updated_head1_filter.s3.v242.v209i, 0, 2) {
     let t22073 = (t22071 + updated_head1_filter.s3.v242.v209i)*updated_head1_filter.stride.2
     for (updated_head1_filter.s3.v241.v208i, 0, 2) {
      let t19919 = ((t22072 + updated_head1_filter.s3.v241.v208i)*updated_head1_filter.stride.1) + t22073
      let t19921 = updated_head1_filter[ramp(t19919 + t22068, 1, 8)]
      let t20174 = t19919 + t22069
      updated_head1_filter[ramp(t20174, 1, 8)] = (updated_head1_filter[ramp(t20174, 1, 8)]*x8(0.999000f)) + ((t19921*t19921)*x8(0.001000f))
     }
    }
   } else {
    let t22075 = (updated_head1_filter.s3.v241.v241.v241 % 20)*2
    let t22074 = updated_head1_filter.stride.2*6
    for (updated_head1_filter.s3.v241.v208i, 0, 2) {
     let t19922 = ((t22075 + updated_head1_filter.s3.v241.v208i)*updated_head1_filter.stride.1) + t22074
     let t19924 = updated_head1_filter[ramp(t19922 + t22068, 1, 8)]
     let t20175 = t19922 + t22069
     updated_head1_filter[ramp(t20175, 1, 8)] = (updated_head1_filter[ramp(t20175, 1, 8)]*x8(0.999000f)) + ((t19924*t19924)*x8(0.001000f))
    }
   }
  }
  let t22081 = float32((timestep + 1))
  let t22078 = 1.000000f/(1.000000f - (float32)pow_f32(0.999000f, t22081))
  let t22076 = 1.000000f/(1.000000f - (float32)pow_f32(0.900000f, t22081))
  parallel (updated_head1_filter.s4.v241.v241.v241, 0, 80) {
   if (updated_head1_filter.s4.v241.v241.v241 < 60) {
    let t22082 = (updated_head1_filter.s4.v241.v241.v241/20)*2
    let t22083 = (updated_head1_filter.s4.v241.v241.v241 % 20)*2
    for (updated_head1_filter.s4.v242.v209i, 0, 2) {
     let t22088 = t22082 + updated_head1_filter.s4.v242.v209i
     let t22085 = t22088*updated_head1_filter.stride.2
     let t22086 = head1_filter.stride.2*t22088
     for (updated_head1_filter.s4.v241.v208i, 0, 2) {
      let t19927 = ((t22083 + updated_head1_filter.s4.v241.v208i)*updated_head1_filter.stride.1) + t22085
      updated_head1_filter[ramp(t19927, 1, 8)] = head1_filter[ramp(((t22083 + updated_head1_filter.s4.v241.v208i)*head1_filter.stride.1) + t22086, 1, 8)] - (((updated_head1_filter[ramp(t19927 + updated_head1_filter.stride.3, 1, 8)]*x8((float32)learning_rate))*x8(t22076))/((float32x8)sqrt_f32(updated_head1_filter[ramp((updated_head1_filter.stride.3*2) + t19927, 1, 8)]*x8(t22078)) + x8(0.000010f)))
     }
    }
   } else {
    let t22090 = (updated_head1_filter.s4.v241.v241.v241 % 20)*2
    let t22089 = updated_head1_filter.stride.2*6
    let t22091 = head1_filter.stride.2*6
    for (updated_head1_filter.s4.v241.v208i, 0, 2) {
     let t19929 = ((t22090 + updated_head1_filter.s4.v241.v208i)*updated_head1_filter.stride.1) + t22089
     updated_head1_filter[ramp(t19929, 1, 8)] = head1_filter[ramp(((t22090 + updated_head1_filter.s4.v241.v208i)*head1_filter.stride.1) + t22091, 1, 8)] - (((updated_head1_filter[ramp(t19929 + updated_head1_filter.stride.3, 1, 8)]*x8((float32)learning_rate))*x8(t22076))/((float32x8)sqrt_f32(updated_head1_filter[ramp((updated_head1_filter.stride.3*2) + t19929, 1, 8)]*x8(t22078)) + x8(0.000010f)))
    }
   }
  }
 }
 allocate head1_bias_im_0_d_def__[float32 * 8]
 produce head1_bias_im_0_d_def__ {
  head1_bias_im_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
  consume head1_conv_1_d_def__ {
   for (head1_bias_im_0_d_def__.s1.r1255$x, 0, num_stages) {
    head1_bias_im_0_d_def__[ramp(0, 1, 8)] = head1_bias_im_0_d_def__[ramp(0, 1, 8)] + head1_conv_1_d_def__[ramp(head1_bias_im_0_d_def__.s1.r1255$x*8, 1, 8) aligned(8, 0)]
   }
  }
  free head1_conv_1_d_def__
 }
 produce updated_head1_bias {
  consume head1_bias_im_0_d_def__ {
   updated_head1_bias[ramp(updated_head1_bias.stride.1*3, 1, 8) aligned(3, 0)] = head1_bias_im_0_d_def__[ramp(0, 1, 8)]
  }
  free head1_bias_im_0_d_def__
  updated_head1_bias[ramp(updated_head1_bias.stride.1, 1, 8)] = (updated_head1_bias[ramp(updated_head1_bias.stride.1, 1, 8)]*x8(0.900000f)) + (updated_head1_bias[ramp(updated_head1_bias.stride.1*3, 1, 8) aligned(3, 0)]*x8(0.100000f))
  let t19930 = updated_head1_bias[ramp(updated_head1_bias.stride.1*3, 1, 8) aligned(3, 0)]
  updated_head1_bias[ramp(updated_head1_bias.stride.1*2, 1, 8) aligned(2, 0)] = (updated_head1_bias[ramp(updated_head1_bias.stride.1*2, 1, 8) aligned(2, 0)]*x8(0.999000f)) + ((t19930*t19930)*x8(0.001000f))
  updated_head1_bias[ramp(0, 1, 8)] = head1_bias[ramp(0, 1, 8)] - (((updated_head1_bias[ramp(updated_head1_bias.stride.1, 1, 8)]*x8((float32)learning_rate))*x8(1.000000f/(1.000000f - (float32)pow_f32(0.900000f, float32((timestep + 1))))))/((float32x8)sqrt_f32(updated_head1_bias[ramp(updated_head1_bias.stride.1*2, 1, 8) aligned(2, 0)]*x8(1.000000f/(1.000000f - (float32)pow_f32(0.999000f, float32((timestep + 1)))))) + x8(0.000010f)))
 }
 allocate head2_conv_1_d_def__[float32 * 24 * num_stages * batch_size]
 produce head2_conv_1_d_def__ {
  consume conv1_stage2_1_d_def__ {
   consume head2_conv {
    let t22093 = max((batch_size + 4)/5, 0)
    let t22094 = max(batch_size/5, 0)
    let t22096 = max(num_stages, 0)
    let t22095 = min(num_stages, 0)
    let t22097 = min(conv1_stage2.s1.n.min.s, 0)
    parallel (head2_conv_1_d_def__.s0.n.n, 0, t22093) {
     if (head2_conv_1_d_def__.s0.n.n < t22094) {
      let t22101 = head2_conv_1_d_def__.s0.n.n*5
      let t22100 = t22101 - t22097
      let t22098 = batch_size - t22101
      for (head2_conv_1_d_def__.s0.w, t22095, t22096) {
       let t22102 = min(t22098, 5)
       let t22104 = (head2_conv.n.extent_realized*head2_conv_1_d_def__.s0.w)*3
       let t22103 = (conv1_stage2_1_d_def__.n.extent_realized*head2_conv_1_d_def__.s0.w)*32
       let t22105 = head2_conv_1_d_def__.s0.w*3
       for (head2_conv_1_d_def__.s0.c.c, 0, 3) {
        allocate head2_relu_0_d_def__[float32 * 8 * 1 * t22102] in Stack
        produce head2_relu_0_d_def__ {
         for (head2_relu_0_d_def__.s0.n, t22101, t22102) {
          head2_relu_0_d_def__[ramp((head2_relu_0_d_def__.s0.n - t22101)*8, 1, 8) aligned(8, 0)] = x8(0.000000f)
         }
         let t22106 = ((head2_conv_1_d_def__.s0.c.c*8) + 8)*filter1.stride.1
         for (head2_relu_0_d_def__.s1.r955$x, 0, 32) {
          let t22108 = (conv1_stage2_1_d_def__.n.extent_realized*head2_relu_0_d_def__.s1.r955$x) + t22103
          let t22107 = head2_relu_0_d_def__.s1.r955$x + t22106
          for (head2_relu_0_d_def__.s1.n, t22101, t22102) {
           let t19931 = head2_relu_0_d_def__.s1.n - t22101
           head2_relu_0_d_def__[ramp(t19931*8, 1, 8) aligned(8, 0)] = head2_relu_0_d_def__[ramp(t19931*8, 1, 8) aligned(8, 0)] + (filter1[ramp(t22107, filter1.stride.1, 8)]*x8(conv1_stage2_1_d_def__[head2_relu_0_d_def__.s1.n + t22108]))
          }
         }
        }
        consume head2_relu_0_d_def__ {
         let t22109 = (((head2_conv.n.extent_realized*head2_conv_1_d_def__.s0.c.c) + t22104)*8) + t22100
         let t22110 = head2_conv_1_d_def__.s0.c.c + t22105
         for (head2_conv_1_d_def__.s0.n.ni, 0, 5) {
          head2_conv_1_d_def__[ramp(((((head2_conv_1_d_def__.s0.n.ni + t22101)*num_stages)*3) + t22110)*8, 1, 8) aligned(8, 0)] = select(head2_conv[ramp(head2_conv_1_d_def__.s0.n.ni + t22109, head2_conv.n.extent_realized, 8)] < x8(0.000000f), x8(0.000000f), head2_relu_0_d_def__[ramp(head2_conv_1_d_def__.s0.n.ni*8, 1, 8) aligned(8, 0)])
         }
        }
        free head2_relu_0_d_def__
       }
      }
     } else {
      let t22114 = head2_conv_1_d_def__.s0.n.n*5
      let t22113 = t22114 - t22097
      let t22111 = batch_size - t22114
      for (head2_conv_1_d_def__.s0.w, 0, num_stages) {
       let t22120 = min(t22111, 5)
       let t22117 = max(t22120, 0)
       let t22118 = (head2_conv.n.extent_realized*head2_conv_1_d_def__.s0.w)*3
       let t22116 = (conv1_stage2_1_d_def__.n.extent_realized*head2_conv_1_d_def__.s0.w)*32
       let t22119 = head2_conv_1_d_def__.s0.w*3
       for (head2_conv_1_d_def__.s0.c.c, 0, 3) {
        allocate head2_relu_0_d_def__[float32 * 8 * 1 * t22120] in Stack
        produce head2_relu_0_d_def__ {
         for (head2_relu_0_d_def__.s0.n, t22114, t22120) {
          head2_relu_0_d_def__[ramp((head2_relu_0_d_def__.s0.n - t22114)*8, 1, 8) aligned(8, 0)] = x8(0.000000f)
         }
         let t22121 = ((head2_conv_1_d_def__.s0.c.c*8) + 8)*filter1.stride.1
         for (head2_relu_0_d_def__.s1.r955$x, 0, 32) {
          let t22123 = (conv1_stage2_1_d_def__.n.extent_realized*head2_relu_0_d_def__.s1.r955$x) + t22116
          let t22122 = head2_relu_0_d_def__.s1.r955$x + t22121
          for (head2_relu_0_d_def__.s1.n, t22114, t22120) {
           let t19933 = head2_relu_0_d_def__.s1.n - t22114
           head2_relu_0_d_def__[ramp(t19933*8, 1, 8) aligned(8, 0)] = head2_relu_0_d_def__[ramp(t19933*8, 1, 8) aligned(8, 0)] + (filter1[ramp(t22122, filter1.stride.1, 8)]*x8(conv1_stage2_1_d_def__[head2_relu_0_d_def__.s1.n + t22123]))
          }
         }
        }
        consume head2_relu_0_d_def__ {
         let t22124 = (((head2_conv.n.extent_realized*head2_conv_1_d_def__.s0.c.c) + t22118)*8) + t22113
         let t22125 = head2_conv_1_d_def__.s0.c.c + t22119
         for (head2_conv_1_d_def__.s0.n.ni, 0, t22117) {
          head2_conv_1_d_def__[ramp(((((head2_conv_1_d_def__.s0.n.ni + t22114)*num_stages)*3) + t22125)*8, 1, 8) aligned(8, 0)] = select(head2_conv[ramp(head2_conv_1_d_def__.s0.n.ni + t22124, head2_conv.n.extent_realized, 8)] < x8(0.000000f), x8(0.000000f), head2_relu_0_d_def__[ramp(head2_conv_1_d_def__.s0.n.ni*8, 1, 8) aligned(8, 0)])
         }
        }
        free head2_relu_0_d_def__
       }
      }
     }
    }
   }
  }
 }
 free head2_conv
 produce updated_head2_filter {
  consume head2_conv_1_d_def__ {
   consume normalized_schedule_features {
    let t22130 = updated_head2_filter.stride.2*3
    let t22131 = min(conv1_stage2.s1.n.min.s, 0)
    let t22128 = (normalized_schedule_features.n.extent_realized*38) - t22131
    let t22129 = (updated_head2_filter.stride.1*38) + t22130
    parallel (updated_head2_filter.s1.v246.v246.v246, 0, 60) {
     if (updated_head2_filter.s1.v246.v246.v246 < 57) {
      let t22135 = updated_head2_filter.s1.v246.v246.v246 % 3
      let t22133 = (updated_head2_filter.s1.v246.v246.v246/3)*2
      let t22134 = (t22135*8) + t22130
      for (updated_head2_filter.s1.v247.v214i, 0, 2) {
       allocate head2_filter_im_0_d_def__[float32 * 8] in Stack
       produce head2_filter_im_0_d_def__ {
        head2_filter_im_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
        let t22136 = ((t22133 + updated_head2_filter.s1.v247.v214i)*normalized_schedule_features.n.extent_realized) - t22131
        for (head2_filter_im_0_d_def__.s1.r1061$y, 0, batch_size) {
         let t22137 = ((head2_filter_im_0_d_def__.s1.r1061$y*num_stages)*3) + t22135
         let t22138 = head2_filter_im_0_d_def__.s1.r1061$y + t22136
         for (head2_filter_im_0_d_def__.s1.r1061$x, 0, num_stages) {
          head2_filter_im_0_d_def__[ramp(0, 1, 8)] = head2_filter_im_0_d_def__[ramp(0, 1, 8)] + (head2_conv_1_d_def__[ramp(((head2_filter_im_0_d_def__.s1.r1061$x*3) + t22137)*8, 1, 8) aligned(8, 0)]*x8(normalized_schedule_features[((head2_filter_im_0_d_def__.s1.r1061$x*normalized_schedule_features.n.extent_realized)*39) + t22138]))
         }
        }
       }
       consume head2_filter_im_0_d_def__ {
        updated_head2_filter[ramp(((t22133 + updated_head2_filter.s1.v247.v214i)*updated_head2_filter.stride.1) + t22134, 1, 8)] = head2_filter_im_0_d_def__[ramp(0, 1, 8)]
       }
       free head2_filter_im_0_d_def__
      }
     } else {
      allocate head2_filter_im_0_d_def__[float32 * 8] in Stack
      produce head2_filter_im_0_d_def__ {
       head2_filter_im_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
       let t22139 = updated_head2_filter.s1.v246.v246.v246 % 3
       for (head2_filter_im_0_d_def__.s1.r1061$y, 0, batch_size) {
        let t22140 = ((head2_filter_im_0_d_def__.s1.r1061$y*num_stages)*3) + t22139
        let t22141 = head2_filter_im_0_d_def__.s1.r1061$y + t22128
        for (head2_filter_im_0_d_def__.s1.r1061$x, 0, num_stages) {
         head2_filter_im_0_d_def__[ramp(0, 1, 8)] = head2_filter_im_0_d_def__[ramp(0, 1, 8)] + (head2_conv_1_d_def__[ramp(((head2_filter_im_0_d_def__.s1.r1061$x*3) + t22140)*8, 1, 8) aligned(8, 0)]*x8(normalized_schedule_features[((head2_filter_im_0_d_def__.s1.r1061$x*normalized_schedule_features.n.extent_realized)*39) + t22141]))
        }
       }
      }
      consume head2_filter_im_0_d_def__ {
       updated_head2_filter[ramp(((updated_head2_filter.s1.v246.v246.v246 % 3)*8) + t22129, 1, 8)] = head2_filter_im_0_d_def__[ramp(0, 1, 8)]
      }
      free head2_filter_im_0_d_def__
     }
    }
   }
  }
  free normalized_schedule_features
  parallel (updated_head2_filter.s2.v246.v246.v246, 0, 60) {
   if (updated_head2_filter.s2.v246.v246.v246 < 57) {
    let t22145 = (updated_head2_filter.s2.v246.v246.v246/3)*2
    let t22144 = (updated_head2_filter.s2.v246.v246.v246 % 3)*8
    for (updated_head2_filter.s2.v247.v214i, 0, 2) {
     let t19935 = ((t22145 + updated_head2_filter.s2.v247.v214i)*updated_head2_filter.stride.1) + t22144
     let t20176 = t19935 + updated_head2_filter.stride.2
     updated_head2_filter[ramp(t20176, 1, 8)] = (updated_head2_filter[ramp(t20176, 1, 8)]*x8(0.900000f)) + (updated_head2_filter[ramp((updated_head2_filter.stride.2*3) + t19935, 1, 8)]*x8(0.100000f))
    }
   } else {
    let t19937 = (updated_head2_filter.stride.1*38) + ((updated_head2_filter.s2.v246.v246.v246 % 3)*8)
    let t20177 = t19937 + updated_head2_filter.stride.2
    updated_head2_filter[ramp(t20177, 1, 8)] = (updated_head2_filter[ramp(t20177, 1, 8)]*x8(0.900000f)) + (updated_head2_filter[ramp((updated_head2_filter.stride.2*3) + t19937, 1, 8)]*x8(0.100000f))
   }
  }
  let t22147 = updated_head2_filter.stride.2*3
  let t22148 = updated_head2_filter.stride.2*2
  parallel (updated_head2_filter.s3.v246.v246.v246, 0, 60) {
   if (updated_head2_filter.s3.v246.v246.v246 < 57) {
    let t22151 = (updated_head2_filter.s3.v246.v246.v246/3)*2
    let t22150 = (updated_head2_filter.s3.v246.v246.v246 % 3)*8
    for (updated_head2_filter.s3.v247.v214i, 0, 2) {
     let t19939 = ((t22151 + updated_head2_filter.s3.v247.v214i)*updated_head2_filter.stride.1) + t22150
     let t19941 = updated_head2_filter[ramp(t19939 + t22147, 1, 8)]
     let t20178 = t19939 + t22148
     updated_head2_filter[ramp(t20178, 1, 8)] = (updated_head2_filter[ramp(t20178, 1, 8)]*x8(0.999000f)) + ((t19941*t19941)*x8(0.001000f))
    }
   } else {
    let t19942 = (updated_head2_filter.stride.1*38) + ((updated_head2_filter.s3.v246.v246.v246 % 3)*8)
    let t19944 = updated_head2_filter[ramp(t19942 + t22147, 1, 8)]
    let t20179 = t19942 + t22148
    updated_head2_filter[ramp(t20179, 1, 8) aligned(2, 0)] = (updated_head2_filter[ramp(t20179, 1, 8) aligned(2, 0)]*x8(0.999000f)) + ((t19944*t19944)*x8(0.001000f))
   }
  }
  let t22157 = float32((timestep + 1))
  let t22154 = 1.000000f/(1.000000f - (float32)pow_f32(0.999000f, t22157))
  let t22152 = 1.000000f/(1.000000f - (float32)pow_f32(0.900000f, t22157))
  parallel (updated_head2_filter.s4.v246.v246.v246, 0, 60) {
   if (updated_head2_filter.s4.v246.v246.v246 < 57) {
    let t22159 = (updated_head2_filter.s4.v246.v246.v246/3)*2
    let t22158 = (updated_head2_filter.s4.v246.v246.v246 % 3)*8
    for (updated_head2_filter.s4.v247.v214i, 0, 2) {
     let t19947 = ((t22159 + updated_head2_filter.s4.v247.v214i)*updated_head2_filter.stride.1) + t22158
     updated_head2_filter[ramp(t19947, 1, 8)] = head2_filter[ramp(((t22159 + updated_head2_filter.s4.v247.v214i)*head2_filter.stride.1) + t22158, 1, 8)] - (((updated_head2_filter[ramp(t19947 + updated_head2_filter.stride.2, 1, 8)]*x8((float32)learning_rate))*x8(t22152))/((float32x8)sqrt_f32(updated_head2_filter[ramp((updated_head2_filter.stride.2*2) + t19947, 1, 8)]*x8(t22154)) + x8(0.000010f)))
    }
   } else {
    let t19949 = (updated_head2_filter.stride.1*38) + ((updated_head2_filter.s4.v246.v246.v246 % 3)*8)
    updated_head2_filter[ramp(t19949, 1, 8) aligned(2, 0)] = head2_filter[ramp((head2_filter.stride.1*38) + ((updated_head2_filter.s4.v246.v246.v246 % 3)*8), 1, 8) aligned(2, 0)] - (((updated_head2_filter[ramp(t19949 + updated_head2_filter.stride.2, 1, 8)]*x8((float32)learning_rate))*x8(t22152))/((float32x8)sqrt_f32(updated_head2_filter[ramp((updated_head2_filter.stride.2*2) + t19949, 1, 8) aligned(2, 0)]*x8(t22154)) + x8(0.000010f)))
   }
  }
 }
 produce updated_head2_bias {
  consume head2_conv_1_d_def__ {
   let t22161 = updated_head2_bias.stride.1*3
   parallel (updated_head2_bias.s1.v249.v249, 0, 3) {
    allocate head2_bias_im_0_d_def__[float32 * 8]
    produce head2_bias_im_0_d_def__ {
     head2_bias_im_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
     for (head2_bias_im_0_d_def__.s1.r1082$y, 0, batch_size) {
      let t22162 = ((head2_bias_im_0_d_def__.s1.r1082$y*num_stages)*3) + updated_head2_bias.s1.v249.v249
      for (head2_bias_im_0_d_def__.s1.r1082$x, 0, num_stages) {
       allocate head2_conv_0_d_def__$1[float32 * 8] in Stack
       produce head2_conv_0_d_def__$1 {
        head2_conv_0_d_def__$1[ramp(0, 1, 8)] = head2_conv_1_d_def__[ramp(((head2_bias_im_0_d_def__.s1.r1082$x*3) + t22162)*8, 1, 8) aligned(8, 0)]
       }
       consume head2_conv_0_d_def__$1 {
        head2_bias_im_0_d_def__[ramp(0, 1, 8)] = head2_bias_im_0_d_def__[ramp(0, 1, 8)] + head2_conv_0_d_def__$1[ramp(0, 1, 8)]
       }
       free head2_conv_0_d_def__$1
      }
     }
    }
    consume head2_bias_im_0_d_def__ {
     updated_head2_bias[ramp((updated_head2_bias.s1.v249.v249*8) + t22161, 1, 8)] = head2_bias_im_0_d_def__[ramp(0, 1, 8)]
    }
    free head2_bias_im_0_d_def__
   }
  }
  free head2_conv_1_d_def__
  parallel (updated_head2_bias.s2.v249.v249, 0, 3) {
   let t20180 = (updated_head2_bias.s2.v249.v249*8) + updated_head2_bias.stride.1
   updated_head2_bias[ramp(t20180, 1, 8)] = (updated_head2_bias[ramp(t20180, 1, 8)]*x8(0.900000f)) + (updated_head2_bias[ramp((updated_head2_bias.stride.1*3) + (updated_head2_bias.s2.v249.v249*8), 1, 8)]*x8(0.100000f))
  }
  parallel (updated_head2_bias.s3.v249.v249, 0, 3) {
   let t19952 = updated_head2_bias[ramp((updated_head2_bias.stride.1*3) + (updated_head2_bias.s3.v249.v249*8), 1, 8)]
   let t20181 = (updated_head2_bias.s3.v249.v249*4) + updated_head2_bias.stride.1
   updated_head2_bias[ramp(t20181*2, 1, 8) aligned(2, 0)] = (updated_head2_bias[ramp(t20181*2, 1, 8) aligned(2, 0)]*x8(0.999000f)) + ((t19952*t19952)*x8(0.001000f))
  }
  let t22167 = float32((timestep + 1))
  let t22166 = 1.000000f/(1.000000f - (float32)pow_f32(0.999000f, t22167))
  let t22165 = 1.000000f/(1.000000f - (float32)pow_f32(0.900000f, t22167))
  parallel (updated_head2_bias.s4.v249.v249, 0, 3) {
   updated_head2_bias[ramp(updated_head2_bias.s4.v249.v249*8, 1, 8) aligned(8, 0)] = head2_bias[ramp(updated_head2_bias.s4.v249.v249*8, 1, 8) aligned(8, 0)] - (((updated_head2_bias[ramp((updated_head2_bias.s4.v249.v249*8) + updated_head2_bias.stride.1, 1, 8)]*x8((float32)learning_rate))*x8(t22165))/((float32x8)sqrt_f32(updated_head2_bias[ramp(((updated_head2_bias.s4.v249.v249*4) + updated_head2_bias.stride.1)*2, 1, 8) aligned(2, 0)]*x8(t22166)) + x8(0.000010f)))
  }
 }
 allocate filter1_im_0_d_def__[float32 * 32 * 32]
 produce filter1_im_0_d_def__ {
  parallel (filter1_im_0_d_def__.s0.v18, 0, 32) {
   let t22168 = filter1_im_0_d_def__.s0.v18*4
   for (filter1_im_0_d_def__.s0.v19.v19, 0, 4) {
    filter1_im_0_d_def__[ramp((filter1_im_0_d_def__.s0.v19.v19 + t22168)*8, 1, 8) aligned(8, 0)] = x8(0.000000f)
   }
  }
  consume conv1_stage2_1_d_def__ {
   consume head2_relu {
    let t22169 = min(conv1_stage2.s1.n.min.s, 0)
    parallel (filter1_im_0_d_def__.s1.v18, 0, 32) {
     let t22170 = filter1_im_0_d_def__.s1.v18*32
     let t22171 = conv1_stage2_1_d_def__.n.extent_realized*filter1_im_0_d_def__.s1.v18
     for (filter1_im_0_d_def__.s1.r977$z, 0, 24) {
      let t22173 = (filter1_im_0_d_def__.s1.r977$z*head2_relu.n.extent_realized) - t22169
      let t22172 = filter1_im_0_d_def__.s1.r977$z + t22170
      for (filter1_im_0_d_def__.s1.r977$y, 0, batch_size) {
       let t22175 = filter1_im_0_d_def__.s1.r977$y + t22173
       let t22174 = filter1_im_0_d_def__.s1.r977$y + t22171
       for (filter1_im_0_d_def__.s1.r977$x, 0, num_stages) {
        filter1_im_0_d_def__[t22172 + 8] = filter1_im_0_d_def__[t22172 + 8] + (conv1_stage2_1_d_def__[((conv1_stage2_1_d_def__.n.extent_realized*filter1_im_0_d_def__.s1.r977$x)*32) + t22174]*head2_relu[((filter1_im_0_d_def__.s1.r977$x*head2_relu.n.extent_realized)*24) + t22175])
       }
      }
     }
    }
   }
  }
  free head2_relu
  free conv1_stage2_1_d_def__
  consume conv1_stage1_1_d_def__ {
   consume head1_conv {
    parallel (filter1_im_0_d_def__.s2.v18, 0, 32) {
     let t22177 = filter1_im_0_d_def__.s2.v18*num_stages
     let t22176 = filter1_im_0_d_def__.s2.v18*32
     for (filter1_im_0_d_def__.s2.r1173$y, 0, 8) {
      let t22178 = filter1_im_0_d_def__.s2.r1173$y + t22176
      for (filter1_im_0_d_def__.s2.r1173$x, 0, num_stages) {
       filter1_im_0_d_def__[t22178] = filter1_im_0_d_def__[t22178] + (conv1_stage1_1_d_def__[filter1_im_0_d_def__.s2.r1173$x + t22177]*head1_conv[(filter1_im_0_d_def__.s2.r1173$x*8) + filter1_im_0_d_def__.s2.r1173$y])
      }
     }
    }
   }
  }
  free head1_conv
 }
 produce updated_filter1 {
  consume filter1_im_0_d_def__ {
   let t22179 = updated_filter1.stride.2*3
   parallel (updated_filter1.s1.v251.v251.v251, 0, 32) {
    let t22180 = (updated_filter1.s1.v251.v251.v251/2)*2
    let t22181 = (updated_filter1.s1.v251.v251.v251 % 2)*2
    for (updated_filter1.s1.v252.v219i, 0, 2) {
     let t22182 = t22180 + updated_filter1.s1.v252.v219i
     for (updated_filter1.s1.v251.v218i.v218i, 0, 2) {
      let t20185 = t22181 + updated_filter1.s1.v251.v218i.v218i
      updated_filter1[ramp((t20185*8) + ((t22182*updated_filter1.stride.1) + t22179), 1, 8)] = filter1_im_0_d_def__[ramp((t20185*256) + t22182, 32, 8)]
     }
    }
   }
  }
  free filter1_im_0_d_def__
  parallel (updated_filter1.s2.v251.v251.v251, 0, 32) {
   let t22184 = (updated_filter1.s2.v251.v251.v251/2)*2
   let t22185 = (updated_filter1.s2.v251.v251.v251 % 2)*2
   for (updated_filter1.s2.v252.v219i, 0, 2) {
    let t22187 = (t22184 + updated_filter1.s2.v252.v219i)*updated_filter1.stride.1
    for (updated_filter1.s2.v251.v218i.v218i, 0, 2) {
     let t19957 = ((t22185 + updated_filter1.s2.v251.v218i.v218i)*8) + t22187
     let t20186 = t19957 + updated_filter1.stride.2
     updated_filter1[ramp(t20186, 1, 8)] = (updated_filter1[ramp(t20186, 1, 8)]*x8(0.900000f)) + (updated_filter1[ramp((updated_filter1.stride.2*3) + t19957, 1, 8)]*x8(0.100000f))
    }
   }
  }
  let t22189 = updated_filter1.stride.2*3
  let t22190 = updated_filter1.stride.2*2
  parallel (updated_filter1.s3.v251.v251.v251, 0, 32) {
   let t22191 = (updated_filter1.s3.v251.v251.v251/2)*2
   let t22192 = (updated_filter1.s3.v251.v251.v251 % 2)*2
   for (updated_filter1.s3.v252.v219i, 0, 2) {
    let t22193 = (t22191 + updated_filter1.s3.v252.v219i)*updated_filter1.stride.1
    for (updated_filter1.s3.v251.v218i.v218i, 0, 2) {
     let t19959 = ((t22192 + updated_filter1.s3.v251.v218i.v218i)*8) + t22193
     let t19961 = updated_filter1[ramp(t19959 + t22189, 1, 8)]
     let t20187 = t19959 + t22190
     updated_filter1[ramp(t20187, 1, 8)] = (updated_filter1[ramp(t20187, 1, 8)]*x8(0.999000f)) + ((t19961*t19961)*x8(0.001000f))
    }
   }
  }
  let t22197 = float32((timestep + 1))
  let t22196 = 1.000000f/(1.000000f - (float32)pow_f32(0.999000f, t22197))
  let t22194 = 1.000000f/(1.000000f - (float32)pow_f32(0.900000f, t22197))
  parallel (updated_filter1.s4.v251.v251.v251, 0, 32) {
   let t22198 = (updated_filter1.s4.v251.v251.v251/2)*2
   let t22199 = (updated_filter1.s4.v251.v251.v251 % 2)*2
   for (updated_filter1.s4.v252.v219i, 0, 2) {
    let t22204 = t22198 + updated_filter1.s4.v252.v219i
    let t22201 = t22204*updated_filter1.stride.1
    let t22202 = filter1.stride.1*t22204
    for (updated_filter1.s4.v251.v218i.v218i, 0, 2) {
     let t19964 = ((t22199 + updated_filter1.s4.v251.v218i.v218i)*8) + t22201
     updated_filter1[ramp(t19964, 1, 8)] = filter1[ramp(((t22199 + updated_filter1.s4.v251.v218i.v218i)*8) + t22202, 1, 8)] - (((updated_filter1[ramp(t19964 + updated_filter1.stride.2, 1, 8)]*x8((float32)learning_rate))*x8(t22194))/((float32x8)sqrt_f32(updated_filter1[ramp((updated_filter1.stride.2*2) + t19964, 1, 8)]*x8(t22196)) + x8(0.000010f)))
    }
   }
  }
 }
 produce updated_bias1 {
  consume conv1_stage1_1_d_def__ {
   let t22205 = updated_bias1.stride.1*3
   parallel (updated_bias1.s1.v254.v254, 0, 4) {
    allocate bias1_im_0_d_def__[float32 * 8]
    produce bias1_im_0_d_def__ {
     bias1_im_0_d_def__[ramp(0, 1, 8)] = x8(0.000000f)
     let t22206 = (num_stages*updated_bias1.s1.v254.v254)*8
     for (bias1_im_0_d_def__.s1.r1193$x, 0, num_stages) {
      bias1_im_0_d_def__[ramp(0, 1, 8)] = bias1_im_0_d_def__[ramp(0, 1, 8)] + conv1_stage1_1_d_def__[ramp(bias1_im_0_d_def__.s1.r1193$x + t22206, num_stages, 8)]
     }
    }
    consume bias1_im_0_d_def__ {
     updated_bias1[ramp((updated_bias1.s1.v254.v254*8) + t22205, 1, 8)] = bias1_im_0_d_def__[ramp(0, 1, 8)]
    }
    free bias1_im_0_d_def__
   }
  }
  free conv1_stage1_1_d_def__
  parallel (updated_bias1.s2.v254.v254, 0, 4) {
   let t20188 = (updated_bias1.s2.v254.v254*8) + updated_bias1.stride.1
   updated_bias1[ramp(t20188, 1, 8)] = (updated_bias1[ramp(t20188, 1, 8)]*x8(0.900000f)) + (updated_bias1[ramp((updated_bias1.stride.1*3) + (updated_bias1.s2.v254.v254*8), 1, 8)]*x8(0.100000f))
  }
  parallel (updated_bias1.s3.v254.v254, 0, 4) {
   let t19967 = updated_bias1[ramp((updated_bias1.stride.1*3) + (updated_bias1.s3.v254.v254*8), 1, 8)]
   let t20189 = (updated_bias1.s3.v254.v254*4) + updated_bias1.stride.1
   updated_bias1[ramp(t20189*2, 1, 8) aligned(2, 0)] = (updated_bias1[ramp(t20189*2, 1, 8) aligned(2, 0)]*x8(0.999000f)) + ((t19967*t19967)*x8(0.001000f))
  }
  let t22211 = float32((timestep + 1))
  let t22210 = 1.000000f/(1.000000f - (float32)pow_f32(0.999000f, t22211))
  let t22209 = 1.000000f/(1.000000f - (float32)pow_f32(0.900000f, t22211))
  parallel (updated_bias1.s4.v254.v254, 0, 4) {
   updated_bias1[ramp(updated_bias1.s4.v254.v254*8, 1, 8) aligned(8, 0)] = bias1[ramp(updated_bias1.s4.v254.v254*8, 1, 8) aligned(8, 0)] - (((updated_bias1[ramp((updated_bias1.s4.v254.v254*8) + updated_bias1.stride.1, 1, 8)]*x8((float32)learning_rate))*x8(t22209))/((float32x8)sqrt_f32(updated_bias1[ramp(((updated_bias1.s4.v254.v254*4) + updated_bias1.stride.1)*2, 1, 8) aligned(2, 0)]*x8(t22210)) + x8(0.000010f)))
  }
 }
 produce prediction_output {
  consume f7 {
   let t22214 = max(prediction_output.min.0, 0)
   let t22212 = (prediction_output.extent.0 + 7)/8
   let t22213 = prediction_output.extent.0/8
   parallel (prediction_output.s0.n.n, 0, t22212) {
    if (prediction_output.s0.n.n < t22213) {
     prediction_output[ramp(prediction_output.s0.n.n*8, 1, 8) aligned(8, 0)] = f7[ramp((prediction_output.s0.n.n*8) + t22214, 1, 8)]
    } else {
     let prediction_output.s0.n.ni.new_max.s = prediction_output.extent.0 - (prediction_output.s0.n.n*8)
     let t22218 = prediction_output.s0.n.n*8
     let t22215 = min(prediction_output.s0.n.ni.new_max.s, 8)
     let t22216 = t22214 + t22218
     for (prediction_output.s0.n.ni, 0, t22215) {
      prediction_output[prediction_output.s0.n.ni + t22218] = f7[prediction_output.s0.n.ni + t22216]
     }
    }
   }
  }
 }
 allocate sum[float32 * batch_size]
 produce sum {
  let t22219 = max((batch_size + 7)/8, 0)
  let t22220 = max(batch_size/8, 0)
  parallel (sum.s0.n.n, 0, t22219) {
   if (sum.s0.n.n < t22220) {
    sum[ramp(sum.s0.n.n*8, 1, 8) aligned(8, 0)] = x8(0.000000f)
   } else {
    let sum.s0.n.ni.new_max.s = batch_size - (sum.s0.n.n*8)
    let t22221 = max(min(sum.s0.n.ni.new_max.s, 8), 0)
    let t22222 = sum.s0.n.n*8
    for (sum.s0.n.ni, 0, t22221) {
     sum[sum.s0.n.ni + t22222] = 0.000000f
    }
   }
  }
  consume conv1_stage2 {
   let t22223 = max((batch_size + 7)/8, 0)
   let t22224 = max(batch_size/8, 0)
   let t22225 = min(schedule_features.min.0.required.s, 0)
   parallel (sum.s1.n.n, 0, t22223) {
    if (sum.s1.n.n < t22224) {
     let t22228 = sum.s1.n.n*8
     let t22227 = t22228 - t22225
     for (sum.s1.r107$y, 0, num_stages) {
      let t22229 = ((conv1_stage2.n.extent_realized*sum.s1.r107$y)*32) + t22227
      for (sum.s1.r107$x, 0, 32) {
       sum[ramp(t22228, 1, 8) aligned(8, 0)] = sum[ramp(t22228, 1, 8) aligned(8, 0)] - min(conv1_stage2[ramp((conv1_stage2.n.extent_realized*sum.s1.r107$x) + t22229, 1, 8)], x8(0.000000f))
      }
     }
    } else {
     let t22233 = sum.s1.n.n*8
     let t22232 = t22233 - t22225
     let t22230 = batch_size - t22233
     for (sum.s1.r107$y, 0, num_stages) {
      let t22234 = max(min(t22230, 8), 0)
      let t22235 = ((conv1_stage2.n.extent_realized*sum.s1.r107$y)*32) + t22232
      for (sum.s1.r107$x, 0, 32) {
       let t22236 = (conv1_stage2.n.extent_realized*sum.s1.r107$x) + t22235
       for (sum.s1.n.ni, 0, t22234) {
        let t20190 = sum.s1.n.ni + t22233
        sum[t20190] = sum[t20190] - min(conv1_stage2[sum.s1.n.ni + t22236], 0.000000f)
       }
      }
     }
    }
   }
  }
 }
 allocate sum$1[float32 * 1]
 produce sum$1 {
  sum$1[0] = 0.000000f
  consume sum {
   consume f7 {
    let t22238 = min(prediction_output.min.0, 0)
    let t22237 = max(min(batch_size + -1, reference), 0) - true_runtime.min.0
    for (sum$1.s1.r102$x, 0, batch_size) {
     let t19969 = true_runtime[t22237]
     let t19970 = (1.000000f/max(f7[sum$1.s1.r102$x - t22238]*(1.000000f/t19969), 0.000000f)) - (1.000000f/(true_runtime[sum$1.s1.r102$x - true_runtime.min.0]*(1.000000f/t19969)))
     sum$1[0] = sum$1[0] + ((t19970*t19970) + (sum[sum$1.s1.r102$x]*0.000010f))
    }
   }
  }
  free f7
  free sum
 }
 produce loss_output {
  consume sum$1 {
   loss_output[0] = sum$1[0]
  }
 }
 free sum$1
 produce load_cost_output {
  consume conv1_stage2 {
   let t22239 = min(schedule_features.min.0.required.s, 0)
   let t22248 = schedule_features.stride.1*34
   let t22250 = schedule_features.stride.1*33
   let t22244 = schedule_features.stride.1*32
   let t22246 = schedule_features.stride.1*31
   let t22257 = schedule_features.stride.1*28
   let t22256 = schedule_features.stride.1*27
   let t22259 = schedule_features.stride.1*26
   let t22245 = schedule_features.stride.1*25
   let t22243 = schedule_features.stride.1*24
   let t22261 = schedule_features.stride.1*19
   let t22263 = schedule_features.stride.1*18
   let t22242 = schedule_features.stride.1*10
   let t22241 = schedule_features.stride.1*9
   let t22240 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   for (load_cost_output.s0.n, load_cost_output.min.0, load_cost_output.extent.0) {
    allocate f1[float32 * 1]
    produce f1 {
     f1[0] = 0.000000f
     let t22271 = load_cost_output.s0.n - t22240
     let t22264 = load_cost_output.s0.n - t22239
     let t22288 = (t22263 - t22240) + load_cost_output.s0.n
     let t22286 = (t22261 - t22240) + load_cost_output.s0.n
     let t22284 = (t22259 - t22240) + load_cost_output.s0.n
     let t22282 = (t22257 - t22240) + load_cost_output.s0.n
     let t22281 = (t22256 - t22240) + load_cost_output.s0.n
     let t22275 = (t22250 - t22240) + load_cost_output.s0.n
     let t22273 = (t22248 - t22240) + load_cost_output.s0.n
     let t22270 = (t22246 - t22240) + load_cost_output.s0.n
     let t22269 = (t22245 - t22240) + load_cost_output.s0.n
     let t22268 = (t22244 - t22240) + load_cost_output.s0.n
     let t22267 = (t22243 - t22240) + load_cost_output.s0.n
     let t22266 = (t22242 - t22240) + load_cost_output.s0.n
     let t22265 = (t22241 - t22240) + load_cost_output.s0.n
     for (f1.s1.r77$x, 0, num_stages) {
      let t19975.s = schedule_features[(f1.s1.r77$x*schedule_features.stride.2) + t22265]*schedule_features[(f1.s1.r77$x*schedule_features.stride.2) + t22266]
      let t19976 = schedule_features[(f1.s1.r77$x*schedule_features.stride.2) + t22267]
      let t19977 = schedule_features[(f1.s1.r77$x*schedule_features.stride.2) + t22268]
      let t19978 = schedule_features[(f1.s1.r77$x*schedule_features.stride.2) + t22269]
      let t19979 = schedule_features[(f1.s1.r77$x*schedule_features.stride.2) + t22270]
      let t19980 = schedule_features[(f1.s1.r77$x*schedule_features.stride.2) + t22271]
      let t20192 = conv1_stage2.n.extent_realized*f1.s1.r77$x
      let t20193 = f1.s1.r77$x*schedule_features.stride.2
      let t20194 = max(t19975.s, 1.000000f)
      f1[0] = f1[0] + ((max(conv1_stage2[(t20192*32) + ((conv1_stage2.n.extent_realized*15) + t22264)], 0.000000f)*(schedule_features[t20193 + t22273]*t20194)) + ((max(conv1_stage2[(t20192*32) + ((conv1_stage2.n.extent_realized*14) + t22264)], 0.000000f)*(schedule_features[t20193 + t22275]*t20194)) + ((max(conv1_stage2[(t20192*32) + ((conv1_stage2.n.extent_realized*13) + t22264)], 0.000000f)*(t19976*t19977)) + ((max(conv1_stage2[(t20192*32) + ((conv1_stage2.n.extent_realized*12) + t22264)], 0.000000f)*(t19977*t19978)) + ((max(conv1_stage2[(t20192*32) + ((conv1_stage2.n.extent_realized*11) + t22264)], 0.000000f)*(t19976*t19979)) + ((max(conv1_stage2[(t20192*32) + ((conv1_stage2.n.extent_realized*10) + t22264)], 0.000000f)*(t19978*t19979)) + ((max(conv1_stage2[(t20192*32) + ((conv1_stage2.n.extent_realized*9) + t22264)], 0.000000f)*(schedule_features[t20193 + t22281]*t19976)) + ((max(conv1_stage2[(((t20192*4) + conv1_stage2.n.extent_realized)*8) + t22264], 0.000000f)*(schedule_features[t20193 + t22282]*t19978)) + ((max(conv1_stage2[(t20192*32) + ((conv1_stage2.n.extent_realized*7) + t22264)], 0.000000f)*(schedule_features[t20193 + t22284]*t19976)) + ((max(conv1_stage2[(t20192*32) + ((conv1_stage2.n.extent_realized*5) + t22264)], 0.000000f)*(schedule_features[t20193 + t22286]*t19980)) + (max(conv1_stage2[(t20192*32) + ((conv1_stage2.n.extent_realized*6) + t22264)], 0.000000f)*(schedule_features[t20193 + t22288]*t19980))))))))))))
     }
    }
    consume f1 {
     load_cost_output[load_cost_output.s0.n - load_cost_output.min.0] = f1[0]
    }
    free f1
   }
  }
 }
 produce store_cost_output {
  consume conv1_stage2 {
   let t22289 = min(schedule_features.min.0.required.s, 0)
   let t22291 = schedule_features.stride.1*30
   let t22301 = schedule_features.stride.1*29
   let t22298 = schedule_features.stride.1*25
   let t22297 = schedule_features.stride.1*24
   let t22295 = schedule_features.stride.1*12
   let t22302 = schedule_features.stride.1*11
   let t22294 = schedule_features.stride.1*10
   let t22292 = schedule_features.stride.1*9
   let t22290 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   for (store_cost_output.s0.n, store_cost_output.min.0, store_cost_output.extent.0) {
    allocate f3[float32 * 1]
    produce f3 {
     f3[0] = 0.000000f
     let t22315 = store_cost_output.s0.n - t22290
     let t22306 = store_cost_output.s0.n - t22289
     let t22319 = (t22302 - t22290) + store_cost_output.s0.n
     let t22318 = (t22301 - t22290) + store_cost_output.s0.n
     let t22314 = (t22298 - t22290) + store_cost_output.s0.n
     let t22313 = (t22297 - t22290) + store_cost_output.s0.n
     let t22311 = (t22295 - t22290) + store_cost_output.s0.n
     let t22310 = (t22294 - t22290) + store_cost_output.s0.n
     let t22308 = (t22292 - t22290) + store_cost_output.s0.n
     let t22307 = (t22291 - t22290) + store_cost_output.s0.n
     for (f3.s1.r77$x, 0, num_stages) {
      let t19985.s = schedule_features[(f3.s1.r77$x*schedule_features.stride.2) + t22307]
      let t19986 = schedule_features[(f3.s1.r77$x*schedule_features.stride.2) + t22308]
      let t19987 = 1.000000f < t19986
      let t19988 = f3.s1.r77$x == 0
      let t20195 = conv1_stage2.n.extent_realized*f3.s1.r77$x
      let t20196 = f3.s1.r77$x*schedule_features.stride.2
      let t20197 = max(t19985.s, 1.000000f)
      f3[0] = f3[0] + (((max(conv1_stage2[(t20195*32) + ((conv1_stage2.n.extent_realized*23) + t22306)], 0.000000f)*(schedule_features[t20196 + t22310]*((schedule_features[t20196 + t22311]*min(4096.000000f/t20197, t19986))*t19986))) + (select(t19987, (max(conv1_stage2[(t20195*32) + ((conv1_stage2.n.extent_realized*22) + t22306)], 0.000000f)*(schedule_features[t20196 + t22313] + schedule_features[t20196 + t22314]))/t20197, 0.000000f) + (schedule_features[t20196 + t22315]*((select(t19987, max(conv1_stage2[(((t20195*2) + conv1_stage2.n.extent_realized)*16) + t22306], 0.000000f), select(t19988, max(conv1_stage2[(t20195*32) + ((conv1_stage2.n.extent_realized*17) + t22306)], 0.000000f), max(conv1_stage2[(t20195*32) + ((conv1_stage2.n.extent_realized*18) + t22306)], 0.000000f)))*((schedule_features[t20196 + t22318]/t20197)*t19986)) + (schedule_features[t20196 + t22319]*select(t19987, max(conv1_stage2[(t20195*32) + ((conv1_stage2.n.extent_realized*19) + t22306)], 0.000000f), select(t19988, max(conv1_stage2[(t20195*32) + ((conv1_stage2.n.extent_realized*20) + t22306)], 0.000000f), max(conv1_stage2[(t20195*32) + ((conv1_stage2.n.extent_realized*21) + t22306)], 0.000000f))))))))*2.000000f)
     }
    }
    consume f3 {
     store_cost_output[store_cost_output.s0.n - store_cost_output.min.0] = f3[0]
    }
    free f3
   }
  }
 }
 produce compute_cost_output {
  consume conv1_stage2 {
   let t22324 = min(schedule_features.min.0.required.s, 0)
   let t22327 = schedule_features.stride.1*25
   let t22326 = schedule_features.stride.1*24
   let t22325 = schedule_features.stride.1*22
   let t22331 = schedule_features.stride.1*17
   let t22329 = schedule_features.stride.1*10
   let t22328 = schedule_features.stride.1*9
   let t22323 = ((schedule_features.min.2*schedule_features.stride.2) + (schedule_features.min.1*schedule_features.stride.1)) + schedule_features.min.0
   let t22330 = float32(num_cores)
   for (compute_cost_output.s0.n, compute_cost_output.min.0, compute_cost_output.extent.0) {
    allocate f5[float32 * 1]
    produce f5 {
     f5[0] = 0.000000f
     let t22333 = compute_cost_output.s0.n - t22324
     let t22339 = (t22331 - t22323) + compute_cost_output.s0.n
     let t22338 = (t22329 - t22323) + compute_cost_output.s0.n
     let t22337 = (t22328 - t22323) + compute_cost_output.s0.n
     let t22336 = (t22327 - t22323) + compute_cost_output.s0.n
     let t22335 = (t22326 - t22323) + compute_cost_output.s0.n
     let t22334 = (t22325 - t22323) + compute_cost_output.s0.n
     for (f5.s1.r77$x, 0, num_stages) {
      let t19993 = schedule_features[(f5.s1.r77$x*schedule_features.stride.2) + t22334]*schedule_features[(f5.s1.r77$x*schedule_features.stride.2) + t22335]
      let t19994 = schedule_features[(f5.s1.r77$x*schedule_features.stride.2) + t22336]
      let t19995 = max(schedule_features[(f5.s1.r77$x*schedule_features.stride.2) + t22337]*schedule_features[(f5.s1.r77$x*schedule_features.stride.2) + t22338], 1.000000f)/t22330
      let t20200 = conv1_stage2.n.extent_realized*f5.s1.r77$x
      f5[0] = f5[0] + (select(schedule_features[(f5.s1.r77$x*schedule_features.stride.2) + t22339] == 0.000000f, (max(conv1_stage2[(t20200*32) + t22333], 0.000000f)*t19993) + (max(conv1_stage2[(t20200*32) + (conv1_stage2.n.extent_realized + t22333)], 0.000000f)*t19994), (max(conv1_stage2[(((t20200*16) + conv1_stage2.n.extent_realized)*2) + t22333], 0.000000f)*t19993) + (max(conv1_stage2[(t20200*32) + ((conv1_stage2.n.extent_realized*3) + t22333)], 0.000000f)*t19994))*((float32)ceil_f32(t19995)/max(t19995, 1.000000f)))
     }
    }
    consume f5 {
     compute_cost_output[compute_cost_output.s0.n - compute_cost_output.min.0] = f5[0]
    }
    free f5
   }
  }
 }
 free conv1_stage2
}
}


